package com.hanista.mobogram.tgnet;

import android.support.v4.view.accessibility.AccessibilityNodeInfoCompat;
import com.hanista.mobogram.messenger.MessagesController;
import com.hanista.mobogram.messenger.exoplayer.C0700C;
import com.hanista.mobogram.messenger.exoplayer.util.MimeTypes;
import com.hanista.mobogram.messenger.support.widget.RecyclerView.ItemAnimator;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map.Entry;

public class TLRPC {
    public static final int CHAT_FLAG_IS_PUBLIC = 64;
    public static final int LAYER = 57;
    public static final int MESSAGE_FLAG_EDITED = 32768;
    public static final int MESSAGE_FLAG_FWD = 4;
    public static final int MESSAGE_FLAG_HAS_BOT_ID = 2048;
    public static final int MESSAGE_FLAG_HAS_ENTITIES = 128;
    public static final int MESSAGE_FLAG_HAS_FROM_ID = 256;
    public static final int MESSAGE_FLAG_HAS_MARKUP = 64;
    public static final int MESSAGE_FLAG_HAS_MEDIA = 512;
    public static final int MESSAGE_FLAG_HAS_VIEWS = 1024;
    public static final int MESSAGE_FLAG_MEGAGROUP = Integer.MIN_VALUE;
    public static final int MESSAGE_FLAG_REPLY = 8;
    public static final int USER_FLAG_ACCESS_HASH = 1;
    public static final int USER_FLAG_FIRST_NAME = 2;
    public static final int USER_FLAG_LAST_NAME = 4;
    public static final int USER_FLAG_PHONE = 16;
    public static final int USER_FLAG_PHOTO = 32;
    public static final int USER_FLAG_STATUS = 64;
    public static final int USER_FLAG_UNUSED = 128;
    public static final int USER_FLAG_UNUSED2 = 256;
    public static final int USER_FLAG_UNUSED3 = 512;
    public static final int USER_FLAG_USERNAME = 8;

    public static class Updates extends TLObject {
        public int chat_id;
        public ArrayList<Chat> chats;
        public int date;
        public ArrayList<MessageEntity> entities;
        public int flags;
        public int from_id;
        public TL_messageFwdHeader fwd_from;
        public int id;
        public MessageMedia media;
        public boolean media_unread;
        public boolean mentioned;
        public String message;
        public boolean out;
        public int pts;
        public int pts_count;
        public int reply_to_msg_id;
        public int seq;
        public int seq_start;
        public boolean silent;
        public Update update;
        public ArrayList<Update> updates;
        public int user_id;
        public ArrayList<User> users;
        public int via_bot_id;

        public Updates() {
            this.updates = new ArrayList();
            this.users = new ArrayList();
            this.chats = new ArrayList();
            this.entities = new ArrayList();
        }

        public static Updates TLdeserialize(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            Updates updates = null;
            switch (i) {
                case -1857044719:
                    updates = new TL_updateShortMessage();
                    break;
                case -484987010:
                    updates = new TL_updatesTooLong();
                    break;
                case 301019932:
                    updates = new TL_updateShortSentMessage();
                    break;
                case 377562760:
                    updates = new TL_updateShortChatMessage();
                    break;
                case 1918567619:
                    updates = new TL_updatesCombined();
                    break;
                case 1957577280:
                    updates = new TL_updates();
                    break;
                case 2027216577:
                    updates = new TL_updateShort();
                    break;
            }
            if (updates == null && z) {
                Object[] objArr = new Object[TLRPC.USER_FLAG_ACCESS_HASH];
                objArr[0] = Integer.valueOf(i);
                throw new RuntimeException(String.format("can't parse magic %x in Updates", objArr));
            }
            if (updates != null) {
                updates.readParams(abstractSerializedData, z);
            }
            return updates;
        }
    }

    public static class Audio extends TLObject {
        public long access_hash;
        public int date;
        public int dc_id;
        public int duration;
        public long id;
        public byte[] iv;
        public byte[] key;
        public String mime_type;
        public int size;
        public int user_id;

        public static Audio TLdeserialize(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            Audio audio = null;
            switch (i) {
                case -945003370:
                    audio = new TL_audio_old2();
                    break;
                case -102543275:
                    audio = new TL_audio_layer45();
                    break;
                case 1114908135:
                    audio = new TL_audio_old();
                    break;
                case 1431655926:
                    audio = new TL_audioEncrypted();
                    break;
                case 1483311320:
                    audio = new TL_audioEmpty_layer45();
                    break;
            }
            if (audio == null && z) {
                Object[] objArr = new Object[TLRPC.USER_FLAG_ACCESS_HASH];
                objArr[0] = Integer.valueOf(i);
                throw new RuntimeException(String.format("can't parse magic %x in Audio", objArr));
            }
            if (audio != null) {
                audio.readParams(abstractSerializedData, z);
            }
            return audio;
        }
    }

    public static class Bool extends TLObject {
        public static Bool TLdeserialize(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            Bool bool = null;
            switch (i) {
                case -1720552011:
                    bool = new TL_boolTrue();
                    break;
                case -1132882121:
                    bool = new TL_boolFalse();
                    break;
            }
            if (bool == null && z) {
                Object[] objArr = new Object[TLRPC.USER_FLAG_ACCESS_HASH];
                objArr[0] = Integer.valueOf(i);
                throw new RuntimeException(String.format("can't parse magic %x in Bool", objArr));
            }
            if (bool != null) {
                bool.readParams(abstractSerializedData, z);
            }
            return bool;
        }
    }

    public static class BotInfo extends TLObject {
        public ArrayList<TL_botCommand> commands;
        public String description;
        public int user_id;
        public int version;

        public BotInfo() {
            this.commands = new ArrayList();
        }

        public static BotInfo TLdeserialize(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            BotInfo botInfo = null;
            switch (i) {
                case -1729618630:
                    botInfo = new TL_botInfo();
                    break;
                case -1154598962:
                    botInfo = new TL_botInfoEmpty_layer48();
                    break;
                case 164583517:
                    botInfo = new TL_botInfo_layer48();
                    break;
            }
            if (botInfo == null && z) {
                Object[] objArr = new Object[TLRPC.USER_FLAG_ACCESS_HASH];
                objArr[0] = Integer.valueOf(i);
                throw new RuntimeException(String.format("can't parse magic %x in BotInfo", objArr));
            }
            if (botInfo != null) {
                botInfo.readParams(abstractSerializedData, z);
            }
            return botInfo;
        }
    }

    public static class BotInlineMessage extends TLObject {
        public String address;
        public String caption;
        public ArrayList<MessageEntity> entities;
        public String first_name;
        public int flags;
        public GeoPoint geo;
        public String last_name;
        public String message;
        public boolean no_webpage;
        public String phone_number;
        public String provider;
        public ReplyMarkup reply_markup;
        public String title;
        public String venue_id;

        public BotInlineMessage() {
            this.entities = new ArrayList();
        }

        public static BotInlineMessage TLdeserialize(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            BotInlineMessage botInlineMessage = null;
            switch (i) {
                case -1937807902:
                    botInlineMessage = new TL_botInlineMessageText();
                    break;
                case 175419739:
                    botInlineMessage = new TL_botInlineMessageMediaAuto();
                    break;
                case 904770772:
                    botInlineMessage = new TL_botInlineMessageMediaContact();
                    break;
                case 982505656:
                    botInlineMessage = new TL_botInlineMessageMediaGeo();
                    break;
                case 1130767150:
                    botInlineMessage = new TL_botInlineMessageMediaVenue();
                    break;
            }
            if (botInlineMessage == null && z) {
                Object[] objArr = new Object[TLRPC.USER_FLAG_ACCESS_HASH];
                objArr[0] = Integer.valueOf(i);
                throw new RuntimeException(String.format("can't parse magic %x in BotInlineMessage", objArr));
            }
            if (botInlineMessage != null) {
                botInlineMessage.readParams(abstractSerializedData, z);
            }
            return botInlineMessage;
        }
    }

    public static class BotInlineResult extends TLObject {
        public String content_type;
        public String content_url;
        public String description;
        public Document document;
        public int duration;
        public int flags;
        public int f2654h;
        public String id;
        public Photo photo;
        public long query_id;
        public BotInlineMessage send_message;
        public String thumb_url;
        public String title;
        public String type;
        public String url;
        public int f2655w;

        public static BotInlineResult TLdeserialize(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            BotInlineResult botInlineResult = null;
            switch (i) {
                case -1679053127:
                    botInlineResult = new TL_botInlineResult();
                    break;
                case 400266251:
                    botInlineResult = new TL_botInlineMediaResult();
                    break;
            }
            if (botInlineResult == null && z) {
                Object[] objArr = new Object[TLRPC.USER_FLAG_ACCESS_HASH];
                objArr[0] = Integer.valueOf(i);
                throw new RuntimeException(String.format("can't parse magic %x in BotInlineResult", objArr));
            }
            if (botInlineResult != null) {
                botInlineResult.readParams(abstractSerializedData, z);
            }
            return botInlineResult;
        }
    }

    public static class ChannelMessagesFilter extends TLObject {
        public boolean exclude_new_messages;
        public int flags;
        public ArrayList<TL_messageRange> ranges;

        public ChannelMessagesFilter() {
            this.ranges = new ArrayList();
        }

        public static ChannelMessagesFilter TLdeserialize(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            ChannelMessagesFilter channelMessagesFilter = null;
            switch (i) {
                case -1798033689:
                    channelMessagesFilter = new TL_channelMessagesFilterEmpty();
                    break;
                case -847783593:
                    channelMessagesFilter = new TL_channelMessagesFilter();
                    break;
            }
            if (channelMessagesFilter == null && z) {
                Object[] objArr = new Object[TLRPC.USER_FLAG_ACCESS_HASH];
                objArr[0] = Integer.valueOf(i);
                throw new RuntimeException(String.format("can't parse magic %x in ChannelMessagesFilter", objArr));
            }
            if (channelMessagesFilter != null) {
                channelMessagesFilter.readParams(abstractSerializedData, z);
            }
            return channelMessagesFilter;
        }
    }

    public static class ChannelParticipant extends TLObject {
        public int date;
        public int inviter_id;
        public int kicked_by;
        public int user_id;

        public static ChannelParticipant TLdeserialize(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            ChannelParticipant channelParticipant = null;
            switch (i) {
                case -1933187430:
                    channelParticipant = new TL_channelParticipantKicked();
                    break;
                case -1861910545:
                    channelParticipant = new TL_channelParticipantModerator();
                    break;
                case -1743180447:
                    channelParticipant = new TL_channelParticipantEditor();
                    break;
                case -1557620115:
                    channelParticipant = new TL_channelParticipantSelf();
                    break;
                case -471670279:
                    channelParticipant = new TL_channelParticipantCreator();
                    break;
                case 367766557:
                    channelParticipant = new TL_channelParticipant();
                    break;
            }
            if (channelParticipant == null && z) {
                Object[] objArr = new Object[TLRPC.USER_FLAG_ACCESS_HASH];
                objArr[0] = Integer.valueOf(i);
                throw new RuntimeException(String.format("can't parse magic %x in ChannelParticipant", objArr));
            }
            if (channelParticipant != null) {
                channelParticipant.readParams(abstractSerializedData, z);
            }
            return channelParticipant;
        }
    }

    public static class ChannelParticipantRole extends TLObject {
        public static ChannelParticipantRole TLdeserialize(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            ChannelParticipantRole channelParticipantRole = null;
            switch (i) {
                case -2113143156:
                    channelParticipantRole = new TL_channelRoleEditor();
                    break;
                case -1776756363:
                    channelParticipantRole = new TL_channelRoleModerator();
                    break;
                case -1299865402:
                    channelParticipantRole = new TL_channelRoleEmpty();
                    break;
            }
            if (channelParticipantRole == null && z) {
                Object[] objArr = new Object[TLRPC.USER_FLAG_ACCESS_HASH];
                objArr[0] = Integer.valueOf(i);
                throw new RuntimeException(String.format("can't parse magic %x in ChannelParticipantRole", objArr));
            }
            if (channelParticipantRole != null) {
                channelParticipantRole.readParams(abstractSerializedData, z);
            }
            return channelParticipantRole;
        }
    }

    public static class ChannelParticipantsFilter extends TLObject {
        public static ChannelParticipantsFilter TLdeserialize(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            ChannelParticipantsFilter channelParticipantsFilter = null;
            switch (i) {
                case -1328445861:
                    channelParticipantsFilter = new TL_channelParticipantsBots();
                    break;
                case -1268741783:
                    channelParticipantsFilter = new TL_channelParticipantsAdmins();
                    break;
                case -566281095:
                    channelParticipantsFilter = new TL_channelParticipantsRecent();
                    break;
                case 1010285434:
                    channelParticipantsFilter = new TL_channelParticipantsKicked();
                    break;
            }
            if (channelParticipantsFilter == null && z) {
                Object[] objArr = new Object[TLRPC.USER_FLAG_ACCESS_HASH];
                objArr[0] = Integer.valueOf(i);
                throw new RuntimeException(String.format("can't parse magic %x in ChannelParticipantsFilter", objArr));
            }
            if (channelParticipantsFilter != null) {
                channelParticipantsFilter.readParams(abstractSerializedData, z);
            }
            return channelParticipantsFilter;
        }
    }

    public static class Chat extends TLObject {
        public long access_hash;
        public String address;
        public boolean admin;
        public boolean admins_enabled;
        public boolean broadcast;
        public boolean checked_in;
        public boolean creator;
        public int date;
        public boolean deactivated;
        public boolean democracy;
        public boolean editor;
        public boolean explicit_content;
        public int flags;
        public GeoPoint geo;
        public int id;
        public boolean kicked;
        public boolean left;
        public boolean megagroup;
        public InputChannel migrated_to;
        public boolean min;
        public boolean moderator;
        public int participants_count;
        public ChatPhoto photo;
        public boolean restricted;
        public String restriction_reason;
        public boolean signatures;
        public String title;
        public String username;
        public String venue;
        public boolean verified;
        public int version;

        public static Chat TLdeserialize(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            Chat chat = null;
            switch (i) {
                case -2059962289:
                    chat = new TL_channelForbidden();
                    break;
                case -1683826688:
                    chat = new TL_chatEmpty();
                    break;
                case -1588737454:
                    chat = new TL_channel();
                    break;
                case -652419756:
                    chat = new TL_chat();
                    break;
                case -83047359:
                    chat = new TL_chatForbidden_old();
                    break;
                case 120753115:
                    chat = new TL_chatForbidden();
                    break;
                case 763724588:
                    chat = new TL_channelForbidden_layer52();
                    break;
                case 1260090630:
                    chat = new TL_channel_layer48();
                    break;
                case 1737397639:
                    chat = new TL_channel_old();
                    break;
                case 1855757255:
                    chat = new TL_chat_old();
                    break;
                case 1930607688:
                    chat = new TL_chat_old2();
                    break;
                case 1978329690:
                    chat = new TL_geoChat();
                    break;
            }
            if (chat == null && z) {
                Object[] objArr = new Object[TLRPC.USER_FLAG_ACCESS_HASH];
                objArr[0] = Integer.valueOf(i);
                throw new RuntimeException(String.format("can't parse magic %x in Chat", objArr));
            }
            if (chat != null) {
                chat.readParams(abstractSerializedData, z);
            }
            return chat;
        }
    }

    public static class ChatFull extends TLObject {
        public String about;
        public int admins_count;
        public ArrayList<BotInfo> bot_info;
        public boolean can_set_username;
        public boolean can_view_participants;
        public Photo chat_photo;
        public ExportedChatInvite exported_invite;
        public int flags;
        public int id;
        public int kicked_count;
        public int migrated_from_chat_id;
        public int migrated_from_max_id;
        public PeerNotifySettings notify_settings;
        public ChatParticipants participants;
        public int participants_count;
        public int pinned_msg_id;
        public int read_inbox_max_id;
        public int read_outbox_max_id;
        public int unread_count;

        public ChatFull() {
            this.bot_info = new ArrayList();
        }

        public static ChatFull TLdeserialize(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            ChatFull chatFull = null;
            switch (i) {
                case -1749097118:
                    chatFull = new TL_channelFull_layer52();
                    break;
                case -1640751649:
                    chatFull = new TL_channelFull_layer48();
                    break;
                case -1009430225:
                    chatFull = new TL_channelFull();
                    break;
                case -88925533:
                    chatFull = new TL_channelFull_old();
                    break;
                case 771925524:
                    chatFull = new TL_chatFull();
                    break;
            }
            if (chatFull == null && z) {
                Object[] objArr = new Object[TLRPC.USER_FLAG_ACCESS_HASH];
                objArr[0] = Integer.valueOf(i);
                throw new RuntimeException(String.format("can't parse magic %x in ChatFull", objArr));
            }
            if (chatFull != null) {
                chatFull.readParams(abstractSerializedData, z);
            }
            return chatFull;
        }
    }

    public static class ChatInvite extends TLObject {
        public boolean broadcast;
        public boolean channel;
        public Chat chat;
        public int flags;
        public boolean isPublic;
        public boolean megagroup;
        public ArrayList<User> participants;
        public int participants_count;
        public ChatPhoto photo;
        public String title;

        public ChatInvite() {
            this.participants = new ArrayList();
        }

        public static ChatInvite TLdeserialize(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            ChatInvite chatInvite = null;
            switch (i) {
                case -613092008:
                    chatInvite = new TL_chatInvite();
                    break;
                case 1516793212:
                    chatInvite = new TL_chatInviteAlready();
                    break;
            }
            if (chatInvite == null && z) {
                Object[] objArr = new Object[TLRPC.USER_FLAG_ACCESS_HASH];
                objArr[0] = Integer.valueOf(i);
                throw new RuntimeException(String.format("can't parse magic %x in ChatInvite", objArr));
            }
            if (chatInvite != null) {
                chatInvite.readParams(abstractSerializedData, z);
            }
            return chatInvite;
        }
    }

    public static class ChatParticipant extends TLObject {
        public int date;
        public int inviter_id;
        public int user_id;

        public static ChatParticipant TLdeserialize(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            ChatParticipant chatParticipant = null;
            switch (i) {
                case -925415106:
                    chatParticipant = new TL_chatParticipant();
                    break;
                case -636267638:
                    chatParticipant = new TL_chatParticipantCreator();
                    break;
                case -489233354:
                    chatParticipant = new TL_chatParticipantAdmin();
                    break;
            }
            if (chatParticipant == null && z) {
                Object[] objArr = new Object[TLRPC.USER_FLAG_ACCESS_HASH];
                objArr[0] = Integer.valueOf(i);
                throw new RuntimeException(String.format("can't parse magic %x in ChatParticipant", objArr));
            }
            if (chatParticipant != null) {
                chatParticipant.readParams(abstractSerializedData, z);
            }
            return chatParticipant;
        }
    }

    public static class ChatParticipants extends TLObject {
        public int admin_id;
        public int chat_id;
        public int flags;
        public ArrayList<ChatParticipant> participants;
        public ChatParticipant self_participant;
        public int version;

        public ChatParticipants() {
            this.participants = new ArrayList();
        }

        public static ChatParticipants TLdeserialize(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            ChatParticipants chatParticipants = null;
            switch (i) {
                case -57668565:
                    chatParticipants = new TL_chatParticipantsForbidden();
                    break;
                case 265468810:
                    chatParticipants = new TL_chatParticipantsForbidden_old();
                    break;
                case 1061556205:
                    chatParticipants = new TL_chatParticipants();
                    break;
                case 2017571861:
                    chatParticipants = new TL_chatParticipants_old();
                    break;
            }
            if (chatParticipants == null && z) {
                Object[] objArr = new Object[TLRPC.USER_FLAG_ACCESS_HASH];
                objArr[0] = Integer.valueOf(i);
                throw new RuntimeException(String.format("can't parse magic %x in ChatParticipants", objArr));
            }
            if (chatParticipants != null) {
                chatParticipants.readParams(abstractSerializedData, z);
            }
            return chatParticipants;
        }
    }

    public static class ChatPhoto extends TLObject {
        public FileLocation photo_big;
        public FileLocation photo_small;

        public static ChatPhoto TLdeserialize(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            ChatPhoto chatPhoto = null;
            switch (i) {
                case 935395612:
                    chatPhoto = new TL_chatPhotoEmpty();
                    break;
                case 1632839530:
                    chatPhoto = new TL_chatPhoto();
                    break;
            }
            if (chatPhoto == null && z) {
                Object[] objArr = new Object[TLRPC.USER_FLAG_ACCESS_HASH];
                objArr[0] = Integer.valueOf(i);
                throw new RuntimeException(String.format("can't parse magic %x in ChatPhoto", objArr));
            }
            if (chatPhoto != null) {
                chatPhoto.readParams(abstractSerializedData, z);
            }
            return chatPhoto;
        }
    }

    public static class ContactLink extends TLObject {
        public static ContactLink TLdeserialize(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            ContactLink contactLink = null;
            switch (i) {
                case -721239344:
                    contactLink = new TL_contactLinkContact();
                    break;
                case -17968211:
                    contactLink = new TL_contactLinkNone();
                    break;
                case 646922073:
                    contactLink = new TL_contactLinkHasPhone();
                    break;
                case 1599050311:
                    contactLink = new TL_contactLinkUnknown();
                    break;
            }
            if (contactLink == null && z) {
                Object[] objArr = new Object[TLRPC.USER_FLAG_ACCESS_HASH];
                objArr[0] = Integer.valueOf(i);
                throw new RuntimeException(String.format("can't parse magic %x in ContactLink", objArr));
            }
            if (contactLink != null) {
                contactLink.readParams(abstractSerializedData, z);
            }
            return contactLink;
        }
    }

    public static class DecryptedMessage extends TLObject {
        public DecryptedMessageAction action;
        public ArrayList<MessageEntity> entities;
        public int flags;
        public DecryptedMessageMedia media;
        public String message;
        public byte[] random_bytes;
        public long random_id;
        public long reply_to_random_id;
        public int ttl;
        public String via_bot_name;

        public DecryptedMessage() {
            this.entities = new ArrayList();
        }

        public static DecryptedMessage TLdeserialize(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            DecryptedMessage decryptedMessage = null;
            switch (i) {
                case -1438109059:
                    decryptedMessage = new TL_decryptedMessageService_layer8();
                    break;
                case 528568095:
                    decryptedMessage = new TL_decryptedMessage_layer8();
                    break;
                case 541931640:
                    decryptedMessage = new TL_decryptedMessage_layer17();
                    break;
                case 917541342:
                    decryptedMessage = new TL_decryptedMessage();
                    break;
                case 1930838368:
                    decryptedMessage = new TL_decryptedMessageService();
                    break;
            }
            if (decryptedMessage == null && z) {
                Object[] objArr = new Object[TLRPC.USER_FLAG_ACCESS_HASH];
                objArr[0] = Integer.valueOf(i);
                throw new RuntimeException(String.format("can't parse magic %x in DecryptedMessage", objArr));
            }
            if (decryptedMessage != null) {
                decryptedMessage.readParams(abstractSerializedData, z);
            }
            return decryptedMessage;
        }
    }

    public static class DecryptedMessageAction extends TLObject {
        public SendMessageAction action;
        public int end_seq_no;
        public long exchange_id;
        public byte[] g_a;
        public byte[] g_b;
        public long key_fingerprint;
        public int layer;
        public ArrayList<Long> random_ids;
        public int start_seq_no;
        public int ttl_seconds;

        public DecryptedMessageAction() {
            this.random_ids = new ArrayList();
        }

        public static DecryptedMessageAction TLdeserialize(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            DecryptedMessageAction decryptedMessageAction = null;
            switch (i) {
                case -1967000459:
                    decryptedMessageAction = new TL_decryptedMessageActionScreenshotMessages();
                    break;
                case -1586283796:
                    decryptedMessageAction = new TL_decryptedMessageActionSetMessageTTL();
                    break;
                case -1473258141:
                    decryptedMessageAction = new TL_decryptedMessageActionNoop();
                    break;
                case -860719551:
                    decryptedMessageAction = new TL_decryptedMessageActionTyping();
                    break;
                case -586814357:
                    decryptedMessageAction = new TL_decryptedMessageActionAbortKey();
                    break;
                case -332526693:
                    decryptedMessageAction = new TL_decryptedMessageActionCommitKey();
                    break;
                case -217806717:
                    decryptedMessageAction = new TL_decryptedMessageActionNotifyLayer();
                    break;
                case -204906213:
                    decryptedMessageAction = new TL_decryptedMessageActionRequestKey();
                    break;
                case 206520510:
                    decryptedMessageAction = new TL_decryptedMessageActionReadMessages();
                    break;
                case 1360072880:
                    decryptedMessageAction = new TL_decryptedMessageActionResend();
                    break;
                case 1700872964:
                    decryptedMessageAction = new TL_decryptedMessageActionDeleteMessages();
                    break;
                case 1729750108:
                    decryptedMessageAction = new TL_decryptedMessageActionFlushHistory();
                    break;
                case 1877046107:
                    decryptedMessageAction = new TL_decryptedMessageActionAcceptKey();
                    break;
            }
            if (decryptedMessageAction == null && z) {
                Object[] objArr = new Object[TLRPC.USER_FLAG_ACCESS_HASH];
                objArr[0] = Integer.valueOf(i);
                throw new RuntimeException(String.format("can't parse magic %x in DecryptedMessageAction", objArr));
            }
            if (decryptedMessageAction != null) {
                decryptedMessageAction.readParams(abstractSerializedData, z);
            }
            return decryptedMessageAction;
        }
    }

    public static class DecryptedMessageMedia extends TLObject {
        public double _long;
        public long access_hash;
        public String address;
        public ArrayList<DocumentAttribute> attributes;
        public String caption;
        public int date;
        public int dc_id;
        public int duration;
        public String file_name;
        public String first_name;
        public int f2656h;
        public long id;
        public byte[] iv;
        public byte[] key;
        public String last_name;
        public double lat;
        public String mime_type;
        public String phone_number;
        public String provider;
        public int size;
        public int thumb_h;
        public int thumb_w;
        public String title;
        public String url;
        public int user_id;
        public String venue_id;
        public int f2657w;

        public DecryptedMessageMedia() {
            this.attributes = new ArrayList();
        }

        public static DecryptedMessageMedia TLdeserialize(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            DecryptedMessageMedia decryptedMessageMedia = null;
            switch (i) {
                case -1978796689:
                    decryptedMessageMedia = new TL_decryptedMessageMediaVenue();
                    break;
                case -1760785394:
                    decryptedMessageMedia = new TL_decryptedMessageMediaVideo();
                    break;
                case -1332395189:
                    decryptedMessageMedia = new TL_decryptedMessageMediaDocument_layer8();
                    break;
                case -452652584:
                    decryptedMessageMedia = new TL_decryptedMessageMediaWebPage();
                    break;
                case -235238024:
                    decryptedMessageMedia = new TL_decryptedMessageMediaPhoto();
                    break;
                case -90853155:
                    decryptedMessageMedia = new TL_decryptedMessageMediaExternalDocument();
                    break;
                case 144661578:
                    decryptedMessageMedia = new TL_decryptedMessageMediaEmpty();
                    break;
                case 846826124:
                    decryptedMessageMedia = new TL_decryptedMessageMediaPhoto_layer8();
                    break;
                case 893913689:
                    decryptedMessageMedia = new TL_decryptedMessageMediaGeoPoint();
                    break;
                case 1290694387:
                    decryptedMessageMedia = new TL_decryptedMessageMediaVideo_layer8();
                    break;
                case 1380598109:
                    decryptedMessageMedia = new TL_decryptedMessageMediaVideo_layer17();
                    break;
                case 1474341323:
                    decryptedMessageMedia = new TL_decryptedMessageMediaAudio();
                    break;
                case 1485441687:
                    decryptedMessageMedia = new TL_decryptedMessageMediaContact();
                    break;
                case 1619031439:
                    decryptedMessageMedia = new TL_decryptedMessageMediaAudio_layer8();
                    break;
                case 2063502050:
                    decryptedMessageMedia = new TL_decryptedMessageMediaDocument();
                    break;
            }
            if (decryptedMessageMedia == null && z) {
                Object[] objArr = new Object[TLRPC.USER_FLAG_ACCESS_HASH];
                objArr[0] = Integer.valueOf(i);
                throw new RuntimeException(String.format("can't parse magic %x in DecryptedMessageMedia", objArr));
            }
            if (decryptedMessageMedia != null) {
                decryptedMessageMedia.readParams(abstractSerializedData, z);
            }
            return decryptedMessageMedia;
        }
    }

    public static class Document extends TLObject {
        public long access_hash;
        public ArrayList<DocumentAttribute> attributes;
        public String caption;
        public int date;
        public int dc_id;
        public String file_name;
        public long id;
        public byte[] iv;
        public byte[] key;
        public String mime_type;
        public int size;
        public PhotoSize thumb;
        public int user_id;
        public int version;

        public Document() {
            this.attributes = new ArrayList();
        }

        public static Document TLdeserialize(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            Document document = null;
            switch (i) {
                case -2027738169:
                    document = new TL_document();
                    break;
                case -1627626714:
                    document = new TL_document_old();
                    break;
                case -106717361:
                    document = new TL_document_layer53();
                    break;
                case 922273905:
                    document = new TL_documentEmpty();
                    break;
                case 1431655766:
                    document = new TL_documentEncrypted_old();
                    break;
                case 1431655768:
                    document = new TL_documentEncrypted();
                    break;
            }
            if (document == null && z) {
                Object[] objArr = new Object[TLRPC.USER_FLAG_ACCESS_HASH];
                objArr[0] = Integer.valueOf(i);
                throw new RuntimeException(String.format("can't parse magic %x in Document", objArr));
            }
            if (document != null) {
                document.readParams(abstractSerializedData, z);
            }
            return document;
        }
    }

    public static class DocumentAttribute extends TLObject {
        public String alt;
        public int duration;
        public String file_name;
        public int flags;
        public int f2658h;
        public boolean mask;
        public TL_maskCoords mask_coords;
        public String performer;
        public InputStickerSet stickerset;
        public String title;
        public boolean voice;
        public int f2659w;
        public byte[] waveform;

        public static DocumentAttribute TLdeserialize(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            DocumentAttribute documentAttribute = null;
            switch (i) {
                case -1744710921:
                    documentAttribute = new TL_documentAttributeHasStickers();
                    break;
                case -1739392570:
                    documentAttribute = new TL_documentAttributeAudio();
                    break;
                case -1723033470:
                    documentAttribute = new TL_documentAttributeSticker_old2();
                    break;
                case -556656416:
                    documentAttribute = new TL_documentAttributeAudio_layer45();
                    break;
                case -83208409:
                    documentAttribute = new TL_documentAttributeSticker_old();
                    break;
                case 85215461:
                    documentAttribute = new TL_documentAttributeAudio_old();
                    break;
                case 297109817:
                    documentAttribute = new TL_documentAttributeAnimated();
                    break;
                case 358154344:
                    documentAttribute = new TL_documentAttributeFilename();
                    break;
                case 978674434:
                    documentAttribute = new TL_documentAttributeSticker_layer55();
                    break;
                case 1494273227:
                    documentAttribute = new TL_documentAttributeVideo();
                    break;
                case 1662637586:
                    documentAttribute = new TL_documentAttributeSticker();
                    break;
                case 1815593308:
                    documentAttribute = new TL_documentAttributeImageSize();
                    break;
            }
            if (documentAttribute == null && z) {
                Object[] objArr = new Object[TLRPC.USER_FLAG_ACCESS_HASH];
                objArr[0] = Integer.valueOf(i);
                throw new RuntimeException(String.format("can't parse magic %x in DocumentAttribute", objArr));
            }
            if (documentAttribute != null) {
                documentAttribute.readParams(abstractSerializedData, z);
            }
            return documentAttribute;
        }
    }

    public static class DraftMessage extends TLObject {
        public int date;
        public ArrayList<MessageEntity> entities;
        public int flags;
        public String message;
        public boolean no_webpage;
        public int reply_to_msg_id;

        public DraftMessage() {
            this.entities = new ArrayList();
        }

        public static DraftMessage TLdeserialize(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            DraftMessage draftMessage = null;
            switch (i) {
                case -1169445179:
                    draftMessage = new TL_draftMessageEmpty();
                    break;
                case -40996577:
                    draftMessage = new TL_draftMessage();
                    break;
            }
            if (draftMessage == null && z) {
                Object[] objArr = new Object[TLRPC.USER_FLAG_ACCESS_HASH];
                objArr[0] = Integer.valueOf(i);
                throw new RuntimeException(String.format("can't parse magic %x in DraftMessage", objArr));
            }
            if (draftMessage != null) {
                draftMessage.readParams(abstractSerializedData, z);
            }
            return draftMessage;
        }
    }

    public static class EncryptedChat extends TLObject {
        public byte[] a_or_b;
        public long access_hash;
        public int admin_id;
        public byte[] auth_key;
        public int date;
        public long exchange_id;
        public byte[] future_auth_key;
        public long future_key_fingerprint;
        public byte[] g_a;
        public byte[] g_a_or_b;
        public int id;
        public int in_seq_no;
        public int key_create_date;
        public long key_fingerprint;
        public byte[] key_hash;
        public short key_use_count_in;
        public short key_use_count_out;
        public int layer;
        public byte[] nonce;
        public int participant_id;
        public int seq_in;
        public int seq_out;
        public int ttl;
        public int user_id;

        public static EncryptedChat TLdeserialize(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            EncryptedChat encryptedChat = null;
            switch (i) {
                case -1417756512:
                    encryptedChat = new TL_encryptedChatEmpty();
                    break;
                case -931638658:
                    encryptedChat = new TL_encryptedChatRequested();
                    break;
                case -94974410:
                    encryptedChat = new TL_encryptedChat();
                    break;
                case -39213129:
                    encryptedChat = new TL_encryptedChatRequested_old();
                    break;
                case 332848423:
                    encryptedChat = new TL_encryptedChatDiscarded();
                    break;
                case 1006044124:
                    encryptedChat = new TL_encryptedChatWaiting();
                    break;
                case 1711395151:
                    encryptedChat = new TL_encryptedChat_old();
                    break;
            }
            if (encryptedChat == null && z) {
                Object[] objArr = new Object[TLRPC.USER_FLAG_ACCESS_HASH];
                objArr[0] = Integer.valueOf(i);
                throw new RuntimeException(String.format("can't parse magic %x in EncryptedChat", objArr));
            }
            if (encryptedChat != null) {
                encryptedChat.readParams(abstractSerializedData, z);
            }
            return encryptedChat;
        }
    }

    public static class EncryptedFile extends TLObject {
        public long access_hash;
        public int dc_id;
        public long id;
        public int key_fingerprint;
        public int size;

        public static EncryptedFile TLdeserialize(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            EncryptedFile encryptedFile = null;
            switch (i) {
                case -1038136962:
                    encryptedFile = new TL_encryptedFileEmpty();
                    break;
                case 1248893260:
                    encryptedFile = new TL_encryptedFile();
                    break;
            }
            if (encryptedFile == null && z) {
                Object[] objArr = new Object[TLRPC.USER_FLAG_ACCESS_HASH];
                objArr[0] = Integer.valueOf(i);
                throw new RuntimeException(String.format("can't parse magic %x in EncryptedFile", objArr));
            }
            if (encryptedFile != null) {
                encryptedFile.readParams(abstractSerializedData, z);
            }
            return encryptedFile;
        }
    }

    public static class EncryptedMessage extends TLObject {
        public byte[] bytes;
        public int chat_id;
        public int date;
        public EncryptedFile file;
        public long random_id;

        public static EncryptedMessage TLdeserialize(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            EncryptedMessage encryptedMessage = null;
            switch (i) {
                case -317144808:
                    encryptedMessage = new TL_encryptedMessage();
                    break;
                case 594758406:
                    encryptedMessage = new TL_encryptedMessageService();
                    break;
            }
            if (encryptedMessage == null && z) {
                Object[] objArr = new Object[TLRPC.USER_FLAG_ACCESS_HASH];
                objArr[0] = Integer.valueOf(i);
                throw new RuntimeException(String.format("can't parse magic %x in EncryptedMessage", objArr));
            }
            if (encryptedMessage != null) {
                encryptedMessage.readParams(abstractSerializedData, z);
            }
            return encryptedMessage;
        }
    }

    public static class ExportedChatInvite extends TLObject {
        public String link;

        public static ExportedChatInvite TLdeserialize(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            ExportedChatInvite exportedChatInvite = null;
            switch (i) {
                case -64092740:
                    exportedChatInvite = new TL_chatInviteExported();
                    break;
                case 1776236393:
                    exportedChatInvite = new TL_chatInviteEmpty();
                    break;
            }
            if (exportedChatInvite == null && z) {
                Object[] objArr = new Object[TLRPC.USER_FLAG_ACCESS_HASH];
                objArr[0] = Integer.valueOf(i);
                throw new RuntimeException(String.format("can't parse magic %x in ExportedChatInvite", objArr));
            }
            if (exportedChatInvite != null) {
                exportedChatInvite.readParams(abstractSerializedData, z);
            }
            return exportedChatInvite;
        }
    }

    public static class FileLocation extends TLObject {
        public int dc_id;
        public byte[] iv;
        public byte[] key;
        public int local_id;
        public long secret;
        public long volume_id;

        public static FileLocation TLdeserialize(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            FileLocation fileLocation = null;
            switch (i) {
                case 1406570614:
                    fileLocation = new TL_fileLocation();
                    break;
                case 1431655764:
                    fileLocation = new TL_fileEncryptedLocation();
                    break;
                case 2086234950:
                    fileLocation = new TL_fileLocationUnavailable();
                    break;
            }
            if (fileLocation == null && z) {
                Object[] objArr = new Object[TLRPC.USER_FLAG_ACCESS_HASH];
                objArr[0] = Integer.valueOf(i);
                throw new RuntimeException(String.format("can't parse magic %x in FileLocation", objArr));
            }
            if (fileLocation != null) {
                fileLocation.readParams(abstractSerializedData, z);
            }
            return fileLocation;
        }
    }

    public static class FoundGif extends TLObject {
        public String content_type;
        public String content_url;
        public Document document;
        public int f2660h;
        public Photo photo;
        public String thumb_url;
        public String url;
        public int f2661w;

        public static FoundGif TLdeserialize(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            FoundGif foundGif = null;
            switch (i) {
                case -1670052855:
                    foundGif = new TL_foundGifCached();
                    break;
                case 372165663:
                    foundGif = new TL_foundGif();
                    break;
            }
            if (foundGif == null && z) {
                Object[] objArr = new Object[TLRPC.USER_FLAG_ACCESS_HASH];
                objArr[0] = Integer.valueOf(i);
                throw new RuntimeException(String.format("can't parse magic %x in FoundGif", objArr));
            }
            if (foundGif != null) {
                foundGif.readParams(abstractSerializedData, z);
            }
            return foundGif;
        }
    }

    public static class GeoChatMessage extends TLObject {
        public MessageAction action;
        public int chat_id;
        public int date;
        public int from_id;
        public int id;
        public MessageMedia media;
        public String message;

        public static GeoChatMessage TLdeserialize(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            GeoChatMessage geoChatMessage = null;
            switch (i) {
                case -749755826:
                    geoChatMessage = new TL_geoChatMessageService();
                    break;
                case 1158019297:
                    geoChatMessage = new TL_geoChatMessage();
                    break;
                case 1613830811:
                    geoChatMessage = new TL_geoChatMessageEmpty();
                    break;
            }
            if (geoChatMessage == null && z) {
                Object[] objArr = new Object[TLRPC.USER_FLAG_ACCESS_HASH];
                objArr[0] = Integer.valueOf(i);
                throw new RuntimeException(String.format("can't parse magic %x in GeoChatMessage", objArr));
            }
            if (geoChatMessage != null) {
                geoChatMessage.readParams(abstractSerializedData, z);
            }
            return geoChatMessage;
        }
    }

    public static class GeoPoint extends TLObject {
        public double _long;
        public double lat;

        public static GeoPoint TLdeserialize(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            GeoPoint geoPoint = null;
            switch (i) {
                case 286776671:
                    geoPoint = new TL_geoPointEmpty();
                    break;
                case 541710092:
                    geoPoint = new TL_geoPoint();
                    break;
            }
            if (geoPoint == null && z) {
                Object[] objArr = new Object[TLRPC.USER_FLAG_ACCESS_HASH];
                objArr[0] = Integer.valueOf(i);
                throw new RuntimeException(String.format("can't parse magic %x in GeoPoint", objArr));
            }
            if (geoPoint != null) {
                geoPoint.readParams(abstractSerializedData, z);
            }
            return geoPoint;
        }
    }

    public static class InputChannel extends TLObject {
        public long access_hash;
        public int channel_id;

        public static InputChannel TLdeserialize(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            InputChannel inputChannel = null;
            switch (i) {
                case -1343524562:
                    inputChannel = new TL_inputChannel();
                    break;
                case -292807034:
                    inputChannel = new TL_inputChannelEmpty();
                    break;
            }
            if (inputChannel == null && z) {
                Object[] objArr = new Object[TLRPC.USER_FLAG_ACCESS_HASH];
                objArr[0] = Integer.valueOf(i);
                throw new RuntimeException(String.format("can't parse magic %x in InputChannel", objArr));
            }
            if (inputChannel != null) {
                inputChannel.readParams(abstractSerializedData, z);
            }
            return inputChannel;
        }
    }

    public static class InputChatPhoto extends TLObject {
        public InputFile file;
        public InputPhoto id;

        public static InputChatPhoto TLdeserialize(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            InputChatPhoto inputChatPhoto = null;
            switch (i) {
                case -1991004873:
                    inputChatPhoto = new TL_inputChatPhoto();
                    break;
                case -1837345356:
                    inputChatPhoto = new TL_inputChatUploadedPhoto();
                    break;
                case 480546647:
                    inputChatPhoto = new TL_inputChatPhotoEmpty();
                    break;
            }
            if (inputChatPhoto == null && z) {
                Object[] objArr = new Object[TLRPC.USER_FLAG_ACCESS_HASH];
                objArr[0] = Integer.valueOf(i);
                throw new RuntimeException(String.format("can't parse magic %x in InputChatPhoto", objArr));
            }
            if (inputChatPhoto != null) {
                inputChatPhoto.readParams(abstractSerializedData, z);
            }
            return inputChatPhoto;
        }
    }

    public static class InputDocument extends TLObject {
        public long access_hash;
        public long id;

        public static InputDocument TLdeserialize(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            InputDocument inputDocument = null;
            switch (i) {
                case 410618194:
                    inputDocument = new TL_inputDocument();
                    break;
                case 1928391342:
                    inputDocument = new TL_inputDocumentEmpty();
                    break;
            }
            if (inputDocument == null && z) {
                Object[] objArr = new Object[TLRPC.USER_FLAG_ACCESS_HASH];
                objArr[0] = Integer.valueOf(i);
                throw new RuntimeException(String.format("can't parse magic %x in InputDocument", objArr));
            }
            if (inputDocument != null) {
                inputDocument.readParams(abstractSerializedData, z);
            }
            return inputDocument;
        }
    }

    public static class InputEncryptedFile extends TLObject {
        public long access_hash;
        public long id;
        public int key_fingerprint;
        public String md5_checksum;
        public int parts;

        public static InputEncryptedFile TLdeserialize(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            InputEncryptedFile inputEncryptedFile = null;
            switch (i) {
                case 406307684:
                    inputEncryptedFile = new TL_inputEncryptedFileEmpty();
                    break;
                case 767652808:
                    inputEncryptedFile = new TL_inputEncryptedFileBigUploaded();
                    break;
                case 1511503333:
                    inputEncryptedFile = new TL_inputEncryptedFile();
                    break;
                case 1690108678:
                    inputEncryptedFile = new TL_inputEncryptedFileUploaded();
                    break;
            }
            if (inputEncryptedFile == null && z) {
                Object[] objArr = new Object[TLRPC.USER_FLAG_ACCESS_HASH];
                objArr[0] = Integer.valueOf(i);
                throw new RuntimeException(String.format("can't parse magic %x in InputEncryptedFile", objArr));
            }
            if (inputEncryptedFile != null) {
                inputEncryptedFile.readParams(abstractSerializedData, z);
            }
            return inputEncryptedFile;
        }
    }

    public static class InputFile extends TLObject {
        public long id;
        public String md5_checksum;
        public String name;
        public int parts;

        public static InputFile TLdeserialize(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            InputFile inputFile = null;
            switch (i) {
                case -181407105:
                    inputFile = new TL_inputFile();
                    break;
                case -95482955:
                    inputFile = new TL_inputFileBig();
                    break;
            }
            if (inputFile == null && z) {
                Object[] objArr = new Object[TLRPC.USER_FLAG_ACCESS_HASH];
                objArr[0] = Integer.valueOf(i);
                throw new RuntimeException(String.format("can't parse magic %x in InputFile", objArr));
            }
            if (inputFile != null) {
                inputFile.readParams(abstractSerializedData, z);
            }
            return inputFile;
        }
    }

    public static class InputFileLocation extends TLObject {
        public long access_hash;
        public long id;
        public int local_id;
        public long secret;
        public long volume_id;

        public static InputFileLocation TLdeserialize(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            InputFileLocation inputFileLocation = null;
            switch (i) {
                case -182231723:
                    inputFileLocation = new TL_inputEncryptedFileLocation();
                    break;
                case 342061462:
                    inputFileLocation = new TL_inputFileLocation();
                    break;
                case 1313188841:
                    inputFileLocation = new TL_inputDocumentFileLocation();
                    break;
            }
            if (inputFileLocation == null && z) {
                Object[] objArr = new Object[TLRPC.USER_FLAG_ACCESS_HASH];
                objArr[0] = Integer.valueOf(i);
                throw new RuntimeException(String.format("can't parse magic %x in InputFileLocation", objArr));
            }
            if (inputFileLocation != null) {
                inputFileLocation.readParams(abstractSerializedData, z);
            }
            return inputFileLocation;
        }
    }

    public static class InputGame extends TLObject {
        public long access_hash;
        public InputUser bot_id;
        public long id;
        public String short_name;

        public static InputGame TLdeserialize(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            InputGame inputGame = null;
            switch (i) {
                case -1020139510:
                    inputGame = new TL_inputGameShortName();
                    break;
                case 53231223:
                    inputGame = new TL_inputGameID();
                    break;
            }
            if (inputGame == null && z) {
                Object[] objArr = new Object[TLRPC.USER_FLAG_ACCESS_HASH];
                objArr[0] = Integer.valueOf(i);
                throw new RuntimeException(String.format("can't parse magic %x in InputGame", objArr));
            }
            if (inputGame != null) {
                inputGame.readParams(abstractSerializedData, z);
            }
            return inputGame;
        }
    }

    public static class InputGeoPoint extends TLObject {
        public double _long;
        public double lat;

        public static InputGeoPoint TLdeserialize(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            InputGeoPoint inputGeoPoint = null;
            switch (i) {
                case -457104426:
                    inputGeoPoint = new TL_inputGeoPointEmpty();
                    break;
                case -206066487:
                    inputGeoPoint = new TL_inputGeoPoint();
                    break;
            }
            if (inputGeoPoint == null && z) {
                Object[] objArr = new Object[TLRPC.USER_FLAG_ACCESS_HASH];
                objArr[0] = Integer.valueOf(i);
                throw new RuntimeException(String.format("can't parse magic %x in InputGeoPoint", objArr));
            }
            if (inputGeoPoint != null) {
                inputGeoPoint.readParams(abstractSerializedData, z);
            }
            return inputGeoPoint;
        }
    }

    public static class InputMedia extends TLObject {
        public String address;
        public ArrayList<DocumentAttribute> attributes;
        public String caption;
        public InputFile file;
        public String first_name;
        public int flags;
        public InputGeoPoint geo_point;
        public String last_name;
        public String mime_type;
        public String phone_number;
        public String provider;
        public String f2662q;
        public ArrayList<InputDocument> stickers;
        public InputFile thumb;
        public String title;
        public String venue_id;

        public InputMedia() {
            this.attributes = new ArrayList();
            this.stickers = new ArrayList();
        }

        public static InputMedia TLdeserialize(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            InputMedia inputMedia = null;
            switch (i) {
                case -1771768449:
                    inputMedia = new TL_inputMediaEmpty();
                    break;
                case -1494984313:
                    inputMedia = new TL_inputMediaContact();
                    break;
                case -797904407:
                    inputMedia = new TL_inputMediaUploadedDocument();
                    break;
                case -750828557:
                    inputMedia = new TL_inputMediaGame();
                    break;
                case -373312269:
                    inputMedia = new TL_inputMediaPhoto();
                    break;
                case -104578748:
                    inputMedia = new TL_inputMediaGeoPoint();
                    break;
                case 444068508:
                    inputMedia = new TL_inputMediaDocument();
                    break;
                case 673687578:
                    inputMedia = new TL_inputMediaVenue();
                    break;
                case 998007486:
                    inputMedia = new TL_inputMediaPhotoExternal();
                    break;
                case 1212395773:
                    inputMedia = new TL_inputMediaGifExternal();
                    break;
                case 1356369070:
                    inputMedia = new TL_inputMediaUploadedThumbDocument();
                    break;
                case 1661770481:
                    inputMedia = new TL_inputMediaUploadedPhoto();
                    break;
                case 1954019628:
                    inputMedia = new TL_inputMediaDocumentExternal();
                    break;
            }
            if (inputMedia == null && z) {
                Object[] objArr = new Object[TLRPC.USER_FLAG_ACCESS_HASH];
                objArr[0] = Integer.valueOf(i);
                throw new RuntimeException(String.format("can't parse magic %x in InputMedia", objArr));
            }
            if (inputMedia != null) {
                inputMedia.readParams(abstractSerializedData, z);
            }
            return inputMedia;
        }
    }

    public static class InputNotifyPeer extends TLObject {
        public static InputNotifyPeer TLdeserialize(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            InputNotifyPeer inputNotifyPeer = null;
            switch (i) {
                case -1540769658:
                    inputNotifyPeer = new TL_inputNotifyAll();
                    break;
                case -1195615476:
                    inputNotifyPeer = new TL_inputNotifyPeer();
                    break;
                case 423314455:
                    inputNotifyPeer = new TL_inputNotifyUsers();
                    break;
                case 1251338318:
                    inputNotifyPeer = new TL_inputNotifyChats();
                    break;
                case 1301143240:
                    inputNotifyPeer = new TL_inputNotifyGeoChatPeer();
                    break;
            }
            if (inputNotifyPeer == null && z) {
                Object[] objArr = new Object[TLRPC.USER_FLAG_ACCESS_HASH];
                objArr[0] = Integer.valueOf(i);
                throw new RuntimeException(String.format("can't parse magic %x in InputNotifyPeer", objArr));
            }
            if (inputNotifyPeer != null) {
                inputNotifyPeer.readParams(abstractSerializedData, z);
            }
            return inputNotifyPeer;
        }
    }

    public static class InputPeer extends TLObject {
        public long access_hash;
        public int channel_id;
        public int chat_id;
        public int user_id;

        public static InputPeer TLdeserialize(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            InputPeer inputPeer = null;
            switch (i) {
                case 396093539:
                    inputPeer = new TL_inputPeerChat();
                    break;
                case 548253432:
                    inputPeer = new TL_inputPeerChannel();
                    break;
                case 2072935910:
                    inputPeer = new TL_inputPeerUser();
                    break;
                case 2107670217:
                    inputPeer = new TL_inputPeerSelf();
                    break;
                case 2134579434:
                    inputPeer = new TL_inputPeerEmpty();
                    break;
            }
            if (inputPeer == null && z) {
                Object[] objArr = new Object[TLRPC.USER_FLAG_ACCESS_HASH];
                objArr[0] = Integer.valueOf(i);
                throw new RuntimeException(String.format("can't parse magic %x in InputPeer", objArr));
            }
            if (inputPeer != null) {
                inputPeer.readParams(abstractSerializedData, z);
            }
            return inputPeer;
        }
    }

    public static class InputPeerNotifyEvents extends TLObject {
        public static InputPeerNotifyEvents TLdeserialize(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            InputPeerNotifyEvents inputPeerNotifyEvents = null;
            switch (i) {
                case -395694988:
                    inputPeerNotifyEvents = new TL_inputPeerNotifyEventsAll();
                    break;
                case -265263912:
                    inputPeerNotifyEvents = new TL_inputPeerNotifyEventsEmpty();
                    break;
            }
            if (inputPeerNotifyEvents == null && z) {
                Object[] objArr = new Object[TLRPC.USER_FLAG_ACCESS_HASH];
                objArr[0] = Integer.valueOf(i);
                throw new RuntimeException(String.format("can't parse magic %x in InputPeerNotifyEvents", objArr));
            }
            if (inputPeerNotifyEvents != null) {
                inputPeerNotifyEvents.readParams(abstractSerializedData, z);
            }
            return inputPeerNotifyEvents;
        }
    }

    public static class InputPhoto extends TLObject {
        public long access_hash;
        public long id;

        public static InputPhoto TLdeserialize(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            InputPhoto inputPhoto = null;
            switch (i) {
                case -74070332:
                    inputPhoto = new TL_inputPhoto();
                    break;
                case 483901197:
                    inputPhoto = new TL_inputPhotoEmpty();
                    break;
            }
            if (inputPhoto == null && z) {
                Object[] objArr = new Object[TLRPC.USER_FLAG_ACCESS_HASH];
                objArr[0] = Integer.valueOf(i);
                throw new RuntimeException(String.format("can't parse magic %x in InputPhoto", objArr));
            }
            if (inputPhoto != null) {
                inputPhoto.readParams(abstractSerializedData, z);
            }
            return inputPhoto;
        }
    }

    public static class InputPrivacyKey extends TLObject {
        public static InputPrivacyKey TLdeserialize(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            InputPrivacyKey inputPrivacyKey = null;
            switch (i) {
                case -1107622874:
                    inputPrivacyKey = new TL_inputPrivacyKeyChatInvite();
                    break;
                case 1335282456:
                    inputPrivacyKey = new TL_inputPrivacyKeyStatusTimestamp();
                    break;
            }
            if (inputPrivacyKey == null && z) {
                Object[] objArr = new Object[TLRPC.USER_FLAG_ACCESS_HASH];
                objArr[0] = Integer.valueOf(i);
                throw new RuntimeException(String.format("can't parse magic %x in InputPrivacyKey", objArr));
            }
            if (inputPrivacyKey != null) {
                inputPrivacyKey.readParams(abstractSerializedData, z);
            }
            return inputPrivacyKey;
        }
    }

    public static class InputPrivacyRule extends TLObject {
        public ArrayList<InputUser> users;

        public InputPrivacyRule() {
            this.users = new ArrayList();
        }

        public static InputPrivacyRule TLdeserialize(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            InputPrivacyRule inputPrivacyRule = null;
            switch (i) {
                case -1877932953:
                    inputPrivacyRule = new TL_inputPrivacyValueDisallowUsers();
                    break;
                case -697604407:
                    inputPrivacyRule = new TL_inputPrivacyValueDisallowAll();
                    break;
                case 195371015:
                    inputPrivacyRule = new TL_inputPrivacyValueDisallowContacts();
                    break;
                case 218751099:
                    inputPrivacyRule = new TL_inputPrivacyValueAllowContacts();
                    break;
                case 320652927:
                    inputPrivacyRule = new TL_inputPrivacyValueAllowUsers();
                    break;
                case 407582158:
                    inputPrivacyRule = new TL_inputPrivacyValueAllowAll();
                    break;
            }
            if (inputPrivacyRule == null && z) {
                Object[] objArr = new Object[TLRPC.USER_FLAG_ACCESS_HASH];
                objArr[0] = Integer.valueOf(i);
                throw new RuntimeException(String.format("can't parse magic %x in InputPrivacyRule", objArr));
            }
            if (inputPrivacyRule != null) {
                inputPrivacyRule.readParams(abstractSerializedData, z);
            }
            return inputPrivacyRule;
        }
    }

    public static class InputStickerSet extends TLObject {
        public long access_hash;
        public long id;
        public String short_name;

        public static InputStickerSet TLdeserialize(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            InputStickerSet inputStickerSet = null;
            switch (i) {
                case -2044933984:
                    inputStickerSet = new TL_inputStickerSetShortName();
                    break;
                case -1645763991:
                    inputStickerSet = new TL_inputStickerSetID();
                    break;
                case -4838507:
                    inputStickerSet = new TL_inputStickerSetEmpty();
                    break;
            }
            if (inputStickerSet == null && z) {
                Object[] objArr = new Object[TLRPC.USER_FLAG_ACCESS_HASH];
                objArr[0] = Integer.valueOf(i);
                throw new RuntimeException(String.format("can't parse magic %x in InputStickerSet", objArr));
            }
            if (inputStickerSet != null) {
                inputStickerSet.readParams(abstractSerializedData, z);
            }
            return inputStickerSet;
        }
    }

    public static class InputStickeredMedia extends TLObject {
        public static InputStickeredMedia TLdeserialize(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            InputStickeredMedia inputStickeredMedia = null;
            switch (i) {
                case 70813275:
                    inputStickeredMedia = new TL_inputStickeredMediaDocument();
                    break;
                case 1251549527:
                    inputStickeredMedia = new TL_inputStickeredMediaPhoto();
                    break;
            }
            if (inputStickeredMedia == null && z) {
                Object[] objArr = new Object[TLRPC.USER_FLAG_ACCESS_HASH];
                objArr[0] = Integer.valueOf(i);
                throw new RuntimeException(String.format("can't parse magic %x in InputStickeredMedia", objArr));
            }
            if (inputStickeredMedia != null) {
                inputStickeredMedia.readParams(abstractSerializedData, z);
            }
            return inputStickeredMedia;
        }
    }

    public static class InputUser extends TLObject {
        public long access_hash;
        public int user_id;

        public static InputUser TLdeserialize(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            InputUser inputUser = null;
            switch (i) {
                case -1182234929:
                    inputUser = new TL_inputUserEmpty();
                    break;
                case -668391402:
                    inputUser = new TL_inputUser();
                    break;
                case -138301121:
                    inputUser = new TL_inputUserSelf();
                    break;
            }
            if (inputUser == null && z) {
                Object[] objArr = new Object[TLRPC.USER_FLAG_ACCESS_HASH];
                objArr[0] = Integer.valueOf(i);
                throw new RuntimeException(String.format("can't parse magic %x in InputUser", objArr));
            }
            if (inputUser != null) {
                inputUser.readParams(abstractSerializedData, z);
            }
            return inputUser;
        }
    }

    public static class KeyboardButton extends TLObject {
        public byte[] data;
        public int flags;
        public String query;
        public boolean same_peer;
        public String text;
        public String url;

        public static KeyboardButton TLdeserialize(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            KeyboardButton keyboardButton = null;
            switch (i) {
                case -1560655744:
                    keyboardButton = new TL_keyboardButton();
                    break;
                case -1318425559:
                    keyboardButton = new TL_keyboardButtonRequestPhone();
                    break;
                case -59151553:
                    keyboardButton = new TL_keyboardButtonRequestGeoLocation();
                    break;
                case 90744648:
                    keyboardButton = new TL_keyboardButtonSwitchInline();
                    break;
                case 629866245:
                    keyboardButton = new TL_keyboardButtonUrl();
                    break;
                case 1358175439:
                    keyboardButton = new TL_keyboardButtonGame();
                    break;
                case 1748655686:
                    keyboardButton = new TL_keyboardButtonCallback();
                    break;
            }
            if (keyboardButton == null && z) {
                Object[] objArr = new Object[TLRPC.USER_FLAG_ACCESS_HASH];
                objArr[0] = Integer.valueOf(i);
                throw new RuntimeException(String.format("can't parse magic %x in KeyboardButton", objArr));
            }
            if (keyboardButton != null) {
                keyboardButton.readParams(abstractSerializedData, z);
            }
            return keyboardButton;
        }
    }

    public static class Message extends TLObject {
        public MessageAction action;
        public String attachPath;
        public int date;
        public int destroyTime;
        public long dialog_id;
        public int edit_date;
        public ArrayList<MessageEntity> entities;
        public int flags;
        public int from_id;
        public TL_messageFwdHeader fwd_from;
        public int fwd_msg_id;
        public int id;
        public int layer;
        public int local_id;
        public MessageMedia media;
        public boolean media_unread;
        public boolean mentioned;
        public String message;
        public boolean out;
        public HashMap<String, String> params;
        public boolean post;
        public long random_id;
        public Message replyMessage;
        public ReplyMarkup reply_markup;
        public int reply_to_msg_id;
        public long reply_to_random_id;
        public int send_state;
        public int seq_in;
        public int seq_out;
        public boolean silent;
        public Peer to_id;
        public int ttl;
        public boolean unread;
        public int via_bot_id;
        public String via_bot_name;
        public int views;
        public boolean with_my_score;

        public Message() {
            this.entities = new ArrayList();
            this.send_state = 0;
            this.fwd_msg_id = 0;
            this.attachPath = TtmlNode.ANONYMOUS_REGION_ID;
            this.local_id = 0;
        }

        public static Message TLdeserialize(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            Message message = null;
            switch (i) {
                case -2082087340:
                    message = new TL_messageEmpty();
                    break;
                case -1642487306:
                    message = new TL_messageService();
                    break;
                case -1618124613:
                    message = new TL_messageService_old();
                    break;
                case -1553471722:
                    message = new TL_messageForwarded_old2();
                    break;
                case -1481959023:
                    message = new TL_message_old3();
                    break;
                case -1066691065:
                    message = new TL_messageService_layer48();
                    break;
                case -1063525281:
                    message = new TL_message();
                    break;
                case -1023016155:
                    message = new TL_message_old4();
                    break;
                case -913120932:
                    message = new TL_message_layer47();
                    break;
                case -260565816:
                    message = new TL_message_old5();
                    break;
                case 99903492:
                    message = new TL_messageForwarded_old();
                    break;
                case 495384334:
                    message = new TL_messageService_old2();
                    break;
                case 585853626:
                    message = new TL_message_old();
                    break;
                case 736885382:
                    message = new TL_message_old6();
                    break;
                case 1431655928:
                    message = new TL_message_secret_old();
                    break;
                case 1431655929:
                    message = new TL_message_secret();
                    break;
                case 1450613171:
                    message = new TL_message_old2();
                    break;
                case 1537633299:
                    message = new TL_message_old7();
                    break;
            }
            if (message == null && z) {
                Object[] objArr = new Object[TLRPC.USER_FLAG_ACCESS_HASH];
                objArr[0] = Integer.valueOf(i);
                throw new RuntimeException(String.format("can't parse magic %x in Message", objArr));
            }
            if (message != null) {
                message.readParams(abstractSerializedData, z);
            }
            return message;
        }
    }

    public static class MessageAction extends TLObject {
        public String address;
        public int channel_id;
        public int chat_id;
        public DecryptedMessageAction encryptedAction;
        public long game_id;
        public int inviter_id;
        public UserProfilePhoto newUserPhoto;
        public Photo photo;
        public int score;
        public String title;
        public int ttl;
        public int user_id;
        public ArrayList<Integer> users;

        public MessageAction() {
            this.users = new ArrayList();
        }

        public static MessageAction TLdeserialize(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            MessageAction messageAction = null;
            switch (i) {
                case -1834538890:
                    messageAction = new TL_messageActionGameScore();
                    break;
                case -1799538451:
                    messageAction = new TL_messageActionPinMessage();
                    break;
                case -1781355374:
                    messageAction = new TL_messageActionChannelCreate();
                    break;
                case -1780220945:
                    messageAction = new TL_messageActionChatDeletePhoto();
                    break;
                case -1615153660:
                    messageAction = new TL_messageActionHistoryClear();
                    break;
                case -1503425638:
                    messageAction = new TL_messageActionChatCreate();
                    break;
                case -1336546578:
                    messageAction = new TL_messageActionChannelMigrateFrom();
                    break;
                case -1297179892:
                    messageAction = new TL_messageActionChatDeleteUser();
                    break;
                case -1247687078:
                    messageAction = new TL_messageActionChatEditTitle();
                    break;
                case -1230047312:
                    messageAction = new TL_messageActionEmpty();
                    break;
                case -123931160:
                    messageAction = new TL_messageActionChatJoinedByLink();
                    break;
                case 209540062:
                    messageAction = new TL_messageActionGeoChatCheckin();
                    break;
                case 1217033015:
                    messageAction = new TL_messageActionChatAddUser();
                    break;
                case 1371385889:
                    messageAction = new TL_messageActionChatMigrateTo();
                    break;
                case 1431655760:
                    messageAction = new TL_messageActionUserJoined();
                    break;
                case 1431655761:
                    messageAction = new TL_messageActionUserUpdatedPhoto();
                    break;
                case 1431655762:
                    messageAction = new TL_messageActionTTLChange();
                    break;
                case 1431655767:
                    messageAction = new TL_messageActionCreatedBroadcastList();
                    break;
                case 1431655925:
                    messageAction = new TL_messageActionLoginUnknownLocation();
                    break;
                case 1431655927:
                    messageAction = new TL_messageEncryptedAction();
                    break;
                case 1581055051:
                    messageAction = new TL_messageActionChatAddUser_old();
                    break;
                case 1862504124:
                    messageAction = new TL_messageActionGeoChatCreate();
                    break;
                case 2144015272:
                    messageAction = new TL_messageActionChatEditPhoto();
                    break;
            }
            if (messageAction == null && z) {
                Object[] objArr = new Object[TLRPC.USER_FLAG_ACCESS_HASH];
                objArr[0] = Integer.valueOf(i);
                throw new RuntimeException(String.format("can't parse magic %x in MessageAction", objArr));
            }
            if (messageAction != null) {
                messageAction.readParams(abstractSerializedData, z);
            }
            return messageAction;
        }
    }

    public static class MessageEntity extends TLObject {
        public String language;
        public int length;
        public int offset;
        public String url;

        public static MessageEntity TLdeserialize(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            MessageEntity messageEntity = null;
            switch (i) {
                case -2106619040:
                    messageEntity = new TL_messageEntityItalic();
                    break;
                case -1148011883:
                    messageEntity = new TL_messageEntityUnknown();
                    break;
                case -1117713463:
                    messageEntity = new TL_messageEntityBold();
                    break;
                case -100378723:
                    messageEntity = new TL_messageEntityMention();
                    break;
                case 546203849:
                    messageEntity = new TL_inputMessageEntityMentionName();
                    break;
                case 681706865:
                    messageEntity = new TL_messageEntityCode();
                    break;
                case 892193368:
                    messageEntity = new TL_messageEntityMentionName();
                    break;
                case 1692693954:
                    messageEntity = new TL_messageEntityEmail();
                    break;
                case 1827637959:
                    messageEntity = new TL_messageEntityBotCommand();
                    break;
                case 1859134776:
                    messageEntity = new TL_messageEntityUrl();
                    break;
                case 1868782349:
                    messageEntity = new TL_messageEntityHashtag();
                    break;
                case 1938967520:
                    messageEntity = new TL_messageEntityPre();
                    break;
                case 1990644519:
                    messageEntity = new TL_messageEntityTextUrl();
                    break;
            }
            if (messageEntity == null && z) {
                Object[] objArr = new Object[TLRPC.USER_FLAG_ACCESS_HASH];
                objArr[0] = Integer.valueOf(i);
                throw new RuntimeException(String.format("can't parse magic %x in MessageEntity", objArr));
            }
            if (messageEntity != null) {
                messageEntity.readParams(abstractSerializedData, z);
            }
            return messageEntity;
        }
    }

    public static class MessageMedia extends TLObject {
        public String address;
        public Audio audio_unused;
        public byte[] bytes;
        public String caption;
        public Document document;
        public String first_name;
        public TL_game game;
        public GeoPoint geo;
        public String last_name;
        public String phone_number;
        public Photo photo;
        public String provider;
        public String title;
        public int user_id;
        public String venue_id;
        public Video video_unused;
        public WebPage webpage;

        public static MessageMedia TLdeserialize(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            MessageMedia messageMedia = null;
            switch (i) {
                case -1618676578:
                    messageMedia = new TL_messageMediaUnsupported();
                    break;
                case -1563278704:
                    messageMedia = new TL_messageMediaVideo_old();
                    break;
                case -1557277184:
                    messageMedia = new TL_messageMediaWebPage();
                    break;
                case -961117440:
                    messageMedia = new TL_messageMediaAudio_layer45();
                    break;
                case -926655958:
                    messageMedia = new TL_messageMediaPhoto_old();
                    break;
                case -203411800:
                    messageMedia = new TL_messageMediaDocument();
                    break;
                case -38694904:
                    messageMedia = new TL_messageMediaGame();
                    break;
                case 694364726:
                    messageMedia = new TL_messageMediaUnsupported_old();
                    break;
                case 802824708:
                    messageMedia = new TL_messageMediaDocument_old();
                    break;
                case 1032643901:
                    messageMedia = new TL_messageMediaPhoto();
                    break;
                case 1038967584:
                    messageMedia = new TL_messageMediaEmpty();
                    break;
                case 1457575028:
                    messageMedia = new TL_messageMediaGeo();
                    break;
                case 1540298357:
                    messageMedia = new TL_messageMediaVideo_layer45();
                    break;
                case 1585262393:
                    messageMedia = new TL_messageMediaContact();
                    break;
                case 2031269663:
                    messageMedia = new TL_messageMediaVenue();
                    break;
            }
            if (messageMedia == null && z) {
                Object[] objArr = new Object[TLRPC.USER_FLAG_ACCESS_HASH];
                objArr[0] = Integer.valueOf(i);
                throw new RuntimeException(String.format("can't parse magic %x in MessageMedia", objArr));
            }
            if (messageMedia != null) {
                messageMedia.readParams(abstractSerializedData, z);
                MessageMedia tL_messageMediaDocument;
                if (messageMedia.video_unused != null) {
                    tL_messageMediaDocument = new TL_messageMediaDocument();
                    if (messageMedia.video_unused instanceof TL_videoEncrypted) {
                        tL_messageMediaDocument.document = new TL_documentEncrypted();
                        tL_messageMediaDocument.document.key = messageMedia.video_unused.key;
                        tL_messageMediaDocument.document.iv = messageMedia.video_unused.iv;
                    } else {
                        tL_messageMediaDocument.document = new TL_document();
                    }
                    tL_messageMediaDocument.document.id = messageMedia.video_unused.id;
                    tL_messageMediaDocument.document.access_hash = messageMedia.video_unused.access_hash;
                    tL_messageMediaDocument.document.date = messageMedia.video_unused.date;
                    if (messageMedia.video_unused.mime_type != null) {
                        tL_messageMediaDocument.document.mime_type = messageMedia.video_unused.mime_type;
                    } else {
                        tL_messageMediaDocument.document.mime_type = MimeTypes.VIDEO_MP4;
                    }
                    tL_messageMediaDocument.document.size = messageMedia.video_unused.size;
                    tL_messageMediaDocument.document.thumb = messageMedia.video_unused.thumb;
                    tL_messageMediaDocument.document.dc_id = messageMedia.video_unused.dc_id;
                    tL_messageMediaDocument.caption = messageMedia.caption;
                    TL_documentAttributeVideo tL_documentAttributeVideo = new TL_documentAttributeVideo();
                    tL_documentAttributeVideo.w = messageMedia.video_unused.f2676w;
                    tL_documentAttributeVideo.h = messageMedia.video_unused.f2675h;
                    tL_documentAttributeVideo.duration = messageMedia.video_unused.duration;
                    tL_messageMediaDocument.document.attributes.add(tL_documentAttributeVideo);
                    if (tL_messageMediaDocument.caption != null) {
                        return tL_messageMediaDocument;
                    }
                    tL_messageMediaDocument.caption = TtmlNode.ANONYMOUS_REGION_ID;
                    return tL_messageMediaDocument;
                } else if (messageMedia.audio_unused != null) {
                    tL_messageMediaDocument = new TL_messageMediaDocument();
                    if (messageMedia.audio_unused instanceof TL_audioEncrypted) {
                        tL_messageMediaDocument.document = new TL_documentEncrypted();
                        tL_messageMediaDocument.document.key = messageMedia.audio_unused.key;
                        tL_messageMediaDocument.document.iv = messageMedia.audio_unused.iv;
                    } else {
                        tL_messageMediaDocument.document = new TL_document();
                    }
                    tL_messageMediaDocument.document.id = messageMedia.audio_unused.id;
                    tL_messageMediaDocument.document.access_hash = messageMedia.audio_unused.access_hash;
                    tL_messageMediaDocument.document.date = messageMedia.audio_unused.date;
                    if (messageMedia.audio_unused.mime_type != null) {
                        tL_messageMediaDocument.document.mime_type = messageMedia.audio_unused.mime_type;
                    } else {
                        tL_messageMediaDocument.document.mime_type = "audio/ogg";
                    }
                    tL_messageMediaDocument.document.size = messageMedia.audio_unused.size;
                    tL_messageMediaDocument.document.thumb = new TL_photoSizeEmpty();
                    tL_messageMediaDocument.document.thumb.type = "s";
                    tL_messageMediaDocument.document.dc_id = messageMedia.audio_unused.dc_id;
                    tL_messageMediaDocument.caption = messageMedia.caption;
                    TL_documentAttributeAudio tL_documentAttributeAudio = new TL_documentAttributeAudio();
                    tL_documentAttributeAudio.duration = messageMedia.audio_unused.duration;
                    tL_documentAttributeAudio.voice = true;
                    tL_messageMediaDocument.document.attributes.add(tL_documentAttributeAudio);
                    if (tL_messageMediaDocument.caption != null) {
                        return tL_messageMediaDocument;
                    }
                    tL_messageMediaDocument.caption = TtmlNode.ANONYMOUS_REGION_ID;
                    return tL_messageMediaDocument;
                }
            }
            return messageMedia;
        }
    }

    public static class MessagesFilter extends TLObject {
        public static MessagesFilter TLdeserialize(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            MessagesFilter messagesFilter = null;
            switch (i) {
                case -1777752804:
                    messagesFilter = new TL_inputMessagesFilterPhotos();
                    break;
                case -1629621880:
                    messagesFilter = new TL_inputMessagesFilterDocument();
                    break;
                case -1614803355:
                    messagesFilter = new TL_inputMessagesFilterVideo();
                    break;
                case -648121413:
                    messagesFilter = new TL_inputMessagesFilterPhotoVideoDocuments();
                    break;
                case -3644025:
                    messagesFilter = new TL_inputMessagesFilterGif();
                    break;
                case 928101534:
                    messagesFilter = new TL_inputMessagesFilterMusic();
                    break;
                case 975236280:
                    messagesFilter = new TL_inputMessagesFilterChatPhotos();
                    break;
                case 1358283666:
                    messagesFilter = new TL_inputMessagesFilterVoice();
                    break;
                case 1458172132:
                    messagesFilter = new TL_inputMessagesFilterPhotoVideo();
                    break;
                case 1474492012:
                    messagesFilter = new TL_inputMessagesFilterEmpty();
                    break;
                case 2129714567:
                    messagesFilter = new TL_inputMessagesFilterUrl();
                    break;
            }
            if (messagesFilter == null && z) {
                Object[] objArr = new Object[TLRPC.USER_FLAG_ACCESS_HASH];
                objArr[0] = Integer.valueOf(i);
                throw new RuntimeException(String.format("can't parse magic %x in MessagesFilter", objArr));
            }
            if (messagesFilter != null) {
                messagesFilter.readParams(abstractSerializedData, z);
            }
            return messagesFilter;
        }
    }

    public static class NotifyPeer extends TLObject {
        public Peer peer;

        public static NotifyPeer TLdeserialize(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            NotifyPeer notifyPeer = null;
            switch (i) {
                case -1613493288:
                    notifyPeer = new TL_notifyPeer();
                    break;
                case -1261946036:
                    notifyPeer = new TL_notifyUsers();
                    break;
                case -1073230141:
                    notifyPeer = new TL_notifyChats();
                    break;
                case 1959820384:
                    notifyPeer = new TL_notifyAll();
                    break;
            }
            if (notifyPeer == null && z) {
                Object[] objArr = new Object[TLRPC.USER_FLAG_ACCESS_HASH];
                objArr[0] = Integer.valueOf(i);
                throw new RuntimeException(String.format("can't parse magic %x in NotifyPeer", objArr));
            }
            if (notifyPeer != null) {
                notifyPeer.readParams(abstractSerializedData, z);
            }
            return notifyPeer;
        }
    }

    public static class Peer extends TLObject {
        public int channel_id;
        public int chat_id;
        public int user_id;

        public static Peer TLdeserialize(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            Peer peer = null;
            switch (i) {
                case -1649296275:
                    peer = new TL_peerUser();
                    break;
                case -1160714821:
                    peer = new TL_peerChat();
                    break;
                case -1109531342:
                    peer = new TL_peerChannel();
                    break;
            }
            if (peer == null && z) {
                Object[] objArr = new Object[TLRPC.USER_FLAG_ACCESS_HASH];
                objArr[0] = Integer.valueOf(i);
                throw new RuntimeException(String.format("can't parse magic %x in Peer", objArr));
            }
            if (peer != null) {
                peer.readParams(abstractSerializedData, z);
            }
            return peer;
        }
    }

    public static class PeerNotifyEvents extends TLObject {
        public static PeerNotifyEvents TLdeserialize(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            PeerNotifyEvents peerNotifyEvents = null;
            switch (i) {
                case -1378534221:
                    peerNotifyEvents = new TL_peerNotifyEventsEmpty();
                    break;
                case 1830677896:
                    peerNotifyEvents = new TL_peerNotifyEventsAll();
                    break;
            }
            if (peerNotifyEvents == null && z) {
                Object[] objArr = new Object[TLRPC.USER_FLAG_ACCESS_HASH];
                objArr[0] = Integer.valueOf(i);
                throw new RuntimeException(String.format("can't parse magic %x in PeerNotifyEvents", objArr));
            }
            if (peerNotifyEvents != null) {
                peerNotifyEvents.readParams(abstractSerializedData, z);
            }
            return peerNotifyEvents;
        }
    }

    public static class PeerNotifySettings extends TLObject {
        public int events_mask;
        public int flags;
        public int mute_until;
        public boolean silent;
        public String sound;

        public static PeerNotifySettings TLdeserialize(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            PeerNotifySettings peerNotifySettings = null;
            switch (i) {
                case -1923214866:
                    peerNotifySettings = new TL_peerNotifySettings_layer47();
                    break;
                case -1697798976:
                    peerNotifySettings = new TL_peerNotifySettings();
                    break;
                case 1889961234:
                    peerNotifySettings = new TL_peerNotifySettingsEmpty();
                    break;
            }
            if (peerNotifySettings == null && z) {
                Object[] objArr = new Object[TLRPC.USER_FLAG_ACCESS_HASH];
                objArr[0] = Integer.valueOf(i);
                throw new RuntimeException(String.format("can't parse magic %x in PeerNotifySettings", objArr));
            }
            if (peerNotifySettings != null) {
                peerNotifySettings.readParams(abstractSerializedData, z);
            }
            return peerNotifySettings;
        }
    }

    public static class Photo extends TLObject {
        public long access_hash;
        public String caption;
        public int date;
        public int flags;
        public GeoPoint geo;
        public boolean has_stickers;
        public long id;
        public ArrayList<PhotoSize> sizes;
        public int user_id;

        public Photo() {
            this.sizes = new ArrayList();
        }

        public static Photo TLdeserialize(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            Photo photo = null;
            switch (i) {
                case -1836524247:
                    photo = new TL_photo();
                    break;
                case -1014792074:
                    photo = new TL_photo_old2();
                    break;
                case -840088834:
                    photo = new TL_photo_layer55();
                    break;
                case 582313809:
                    photo = new TL_photo_old();
                    break;
                case 590459437:
                    photo = new TL_photoEmpty();
                    break;
            }
            if (photo == null && z) {
                Object[] objArr = new Object[TLRPC.USER_FLAG_ACCESS_HASH];
                objArr[0] = Integer.valueOf(i);
                throw new RuntimeException(String.format("can't parse magic %x in Photo", objArr));
            }
            if (photo != null) {
                photo.readParams(abstractSerializedData, z);
            }
            return photo;
        }
    }

    public static class PhotoSize extends TLObject {
        public byte[] bytes;
        public int f2663h;
        public FileLocation location;
        public int size;
        public String type;
        public int f2664w;

        public static PhotoSize TLdeserialize(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            PhotoSize photoSize = null;
            switch (i) {
                case -374917894:
                    photoSize = new TL_photoCachedSize();
                    break;
                case 236446268:
                    photoSize = new TL_photoSizeEmpty();
                    break;
                case 2009052699:
                    photoSize = new TL_photoSize();
                    break;
            }
            if (photoSize == null && z) {
                Object[] objArr = new Object[TLRPC.USER_FLAG_ACCESS_HASH];
                objArr[0] = Integer.valueOf(i);
                throw new RuntimeException(String.format("can't parse magic %x in PhotoSize", objArr));
            }
            if (photoSize != null) {
                photoSize.readParams(abstractSerializedData, z);
            }
            return photoSize;
        }
    }

    public static class PrivacyKey extends TLObject {
        public static PrivacyKey TLdeserialize(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            PrivacyKey privacyKey = null;
            switch (i) {
                case -1137792208:
                    privacyKey = new TL_privacyKeyStatusTimestamp();
                    break;
                case 1343122938:
                    privacyKey = new TL_privacyKeyChatInvite();
                    break;
            }
            if (privacyKey == null && z) {
                Object[] objArr = new Object[TLRPC.USER_FLAG_ACCESS_HASH];
                objArr[0] = Integer.valueOf(i);
                throw new RuntimeException(String.format("can't parse magic %x in PrivacyKey", objArr));
            }
            if (privacyKey != null) {
                privacyKey.readParams(abstractSerializedData, z);
            }
            return privacyKey;
        }
    }

    public static class PrivacyRule extends TLObject {
        public ArrayList<Integer> users;

        public PrivacyRule() {
            this.users = new ArrayList();
        }

        public static PrivacyRule TLdeserialize(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            PrivacyRule privacyRule = null;
            switch (i) {
                case -1955338397:
                    privacyRule = new TL_privacyValueDisallowAll();
                    break;
                case -125240806:
                    privacyRule = new TL_privacyValueDisallowContacts();
                    break;
                case -123988:
                    privacyRule = new TL_privacyValueAllowContacts();
                    break;
                case 209668535:
                    privacyRule = new TL_privacyValueDisallowUsers();
                    break;
                case 1297858060:
                    privacyRule = new TL_privacyValueAllowUsers();
                    break;
                case 1698855810:
                    privacyRule = new TL_privacyValueAllowAll();
                    break;
            }
            if (privacyRule == null && z) {
                Object[] objArr = new Object[TLRPC.USER_FLAG_ACCESS_HASH];
                objArr[0] = Integer.valueOf(i);
                throw new RuntimeException(String.format("can't parse magic %x in PrivacyRule", objArr));
            }
            if (privacyRule != null) {
                privacyRule.readParams(abstractSerializedData, z);
            }
            return privacyRule;
        }
    }

    public static class ReplyMarkup extends TLObject {
        public int flags;
        public boolean resize;
        public ArrayList<TL_keyboardButtonRow> rows;
        public boolean selective;
        public boolean single_use;

        public ReplyMarkup() {
            this.rows = new ArrayList();
        }

        public static ReplyMarkup TLdeserialize(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            ReplyMarkup replyMarkup = null;
            switch (i) {
                case -1606526075:
                    replyMarkup = new TL_replyKeyboardHide();
                    break;
                case -200242528:
                    replyMarkup = new TL_replyKeyboardForceReply();
                    break;
                case 889353612:
                    replyMarkup = new TL_replyKeyboardMarkup();
                    break;
                case 1218642516:
                    replyMarkup = new TL_replyInlineMarkup();
                    break;
            }
            if (replyMarkup == null && z) {
                Object[] objArr = new Object[TLRPC.USER_FLAG_ACCESS_HASH];
                objArr[0] = Integer.valueOf(i);
                throw new RuntimeException(String.format("can't parse magic %x in ReplyMarkup", objArr));
            }
            if (replyMarkup != null) {
                replyMarkup.readParams(abstractSerializedData, z);
            }
            return replyMarkup;
        }
    }

    public static class ReportReason extends TLObject {
        public String text;

        public static ReportReason TLdeserialize(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            ReportReason reportReason = null;
            switch (i) {
                case -512463606:
                    reportReason = new TL_inputReportReasonOther();
                    break;
                case 505595789:
                    reportReason = new TL_inputReportReasonViolence();
                    break;
                case 777640226:
                    reportReason = new TL_inputReportReasonPornography();
                    break;
                case 1490799288:
                    reportReason = new TL_inputReportReasonSpam();
                    break;
            }
            if (reportReason == null && z) {
                Object[] objArr = new Object[TLRPC.USER_FLAG_ACCESS_HASH];
                objArr[0] = Integer.valueOf(i);
                throw new RuntimeException(String.format("can't parse magic %x in ReportReason", objArr));
            }
            if (reportReason != null) {
                reportReason.readParams(abstractSerializedData, z);
            }
            return reportReason;
        }
    }

    public static class SendMessageAction extends TLObject {
        public int progress;

        public static SendMessageAction TLdeserialize(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            SendMessageAction sendMessageAction = null;
            switch (i) {
                case -1884362354:
                    sendMessageAction = new TL_sendMessageUploadDocumentAction_old();
                    break;
                case -1845219337:
                    sendMessageAction = new TL_sendMessageUploadVideoAction_old();
                    break;
                case -1727382502:
                    sendMessageAction = new TL_sendMessageUploadPhotoAction_old();
                    break;
                case -1584933265:
                    sendMessageAction = new TL_sendMessageRecordVideoAction();
                    break;
                case -1441998364:
                    sendMessageAction = new TL_sendMessageUploadDocumentAction();
                    break;
                case -774682074:
                    sendMessageAction = new TL_sendMessageUploadPhotoAction();
                    break;
                case -718310409:
                    sendMessageAction = new TL_sendMessageRecordAudioAction();
                    break;
                case -580219064:
                    sendMessageAction = new TL_sendMessageGamePlayAction();
                    break;
                case -424899985:
                    sendMessageAction = new TL_sendMessageUploadAudioAction_old();
                    break;
                case -378127636:
                    sendMessageAction = new TL_sendMessageUploadVideoAction();
                    break;
                case -212740181:
                    sendMessageAction = new TL_sendMessageUploadAudioAction();
                    break;
                case -44119819:
                    sendMessageAction = new TL_sendMessageCancelAction();
                    break;
                case 365087130:
                    sendMessageAction = new TL_sendMessageGameStopAction();
                    break;
                case 381645902:
                    sendMessageAction = new TL_sendMessageTypingAction();
                    break;
                case 393186209:
                    sendMessageAction = new TL_sendMessageGeoLocationAction();
                    break;
                case 1653390447:
                    sendMessageAction = new TL_sendMessageChooseContactAction();
                    break;
            }
            if (sendMessageAction == null && z) {
                Object[] objArr = new Object[TLRPC.USER_FLAG_ACCESS_HASH];
                objArr[0] = Integer.valueOf(i);
                throw new RuntimeException(String.format("can't parse magic %x in SendMessageAction", objArr));
            }
            if (sendMessageAction != null) {
                sendMessageAction.readParams(abstractSerializedData, z);
            }
            return sendMessageAction;
        }
    }

    public static class StickerSet extends TLObject {
        public long access_hash;
        public boolean archived;
        public int count;
        public int flags;
        public int hash;
        public long id;
        public boolean installed;
        public boolean masks;
        public boolean official;
        public String short_name;
        public String title;

        public static StickerSet TLdeserialize(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            StickerSet stickerSet = null;
            switch (i) {
                case -1482409193:
                    stickerSet = new TL_stickerSet_old();
                    break;
                case -852477119:
                    stickerSet = new TL_stickerSet();
                    break;
            }
            if (stickerSet == null && z) {
                Object[] objArr = new Object[TLRPC.USER_FLAG_ACCESS_HASH];
                objArr[0] = Integer.valueOf(i);
                throw new RuntimeException(String.format("can't parse magic %x in StickerSet", objArr));
            }
            if (stickerSet != null) {
                stickerSet.readParams(abstractSerializedData, z);
            }
            return stickerSet;
        }
    }

    public static class StickerSetCovered extends TLObject {
        public Document cover;
        public ArrayList<Document> covers;
        public StickerSet set;

        public StickerSetCovered() {
            this.covers = new ArrayList();
        }

        public static StickerSetCovered TLdeserialize(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            StickerSetCovered stickerSetCovered = null;
            switch (i) {
                case 872932635:
                    stickerSetCovered = new TL_stickerSetMultiCovered();
                    break;
                case 1678812626:
                    stickerSetCovered = new TL_stickerSetCovered();
                    break;
            }
            if (stickerSetCovered == null && z) {
                Object[] objArr = new Object[TLRPC.USER_FLAG_ACCESS_HASH];
                objArr[0] = Integer.valueOf(i);
                throw new RuntimeException(String.format("can't parse magic %x in StickerSetCovered", objArr));
            }
            if (stickerSetCovered != null) {
                stickerSetCovered.readParams(abstractSerializedData, z);
            }
            return stickerSetCovered;
        }
    }

    public static class TL_accountDaysTTL extends TLObject {
        public static int constructor;
        public int days;

        static {
            constructor = -1194283041;
        }

        public static TL_accountDaysTTL TLdeserialize(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            if (constructor == i) {
                TL_accountDaysTTL tL_accountDaysTTL = new TL_accountDaysTTL();
                tL_accountDaysTTL.readParams(abstractSerializedData, z);
                return tL_accountDaysTTL;
            } else if (!z) {
                return null;
            } else {
                Object[] objArr = new Object[TLRPC.USER_FLAG_ACCESS_HASH];
                objArr[0] = Integer.valueOf(i);
                throw new RuntimeException(String.format("can't parse magic %x in TL_accountDaysTTL", objArr));
            }
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.days = abstractSerializedData.readInt32(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.days);
        }
    }

    public static class TL_account_authorizations extends TLObject {
        public static int constructor;
        public ArrayList<TL_authorization> authorizations;

        static {
            constructor = 307276766;
        }

        public TL_account_authorizations() {
            this.authorizations = new ArrayList();
        }

        public static TL_account_authorizations TLdeserialize(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            if (constructor == i) {
                TL_account_authorizations tL_account_authorizations = new TL_account_authorizations();
                tL_account_authorizations.readParams(abstractSerializedData, z);
                return tL_account_authorizations;
            } else if (!z) {
                return null;
            } else {
                Object[] objArr = new Object[TLRPC.USER_FLAG_ACCESS_HASH];
                objArr[0] = Integer.valueOf(i);
                throw new RuntimeException(String.format("can't parse magic %x in TL_account_authorizations", objArr));
            }
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            int i = 0;
            int readInt32 = abstractSerializedData.readInt32(z);
            if (readInt32 == 481674261) {
                readInt32 = abstractSerializedData.readInt32(z);
                while (i < readInt32) {
                    TL_authorization TLdeserialize = TL_authorization.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
                    if (TLdeserialize != null) {
                        this.authorizations.add(TLdeserialize);
                        i += TLRPC.USER_FLAG_ACCESS_HASH;
                    } else {
                        return;
                    }
                }
            } else if (z) {
                Object[] objArr = new Object[TLRPC.USER_FLAG_ACCESS_HASH];
                objArr[0] = Integer.valueOf(readInt32);
                throw new RuntimeException(String.format("wrong Vector magic, got %x", objArr));
            }
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(481674261);
            int size = this.authorizations.size();
            abstractSerializedData.writeInt32(size);
            for (int i = 0; i < size; i += TLRPC.USER_FLAG_ACCESS_HASH) {
                ((TL_authorization) this.authorizations.get(i)).serializeToStream(abstractSerializedData);
            }
        }
    }

    public static class TL_account_changePhone extends TLObject {
        public static int constructor;
        public String phone_code;
        public String phone_code_hash;
        public String phone_number;

        static {
            constructor = 1891839707;
        }

        public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            return User.TLdeserialize(abstractSerializedData, i, z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeString(this.phone_number);
            abstractSerializedData.writeString(this.phone_code_hash);
            abstractSerializedData.writeString(this.phone_code);
        }
    }

    public static class TL_account_checkUsername extends TLObject {
        public static int constructor;
        public String username;

        static {
            constructor = 655677548;
        }

        public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            return Bool.TLdeserialize(abstractSerializedData, i, z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeString(this.username);
        }
    }

    public static class TL_account_confirmPhone extends TLObject {
        public static int constructor;
        public String phone_code;
        public String phone_code_hash;

        static {
            constructor = 1596029123;
        }

        public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            return Bool.TLdeserialize(abstractSerializedData, i, z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeString(this.phone_code_hash);
            abstractSerializedData.writeString(this.phone_code);
        }
    }

    public static class TL_account_deleteAccount extends TLObject {
        public static int constructor;
        public String reason;

        static {
            constructor = 1099779595;
        }

        public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            return Bool.TLdeserialize(abstractSerializedData, i, z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeString(this.reason);
        }
    }

    public static class TL_account_getAccountTTL extends TLObject {
        public static int constructor;

        static {
            constructor = 150761757;
        }

        public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            return TL_accountDaysTTL.TLdeserialize(abstractSerializedData, i, z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
        }
    }

    public static class TL_account_getAuthorizations extends TLObject {
        public static int constructor;

        static {
            constructor = -484392616;
        }

        public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            return TL_account_authorizations.TLdeserialize(abstractSerializedData, i, z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
        }
    }

    public static class TL_account_getNotifySettings extends TLObject {
        public static int constructor;
        public InputNotifyPeer peer;

        static {
            constructor = 313765169;
        }

        public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            return PeerNotifySettings.TLdeserialize(abstractSerializedData, i, z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.peer.serializeToStream(abstractSerializedData);
        }
    }

    public static class TL_account_getPassword extends TLObject {
        public static int constructor;

        static {
            constructor = 1418342645;
        }

        public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            return account_Password.TLdeserialize(abstractSerializedData, i, z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
        }
    }

    public static class TL_account_getPasswordSettings extends TLObject {
        public static int constructor;
        public byte[] current_password_hash;

        static {
            constructor = -1131605573;
        }

        public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            return TL_account_passwordSettings.TLdeserialize(abstractSerializedData, i, z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeByteArray(this.current_password_hash);
        }
    }

    public static class TL_account_getPrivacy extends TLObject {
        public static int constructor;
        public InputPrivacyKey key;

        static {
            constructor = -623130288;
        }

        public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            return TL_account_privacyRules.TLdeserialize(abstractSerializedData, i, z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.key.serializeToStream(abstractSerializedData);
        }
    }

    public static class TL_account_getWallPapers extends TLObject {
        public static int constructor;

        static {
            constructor = -1068696894;
        }

        public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            TLObject vector = new Vector();
            int readInt32 = abstractSerializedData.readInt32(z);
            for (int i2 = 0; i2 < readInt32; i2 += TLRPC.USER_FLAG_ACCESS_HASH) {
                WallPaper TLdeserialize = WallPaper.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
                if (TLdeserialize == null) {
                    break;
                }
                vector.objects.add(TLdeserialize);
            }
            return vector;
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
        }
    }

    public static class account_Password extends TLObject {
        public byte[] current_salt;
        public String email_unconfirmed_pattern;
        public boolean has_recovery;
        public String hint;
        public byte[] new_salt;

        public static account_Password TLdeserialize(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            account_Password com_hanista_mobogram_tgnet_TLRPC_account_Password = null;
            switch (i) {
                case -1764049896:
                    com_hanista_mobogram_tgnet_TLRPC_account_Password = new TL_account_noPassword();
                    break;
                case 2081952796:
                    com_hanista_mobogram_tgnet_TLRPC_account_Password = new TL_account_password();
                    break;
            }
            if (com_hanista_mobogram_tgnet_TLRPC_account_Password == null && z) {
                Object[] objArr = new Object[TLRPC.USER_FLAG_ACCESS_HASH];
                objArr[0] = Integer.valueOf(i);
                throw new RuntimeException(String.format("can't parse magic %x in account_Password", objArr));
            }
            if (com_hanista_mobogram_tgnet_TLRPC_account_Password != null) {
                com_hanista_mobogram_tgnet_TLRPC_account_Password.readParams(abstractSerializedData, z);
            }
            return com_hanista_mobogram_tgnet_TLRPC_account_Password;
        }
    }

    public static class TL_account_noPassword extends account_Password {
        public static int constructor;

        static {
            constructor = -1764049896;
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.new_salt = abstractSerializedData.readByteArray(z);
            this.email_unconfirmed_pattern = abstractSerializedData.readString(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeByteArray(this.new_salt);
            abstractSerializedData.writeString(this.email_unconfirmed_pattern);
        }
    }

    public static class TL_account_password extends account_Password {
        public static int constructor;

        static {
            constructor = 2081952796;
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.current_salt = abstractSerializedData.readByteArray(z);
            this.new_salt = abstractSerializedData.readByteArray(z);
            this.hint = abstractSerializedData.readString(z);
            this.has_recovery = abstractSerializedData.readBool(z);
            this.email_unconfirmed_pattern = abstractSerializedData.readString(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeByteArray(this.current_salt);
            abstractSerializedData.writeByteArray(this.new_salt);
            abstractSerializedData.writeString(this.hint);
            abstractSerializedData.writeBool(this.has_recovery);
            abstractSerializedData.writeString(this.email_unconfirmed_pattern);
        }
    }

    public static class TL_account_passwordInputSettings extends TLObject {
        public static int constructor;
        public String email;
        public int flags;
        public String hint;
        public byte[] new_password_hash;
        public byte[] new_salt;

        static {
            constructor = -2037289493;
        }

        public static TL_account_passwordInputSettings TLdeserialize(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            if (constructor == i) {
                TL_account_passwordInputSettings tL_account_passwordInputSettings = new TL_account_passwordInputSettings();
                tL_account_passwordInputSettings.readParams(abstractSerializedData, z);
                return tL_account_passwordInputSettings;
            } else if (!z) {
                return null;
            } else {
                Object[] objArr = new Object[TLRPC.USER_FLAG_ACCESS_HASH];
                objArr[0] = Integer.valueOf(i);
                throw new RuntimeException(String.format("can't parse magic %x in TL_account_passwordInputSettings", objArr));
            }
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.flags = abstractSerializedData.readInt32(z);
            if ((this.flags & TLRPC.USER_FLAG_ACCESS_HASH) != 0) {
                this.new_salt = abstractSerializedData.readByteArray(z);
            }
            if ((this.flags & TLRPC.USER_FLAG_ACCESS_HASH) != 0) {
                this.new_password_hash = abstractSerializedData.readByteArray(z);
            }
            if ((this.flags & TLRPC.USER_FLAG_ACCESS_HASH) != 0) {
                this.hint = abstractSerializedData.readString(z);
            }
            if ((this.flags & TLRPC.USER_FLAG_FIRST_NAME) != 0) {
                this.email = abstractSerializedData.readString(z);
            }
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.flags);
            if ((this.flags & TLRPC.USER_FLAG_ACCESS_HASH) != 0) {
                abstractSerializedData.writeByteArray(this.new_salt);
            }
            if ((this.flags & TLRPC.USER_FLAG_ACCESS_HASH) != 0) {
                abstractSerializedData.writeByteArray(this.new_password_hash);
            }
            if ((this.flags & TLRPC.USER_FLAG_ACCESS_HASH) != 0) {
                abstractSerializedData.writeString(this.hint);
            }
            if ((this.flags & TLRPC.USER_FLAG_FIRST_NAME) != 0) {
                abstractSerializedData.writeString(this.email);
            }
        }
    }

    public static class TL_account_passwordSettings extends TLObject {
        public static int constructor;
        public String email;

        static {
            constructor = -1212732749;
        }

        public static TL_account_passwordSettings TLdeserialize(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            if (constructor == i) {
                TL_account_passwordSettings tL_account_passwordSettings = new TL_account_passwordSettings();
                tL_account_passwordSettings.readParams(abstractSerializedData, z);
                return tL_account_passwordSettings;
            } else if (!z) {
                return null;
            } else {
                Object[] objArr = new Object[TLRPC.USER_FLAG_ACCESS_HASH];
                objArr[0] = Integer.valueOf(i);
                throw new RuntimeException(String.format("can't parse magic %x in TL_account_passwordSettings", objArr));
            }
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.email = abstractSerializedData.readString(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeString(this.email);
        }
    }

    public static class TL_account_privacyRules extends TLObject {
        public static int constructor;
        public ArrayList<PrivacyRule> rules;
        public ArrayList<User> users;

        static {
            constructor = 1430961007;
        }

        public TL_account_privacyRules() {
            this.rules = new ArrayList();
            this.users = new ArrayList();
        }

        public static TL_account_privacyRules TLdeserialize(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            if (constructor == i) {
                TL_account_privacyRules tL_account_privacyRules = new TL_account_privacyRules();
                tL_account_privacyRules.readParams(abstractSerializedData, z);
                return tL_account_privacyRules;
            } else if (!z) {
                return null;
            } else {
                Object[] objArr = new Object[TLRPC.USER_FLAG_ACCESS_HASH];
                objArr[0] = Integer.valueOf(i);
                throw new RuntimeException(String.format("can't parse magic %x in TL_account_privacyRules", objArr));
            }
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            int i = 0;
            int readInt32 = abstractSerializedData.readInt32(z);
            Object[] objArr;
            if (readInt32 == 481674261) {
                int readInt322 = abstractSerializedData.readInt32(z);
                readInt32 = 0;
                while (readInt32 < readInt322) {
                    PrivacyRule TLdeserialize = PrivacyRule.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
                    if (TLdeserialize != null) {
                        this.rules.add(TLdeserialize);
                        readInt32 += TLRPC.USER_FLAG_ACCESS_HASH;
                    } else {
                        return;
                    }
                }
                readInt32 = abstractSerializedData.readInt32(z);
                if (readInt32 == 481674261) {
                    readInt32 = abstractSerializedData.readInt32(z);
                    while (i < readInt32) {
                        User TLdeserialize2 = User.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
                        if (TLdeserialize2 != null) {
                            this.users.add(TLdeserialize2);
                            i += TLRPC.USER_FLAG_ACCESS_HASH;
                        } else {
                            return;
                        }
                    }
                } else if (z) {
                    objArr = new Object[TLRPC.USER_FLAG_ACCESS_HASH];
                    objArr[0] = Integer.valueOf(readInt32);
                    throw new RuntimeException(String.format("wrong Vector magic, got %x", objArr));
                }
            } else if (z) {
                objArr = new Object[TLRPC.USER_FLAG_ACCESS_HASH];
                objArr[0] = Integer.valueOf(readInt32);
                throw new RuntimeException(String.format("wrong Vector magic, got %x", objArr));
            }
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            int i;
            int i2 = 0;
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(481674261);
            int size = this.rules.size();
            abstractSerializedData.writeInt32(size);
            for (i = 0; i < size; i += TLRPC.USER_FLAG_ACCESS_HASH) {
                ((PrivacyRule) this.rules.get(i)).serializeToStream(abstractSerializedData);
            }
            abstractSerializedData.writeInt32(481674261);
            i = this.users.size();
            abstractSerializedData.writeInt32(i);
            while (i2 < i) {
                ((User) this.users.get(i2)).serializeToStream(abstractSerializedData);
                i2 += TLRPC.USER_FLAG_ACCESS_HASH;
            }
        }
    }

    public static class TL_account_registerDevice extends TLObject {
        public static int constructor;
        public String token;
        public int token_type;

        static {
            constructor = 1669245048;
        }

        public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            return Bool.TLdeserialize(abstractSerializedData, i, z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.token_type);
            abstractSerializedData.writeString(this.token);
        }
    }

    public static class TL_account_reportPeer extends TLObject {
        public static int constructor;
        public InputPeer peer;
        public ReportReason reason;

        static {
            constructor = -1374118561;
        }

        public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            return Bool.TLdeserialize(abstractSerializedData, i, z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.peer.serializeToStream(abstractSerializedData);
            this.reason.serializeToStream(abstractSerializedData);
        }
    }

    public static class TL_account_resetAuthorization extends TLObject {
        public static int constructor;
        public long hash;

        static {
            constructor = -545786948;
        }

        public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            return Bool.TLdeserialize(abstractSerializedData, i, z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt64(this.hash);
        }
    }

    public static class TL_account_resetNotifySettings extends TLObject {
        public static int constructor;

        static {
            constructor = -612493497;
        }

        public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            return Bool.TLdeserialize(abstractSerializedData, i, z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
        }
    }

    public static class TL_account_sendChangePhoneCode extends TLObject {
        public static int constructor;
        public boolean allow_flashcall;
        public boolean current_number;
        public int flags;
        public String phone_number;

        static {
            constructor = 149257707;
        }

        public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            return TL_auth_sentCode.TLdeserialize(abstractSerializedData, i, z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.flags = this.allow_flashcall ? this.flags | TLRPC.USER_FLAG_ACCESS_HASH : this.flags & -2;
            abstractSerializedData.writeInt32(this.flags);
            abstractSerializedData.writeString(this.phone_number);
            if ((this.flags & TLRPC.USER_FLAG_ACCESS_HASH) != 0) {
                abstractSerializedData.writeBool(this.current_number);
            }
        }
    }

    public static class TL_account_sendConfirmPhoneCode extends TLObject {
        public static int constructor;
        public boolean allow_flashcall;
        public boolean current_number;
        public int flags;
        public String hash;

        static {
            constructor = 353818557;
        }

        public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            return TL_auth_sentCode.TLdeserialize(abstractSerializedData, i, z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.flags = this.allow_flashcall ? this.flags | TLRPC.USER_FLAG_ACCESS_HASH : this.flags & -2;
            abstractSerializedData.writeInt32(this.flags);
            abstractSerializedData.writeString(this.hash);
            if ((this.flags & TLRPC.USER_FLAG_ACCESS_HASH) != 0) {
                abstractSerializedData.writeBool(this.current_number);
            }
        }
    }

    public static class TL_account_setAccountTTL extends TLObject {
        public static int constructor;
        public TL_accountDaysTTL ttl;

        static {
            constructor = 608323678;
        }

        public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            return Bool.TLdeserialize(abstractSerializedData, i, z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.ttl.serializeToStream(abstractSerializedData);
        }
    }

    public static class TL_account_setPrivacy extends TLObject {
        public static int constructor;
        public InputPrivacyKey key;
        public ArrayList<InputPrivacyRule> rules;

        static {
            constructor = -906486552;
        }

        public TL_account_setPrivacy() {
            this.rules = new ArrayList();
        }

        public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            return TL_account_privacyRules.TLdeserialize(abstractSerializedData, i, z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.key.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeInt32(481674261);
            int size = this.rules.size();
            abstractSerializedData.writeInt32(size);
            for (int i = 0; i < size; i += TLRPC.USER_FLAG_ACCESS_HASH) {
                ((InputPrivacyRule) this.rules.get(i)).serializeToStream(abstractSerializedData);
            }
        }
    }

    public static class TL_account_unregisterDevice extends TLObject {
        public static int constructor;
        public String token;
        public int token_type;

        static {
            constructor = 1707432768;
        }

        public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            return Bool.TLdeserialize(abstractSerializedData, i, z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.token_type);
            abstractSerializedData.writeString(this.token);
        }
    }

    public static class TL_account_updateDeviceLocked extends TLObject {
        public static int constructor;
        public int period;

        static {
            constructor = 954152242;
        }

        public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            return Bool.TLdeserialize(abstractSerializedData, i, z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.period);
        }
    }

    public static class TL_account_updateNotifySettings extends TLObject {
        public static int constructor;
        public InputNotifyPeer peer;
        public TL_inputPeerNotifySettings settings;

        static {
            constructor = -2067899501;
        }

        public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            return Bool.TLdeserialize(abstractSerializedData, i, z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.peer.serializeToStream(abstractSerializedData);
            this.settings.serializeToStream(abstractSerializedData);
        }
    }

    public static class TL_account_updatePasswordSettings extends TLObject {
        public static int constructor;
        public byte[] current_password_hash;
        public TL_account_passwordInputSettings new_settings;

        static {
            constructor = -92517498;
        }

        public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            return Bool.TLdeserialize(abstractSerializedData, i, z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeByteArray(this.current_password_hash);
            this.new_settings.serializeToStream(abstractSerializedData);
        }
    }

    public static class TL_account_updateProfile extends TLObject {
        public static int constructor;
        public String about;
        public String first_name;
        public int flags;
        public String last_name;

        static {
            constructor = 2018596725;
        }

        public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            return User.TLdeserialize(abstractSerializedData, i, z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.flags);
            if ((this.flags & TLRPC.USER_FLAG_ACCESS_HASH) != 0) {
                abstractSerializedData.writeString(this.first_name);
            }
            if ((this.flags & TLRPC.USER_FLAG_FIRST_NAME) != 0) {
                abstractSerializedData.writeString(this.last_name);
            }
            if ((this.flags & TLRPC.USER_FLAG_LAST_NAME) != 0) {
                abstractSerializedData.writeString(this.about);
            }
        }
    }

    public static class TL_account_updateStatus extends TLObject {
        public static int constructor;
        public boolean offline;

        static {
            constructor = 1713919532;
        }

        public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            return Bool.TLdeserialize(abstractSerializedData, i, z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeBool(this.offline);
        }
    }

    public static class TL_account_updateUsername extends TLObject {
        public static int constructor;
        public String username;

        static {
            constructor = 1040964988;
        }

        public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            return User.TLdeserialize(abstractSerializedData, i, z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeString(this.username);
        }
    }

    public static class TL_audioEmpty_layer45 extends Audio {
        public static int constructor;

        static {
            constructor = 1483311320;
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.id = abstractSerializedData.readInt64(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt64(this.id);
        }
    }

    public static class TL_audio_layer45 extends Audio {
        public static int constructor;

        static {
            constructor = -102543275;
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.id = abstractSerializedData.readInt64(z);
            this.access_hash = abstractSerializedData.readInt64(z);
            this.date = abstractSerializedData.readInt32(z);
            this.duration = abstractSerializedData.readInt32(z);
            this.mime_type = abstractSerializedData.readString(z);
            this.size = abstractSerializedData.readInt32(z);
            this.dc_id = abstractSerializedData.readInt32(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt64(this.id);
            abstractSerializedData.writeInt64(this.access_hash);
            abstractSerializedData.writeInt32(this.date);
            abstractSerializedData.writeInt32(this.duration);
            abstractSerializedData.writeString(this.mime_type);
            abstractSerializedData.writeInt32(this.size);
            abstractSerializedData.writeInt32(this.dc_id);
        }
    }

    public static class TL_audioEncrypted extends TL_audio_layer45 {
        public static int constructor;

        static {
            constructor = 1431655926;
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.id = abstractSerializedData.readInt64(z);
            this.access_hash = abstractSerializedData.readInt64(z);
            this.user_id = abstractSerializedData.readInt32(z);
            this.date = abstractSerializedData.readInt32(z);
            this.duration = abstractSerializedData.readInt32(z);
            this.size = abstractSerializedData.readInt32(z);
            this.dc_id = abstractSerializedData.readInt32(z);
            this.key = abstractSerializedData.readByteArray(z);
            this.iv = abstractSerializedData.readByteArray(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt64(this.id);
            abstractSerializedData.writeInt64(this.access_hash);
            abstractSerializedData.writeInt32(this.user_id);
            abstractSerializedData.writeInt32(this.date);
            abstractSerializedData.writeInt32(this.duration);
            abstractSerializedData.writeInt32(this.size);
            abstractSerializedData.writeInt32(this.dc_id);
            abstractSerializedData.writeByteArray(this.key);
            abstractSerializedData.writeByteArray(this.iv);
        }
    }

    public static class TL_audio_old2 extends TL_audio_layer45 {
        public static int constructor;

        static {
            constructor = -945003370;
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.id = abstractSerializedData.readInt64(z);
            this.access_hash = abstractSerializedData.readInt64(z);
            this.user_id = abstractSerializedData.readInt32(z);
            this.date = abstractSerializedData.readInt32(z);
            this.duration = abstractSerializedData.readInt32(z);
            this.mime_type = abstractSerializedData.readString(z);
            this.size = abstractSerializedData.readInt32(z);
            this.dc_id = abstractSerializedData.readInt32(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt64(this.id);
            abstractSerializedData.writeInt64(this.access_hash);
            abstractSerializedData.writeInt32(this.user_id);
            abstractSerializedData.writeInt32(this.date);
            abstractSerializedData.writeInt32(this.duration);
            abstractSerializedData.writeString(this.mime_type);
            abstractSerializedData.writeInt32(this.size);
            abstractSerializedData.writeInt32(this.dc_id);
        }
    }

    public static class TL_audio_old extends TL_audio_layer45 {
        public static int constructor;

        static {
            constructor = 1114908135;
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.id = abstractSerializedData.readInt64(z);
            this.access_hash = abstractSerializedData.readInt64(z);
            this.user_id = abstractSerializedData.readInt32(z);
            this.date = abstractSerializedData.readInt32(z);
            this.duration = abstractSerializedData.readInt32(z);
            this.size = abstractSerializedData.readInt32(z);
            this.dc_id = abstractSerializedData.readInt32(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt64(this.id);
            abstractSerializedData.writeInt64(this.access_hash);
            abstractSerializedData.writeInt32(this.user_id);
            abstractSerializedData.writeInt32(this.date);
            abstractSerializedData.writeInt32(this.duration);
            abstractSerializedData.writeInt32(this.size);
            abstractSerializedData.writeInt32(this.dc_id);
        }
    }

    public static class TL_auth_authorization extends TLObject {
        public static int constructor;
        public int flags;
        public int tmp_sessions;
        public User user;

        static {
            constructor = -855308010;
        }

        public static TL_auth_authorization TLdeserialize(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            if (constructor == i) {
                TL_auth_authorization tL_auth_authorization = new TL_auth_authorization();
                tL_auth_authorization.readParams(abstractSerializedData, z);
                return tL_auth_authorization;
            } else if (!z) {
                return null;
            } else {
                Object[] objArr = new Object[TLRPC.USER_FLAG_ACCESS_HASH];
                objArr[0] = Integer.valueOf(i);
                throw new RuntimeException(String.format("can't parse magic %x in TL_auth_authorization", objArr));
            }
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.flags = abstractSerializedData.readInt32(z);
            if ((this.flags & TLRPC.USER_FLAG_ACCESS_HASH) != 0) {
                this.tmp_sessions = abstractSerializedData.readInt32(z);
            }
            this.user = User.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.flags);
            if ((this.flags & TLRPC.USER_FLAG_ACCESS_HASH) != 0) {
                abstractSerializedData.writeInt32(this.tmp_sessions);
            }
            this.user.serializeToStream(abstractSerializedData);
        }
    }

    public static class TL_auth_bindTempAuthKey extends TLObject {
        public static int constructor;
        public byte[] encrypted_message;
        public int expires_at;
        public long nonce;
        public long perm_auth_key_id;

        static {
            constructor = -841733627;
        }

        public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            return Bool.TLdeserialize(abstractSerializedData, i, z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt64(this.perm_auth_key_id);
            abstractSerializedData.writeInt64(this.nonce);
            abstractSerializedData.writeInt32(this.expires_at);
            abstractSerializedData.writeByteArray(this.encrypted_message);
        }
    }

    public static class TL_auth_cancelCode extends TLObject {
        public static int constructor;
        public String phone_code_hash;
        public String phone_number;

        static {
            constructor = 520357240;
        }

        public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            return Bool.TLdeserialize(abstractSerializedData, i, z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeString(this.phone_number);
            abstractSerializedData.writeString(this.phone_code_hash);
        }
    }

    public static class TL_auth_checkPassword extends TLObject {
        public static int constructor;
        public byte[] password_hash;

        static {
            constructor = 174260510;
        }

        public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            return TL_auth_authorization.TLdeserialize(abstractSerializedData, i, z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeByteArray(this.password_hash);
        }
    }

    public static class TL_auth_checkPhone extends TLObject {
        public static int constructor;
        public String phone_number;

        static {
            constructor = 1877286395;
        }

        public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            return TL_auth_checkedPhone.TLdeserialize(abstractSerializedData, i, z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeString(this.phone_number);
        }
    }

    public static class TL_auth_checkedPhone extends TLObject {
        public static int constructor;
        public boolean phone_registered;

        static {
            constructor = -2128698738;
        }

        public static TL_auth_checkedPhone TLdeserialize(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            if (constructor == i) {
                TL_auth_checkedPhone tL_auth_checkedPhone = new TL_auth_checkedPhone();
                tL_auth_checkedPhone.readParams(abstractSerializedData, z);
                return tL_auth_checkedPhone;
            } else if (!z) {
                return null;
            } else {
                Object[] objArr = new Object[TLRPC.USER_FLAG_ACCESS_HASH];
                objArr[0] = Integer.valueOf(i);
                throw new RuntimeException(String.format("can't parse magic %x in TL_auth_checkedPhone", objArr));
            }
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.phone_registered = abstractSerializedData.readBool(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeBool(this.phone_registered);
        }
    }

    public static class auth_CodeType extends TLObject {
        public static auth_CodeType TLdeserialize(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            auth_CodeType com_hanista_mobogram_tgnet_TLRPC_auth_CodeType = null;
            switch (i) {
                case 577556219:
                    com_hanista_mobogram_tgnet_TLRPC_auth_CodeType = new TL_auth_codeTypeFlashCall();
                    break;
                case 1923290508:
                    com_hanista_mobogram_tgnet_TLRPC_auth_CodeType = new TL_auth_codeTypeSms();
                    break;
                case 1948046307:
                    com_hanista_mobogram_tgnet_TLRPC_auth_CodeType = new TL_auth_codeTypeCall();
                    break;
            }
            if (com_hanista_mobogram_tgnet_TLRPC_auth_CodeType == null && z) {
                Object[] objArr = new Object[TLRPC.USER_FLAG_ACCESS_HASH];
                objArr[0] = Integer.valueOf(i);
                throw new RuntimeException(String.format("can't parse magic %x in auth_CodeType", objArr));
            }
            if (com_hanista_mobogram_tgnet_TLRPC_auth_CodeType != null) {
                com_hanista_mobogram_tgnet_TLRPC_auth_CodeType.readParams(abstractSerializedData, z);
            }
            return com_hanista_mobogram_tgnet_TLRPC_auth_CodeType;
        }
    }

    public static class TL_auth_codeTypeCall extends auth_CodeType {
        public static int constructor;

        static {
            constructor = 1948046307;
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
        }
    }

    public static class TL_auth_codeTypeFlashCall extends auth_CodeType {
        public static int constructor;

        static {
            constructor = 577556219;
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
        }
    }

    public static class TL_auth_codeTypeSms extends auth_CodeType {
        public static int constructor;

        static {
            constructor = 1923290508;
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
        }
    }

    public static class TL_auth_dropTempAuthKeys extends TLObject {
        public static int constructor;
        public ArrayList<Long> except_auth_keys;

        static {
            constructor = -1907842680;
        }

        public TL_auth_dropTempAuthKeys() {
            this.except_auth_keys = new ArrayList();
        }

        public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            return Bool.TLdeserialize(abstractSerializedData, i, z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(481674261);
            int size = this.except_auth_keys.size();
            abstractSerializedData.writeInt32(size);
            for (int i = 0; i < size; i += TLRPC.USER_FLAG_ACCESS_HASH) {
                abstractSerializedData.writeInt64(((Long) this.except_auth_keys.get(i)).longValue());
            }
        }
    }

    public static class TL_auth_exportAuthorization extends TLObject {
        public static int constructor;
        public int dc_id;

        static {
            constructor = -440401971;
        }

        public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            return TL_auth_exportedAuthorization.TLdeserialize(abstractSerializedData, i, z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.dc_id);
        }
    }

    public static class TL_auth_exportedAuthorization extends TLObject {
        public static int constructor;
        public byte[] bytes;
        public int id;

        static {
            constructor = -543777747;
        }

        public static TL_auth_exportedAuthorization TLdeserialize(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            if (constructor == i) {
                TL_auth_exportedAuthorization tL_auth_exportedAuthorization = new TL_auth_exportedAuthorization();
                tL_auth_exportedAuthorization.readParams(abstractSerializedData, z);
                return tL_auth_exportedAuthorization;
            } else if (!z) {
                return null;
            } else {
                Object[] objArr = new Object[TLRPC.USER_FLAG_ACCESS_HASH];
                objArr[0] = Integer.valueOf(i);
                throw new RuntimeException(String.format("can't parse magic %x in TL_auth_exportedAuthorization", objArr));
            }
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.id = abstractSerializedData.readInt32(z);
            this.bytes = abstractSerializedData.readByteArray(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.id);
            abstractSerializedData.writeByteArray(this.bytes);
        }
    }

    public static class TL_auth_importAuthorization extends TLObject {
        public static int constructor;
        public byte[] bytes;
        public int id;

        static {
            constructor = -470837741;
        }

        public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            return TL_auth_authorization.TLdeserialize(abstractSerializedData, i, z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.id);
            abstractSerializedData.writeByteArray(this.bytes);
        }
    }

    public static class TL_auth_importBotAuthorization extends TLObject {
        public static int constructor;
        public String api_hash;
        public int api_id;
        public String bot_auth_token;
        public int flags;

        static {
            constructor = 1738800940;
        }

        public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            return TL_auth_authorization.TLdeserialize(abstractSerializedData, i, z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.flags);
            abstractSerializedData.writeInt32(this.api_id);
            abstractSerializedData.writeString(this.api_hash);
            abstractSerializedData.writeString(this.bot_auth_token);
        }
    }

    public static class TL_auth_logOut extends TLObject {
        public static int constructor;

        static {
            constructor = 1461180992;
        }

        public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            return Bool.TLdeserialize(abstractSerializedData, i, z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
        }
    }

    public static class TL_auth_passwordRecovery extends TLObject {
        public static int constructor;
        public String email_pattern;

        static {
            constructor = 326715557;
        }

        public static TL_auth_passwordRecovery TLdeserialize(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            if (constructor == i) {
                TL_auth_passwordRecovery tL_auth_passwordRecovery = new TL_auth_passwordRecovery();
                tL_auth_passwordRecovery.readParams(abstractSerializedData, z);
                return tL_auth_passwordRecovery;
            } else if (!z) {
                return null;
            } else {
                Object[] objArr = new Object[TLRPC.USER_FLAG_ACCESS_HASH];
                objArr[0] = Integer.valueOf(i);
                throw new RuntimeException(String.format("can't parse magic %x in TL_auth_passwordRecovery", objArr));
            }
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.email_pattern = abstractSerializedData.readString(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeString(this.email_pattern);
        }
    }

    public static class TL_auth_recoverPassword extends TLObject {
        public static int constructor;
        public String code;

        static {
            constructor = 1319464594;
        }

        public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            return TL_auth_authorization.TLdeserialize(abstractSerializedData, i, z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeString(this.code);
        }
    }

    public static class TL_auth_requestPasswordRecovery extends TLObject {
        public static int constructor;

        static {
            constructor = -661144474;
        }

        public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            return TL_auth_passwordRecovery.TLdeserialize(abstractSerializedData, i, z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
        }
    }

    public static class TL_auth_resendCode extends TLObject {
        public static int constructor;
        public String phone_code_hash;
        public String phone_number;

        static {
            constructor = 1056025023;
        }

        public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            return TL_auth_sentCode.TLdeserialize(abstractSerializedData, i, z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeString(this.phone_number);
            abstractSerializedData.writeString(this.phone_code_hash);
        }
    }

    public static class TL_auth_resetAuthorizations extends TLObject {
        public static int constructor;

        static {
            constructor = -1616179942;
        }

        public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            return Bool.TLdeserialize(abstractSerializedData, i, z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
        }
    }

    public static class TL_auth_sendCode extends TLObject {
        public static int constructor;
        public boolean allow_flashcall;
        public String api_hash;
        public int api_id;
        public boolean current_number;
        public int flags;
        public String phone_number;

        static {
            constructor = -2035355412;
        }

        public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            return TL_auth_sentCode.TLdeserialize(abstractSerializedData, i, z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.flags = this.allow_flashcall ? this.flags | TLRPC.USER_FLAG_ACCESS_HASH : this.flags & -2;
            abstractSerializedData.writeInt32(this.flags);
            abstractSerializedData.writeString(this.phone_number);
            if ((this.flags & TLRPC.USER_FLAG_ACCESS_HASH) != 0) {
                abstractSerializedData.writeBool(this.current_number);
            }
            abstractSerializedData.writeInt32(this.api_id);
            abstractSerializedData.writeString(this.api_hash);
        }
    }

    public static class TL_auth_sendInvites extends TLObject {
        public static int constructor;
        public String message;
        public ArrayList<String> phone_numbers;

        static {
            constructor = 1998331287;
        }

        public TL_auth_sendInvites() {
            this.phone_numbers = new ArrayList();
        }

        public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            return Bool.TLdeserialize(abstractSerializedData, i, z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(481674261);
            int size = this.phone_numbers.size();
            abstractSerializedData.writeInt32(size);
            for (int i = 0; i < size; i += TLRPC.USER_FLAG_ACCESS_HASH) {
                abstractSerializedData.writeString((String) this.phone_numbers.get(i));
            }
            abstractSerializedData.writeString(this.message);
        }
    }

    public static class TL_auth_sentCode extends TLObject {
        public static int constructor;
        public int flags;
        public auth_CodeType next_type;
        public String phone_code_hash;
        public boolean phone_registered;
        public int timeout;
        public auth_SentCodeType type;

        static {
            constructor = 1577067778;
        }

        public static TL_auth_sentCode TLdeserialize(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            if (constructor == i) {
                TL_auth_sentCode tL_auth_sentCode = new TL_auth_sentCode();
                tL_auth_sentCode.readParams(abstractSerializedData, z);
                return tL_auth_sentCode;
            } else if (!z) {
                return null;
            } else {
                Object[] objArr = new Object[TLRPC.USER_FLAG_ACCESS_HASH];
                objArr[0] = Integer.valueOf(i);
                throw new RuntimeException(String.format("can't parse magic %x in TL_auth_sentCode", objArr));
            }
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.flags = abstractSerializedData.readInt32(z);
            this.phone_registered = (this.flags & TLRPC.USER_FLAG_ACCESS_HASH) != 0;
            this.type = auth_SentCodeType.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
            this.phone_code_hash = abstractSerializedData.readString(z);
            if ((this.flags & TLRPC.USER_FLAG_FIRST_NAME) != 0) {
                this.next_type = auth_CodeType.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
            }
            if ((this.flags & TLRPC.USER_FLAG_LAST_NAME) != 0) {
                this.timeout = abstractSerializedData.readInt32(z);
            }
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.flags = this.phone_registered ? this.flags | TLRPC.USER_FLAG_ACCESS_HASH : this.flags & -2;
            abstractSerializedData.writeInt32(this.flags);
            this.type.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeString(this.phone_code_hash);
            if ((this.flags & TLRPC.USER_FLAG_FIRST_NAME) != 0) {
                this.next_type.serializeToStream(abstractSerializedData);
            }
            if ((this.flags & TLRPC.USER_FLAG_LAST_NAME) != 0) {
                abstractSerializedData.writeInt32(this.timeout);
            }
        }
    }

    public static class auth_SentCodeType extends TLObject {
        public int length;
        public String pattern;

        public static auth_SentCodeType TLdeserialize(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            auth_SentCodeType com_hanista_mobogram_tgnet_TLRPC_auth_SentCodeType = null;
            switch (i) {
                case -1425815847:
                    com_hanista_mobogram_tgnet_TLRPC_auth_SentCodeType = new TL_auth_sentCodeTypeFlashCall();
                    break;
                case -1073693790:
                    com_hanista_mobogram_tgnet_TLRPC_auth_SentCodeType = new TL_auth_sentCodeTypeSms();
                    break;
                case 1035688326:
                    com_hanista_mobogram_tgnet_TLRPC_auth_SentCodeType = new TL_auth_sentCodeTypeApp();
                    break;
                case 1398007207:
                    com_hanista_mobogram_tgnet_TLRPC_auth_SentCodeType = new TL_auth_sentCodeTypeCall();
                    break;
            }
            if (com_hanista_mobogram_tgnet_TLRPC_auth_SentCodeType == null && z) {
                Object[] objArr = new Object[TLRPC.USER_FLAG_ACCESS_HASH];
                objArr[0] = Integer.valueOf(i);
                throw new RuntimeException(String.format("can't parse magic %x in auth_SentCodeType", objArr));
            }
            if (com_hanista_mobogram_tgnet_TLRPC_auth_SentCodeType != null) {
                com_hanista_mobogram_tgnet_TLRPC_auth_SentCodeType.readParams(abstractSerializedData, z);
            }
            return com_hanista_mobogram_tgnet_TLRPC_auth_SentCodeType;
        }
    }

    public static class TL_auth_sentCodeTypeApp extends auth_SentCodeType {
        public static int constructor;

        static {
            constructor = 1035688326;
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.length = abstractSerializedData.readInt32(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.length);
        }
    }

    public static class TL_auth_sentCodeTypeCall extends auth_SentCodeType {
        public static int constructor;

        static {
            constructor = 1398007207;
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.length = abstractSerializedData.readInt32(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.length);
        }
    }

    public static class TL_auth_sentCodeTypeFlashCall extends auth_SentCodeType {
        public static int constructor;

        static {
            constructor = -1425815847;
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.pattern = abstractSerializedData.readString(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeString(this.pattern);
        }
    }

    public static class TL_auth_sentCodeTypeSms extends auth_SentCodeType {
        public static int constructor;

        static {
            constructor = -1073693790;
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.length = abstractSerializedData.readInt32(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.length);
        }
    }

    public static class TL_auth_signIn extends TLObject {
        public static int constructor;
        public String phone_code;
        public String phone_code_hash;
        public String phone_number;

        static {
            constructor = -1126886015;
        }

        public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            return TL_auth_authorization.TLdeserialize(abstractSerializedData, i, z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeString(this.phone_number);
            abstractSerializedData.writeString(this.phone_code_hash);
            abstractSerializedData.writeString(this.phone_code);
        }
    }

    public static class TL_auth_signUp extends TLObject {
        public static int constructor;
        public String first_name;
        public String last_name;
        public String phone_code;
        public String phone_code_hash;
        public String phone_number;

        static {
            constructor = 453408308;
        }

        public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            return TL_auth_authorization.TLdeserialize(abstractSerializedData, i, z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeString(this.phone_number);
            abstractSerializedData.writeString(this.phone_code_hash);
            abstractSerializedData.writeString(this.phone_code);
            abstractSerializedData.writeString(this.first_name);
            abstractSerializedData.writeString(this.last_name);
        }
    }

    public static class TL_authorization extends TLObject {
        public static int constructor;
        public int api_id;
        public String app_name;
        public String app_version;
        public String country;
        public int date_active;
        public int date_created;
        public String device_model;
        public int flags;
        public long hash;
        public String ip;
        public String platform;
        public String region;
        public String system_version;

        static {
            constructor = 2079516406;
        }

        public static TL_authorization TLdeserialize(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            if (constructor == i) {
                TL_authorization tL_authorization = new TL_authorization();
                tL_authorization.readParams(abstractSerializedData, z);
                return tL_authorization;
            } else if (!z) {
                return null;
            } else {
                Object[] objArr = new Object[TLRPC.USER_FLAG_ACCESS_HASH];
                objArr[0] = Integer.valueOf(i);
                throw new RuntimeException(String.format("can't parse magic %x in TL_authorization", objArr));
            }
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.hash = abstractSerializedData.readInt64(z);
            this.flags = abstractSerializedData.readInt32(z);
            this.device_model = abstractSerializedData.readString(z);
            this.platform = abstractSerializedData.readString(z);
            this.system_version = abstractSerializedData.readString(z);
            this.api_id = abstractSerializedData.readInt32(z);
            this.app_name = abstractSerializedData.readString(z);
            this.app_version = abstractSerializedData.readString(z);
            this.date_created = abstractSerializedData.readInt32(z);
            this.date_active = abstractSerializedData.readInt32(z);
            this.ip = abstractSerializedData.readString(z);
            this.country = abstractSerializedData.readString(z);
            this.region = abstractSerializedData.readString(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt64(this.hash);
            abstractSerializedData.writeInt32(this.flags);
            abstractSerializedData.writeString(this.device_model);
            abstractSerializedData.writeString(this.platform);
            abstractSerializedData.writeString(this.system_version);
            abstractSerializedData.writeInt32(this.api_id);
            abstractSerializedData.writeString(this.app_name);
            abstractSerializedData.writeString(this.app_version);
            abstractSerializedData.writeInt32(this.date_created);
            abstractSerializedData.writeInt32(this.date_active);
            abstractSerializedData.writeString(this.ip);
            abstractSerializedData.writeString(this.country);
            abstractSerializedData.writeString(this.region);
        }
    }

    public static class TL_boolFalse extends Bool {
        public static int constructor;

        static {
            constructor = -1132882121;
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
        }
    }

    public static class TL_boolTrue extends Bool {
        public static int constructor;

        static {
            constructor = -1720552011;
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
        }
    }

    public static class TL_botCommand extends TLObject {
        public static int constructor;
        public String command;
        public String description;

        static {
            constructor = -1032140601;
        }

        public static TL_botCommand TLdeserialize(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            if (constructor == i) {
                TL_botCommand tL_botCommand = new TL_botCommand();
                tL_botCommand.readParams(abstractSerializedData, z);
                return tL_botCommand;
            } else if (!z) {
                return null;
            } else {
                Object[] objArr = new Object[TLRPC.USER_FLAG_ACCESS_HASH];
                objArr[0] = Integer.valueOf(i);
                throw new RuntimeException(String.format("can't parse magic %x in TL_botCommand", objArr));
            }
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.command = abstractSerializedData.readString(z);
            this.description = abstractSerializedData.readString(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeString(this.command);
            abstractSerializedData.writeString(this.description);
        }
    }

    public static class TL_botInfo extends BotInfo {
        public static int constructor;

        static {
            constructor = -1729618630;
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            int i = 0;
            this.user_id = abstractSerializedData.readInt32(z);
            this.description = abstractSerializedData.readString(z);
            int readInt32 = abstractSerializedData.readInt32(z);
            if (readInt32 == 481674261) {
                readInt32 = abstractSerializedData.readInt32(z);
                while (i < readInt32) {
                    TL_botCommand TLdeserialize = TL_botCommand.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
                    if (TLdeserialize != null) {
                        this.commands.add(TLdeserialize);
                        i += TLRPC.USER_FLAG_ACCESS_HASH;
                    } else {
                        return;
                    }
                }
            } else if (z) {
                Object[] objArr = new Object[TLRPC.USER_FLAG_ACCESS_HASH];
                objArr[0] = Integer.valueOf(readInt32);
                throw new RuntimeException(String.format("wrong Vector magic, got %x", objArr));
            }
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.user_id);
            abstractSerializedData.writeString(this.description);
            abstractSerializedData.writeInt32(481674261);
            int size = this.commands.size();
            abstractSerializedData.writeInt32(size);
            for (int i = 0; i < size; i += TLRPC.USER_FLAG_ACCESS_HASH) {
                ((TL_botCommand) this.commands.get(i)).serializeToStream(abstractSerializedData);
            }
        }
    }

    public static class TL_botInfoEmpty_layer48 extends TL_botInfo {
        public static int constructor;

        static {
            constructor = -1154598962;
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
        }
    }

    public static class TL_botInfo_layer48 extends TL_botInfo {
        public static int constructor;

        static {
            constructor = 164583517;
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            int i = 0;
            this.user_id = abstractSerializedData.readInt32(z);
            this.version = abstractSerializedData.readInt32(z);
            abstractSerializedData.readString(z);
            this.description = abstractSerializedData.readString(z);
            int readInt32 = abstractSerializedData.readInt32(z);
            if (readInt32 == 481674261) {
                readInt32 = abstractSerializedData.readInt32(z);
                while (i < readInt32) {
                    TL_botCommand TLdeserialize = TL_botCommand.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
                    if (TLdeserialize != null) {
                        this.commands.add(TLdeserialize);
                        i += TLRPC.USER_FLAG_ACCESS_HASH;
                    } else {
                        return;
                    }
                }
            } else if (z) {
                Object[] objArr = new Object[TLRPC.USER_FLAG_ACCESS_HASH];
                objArr[0] = Integer.valueOf(readInt32);
                throw new RuntimeException(String.format("wrong Vector magic, got %x", objArr));
            }
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.user_id);
            abstractSerializedData.writeInt32(this.version);
            abstractSerializedData.writeString(TtmlNode.ANONYMOUS_REGION_ID);
            abstractSerializedData.writeString(this.description);
            abstractSerializedData.writeInt32(481674261);
            int size = this.commands.size();
            abstractSerializedData.writeInt32(size);
            for (int i = 0; i < size; i += TLRPC.USER_FLAG_ACCESS_HASH) {
                ((TL_botCommand) this.commands.get(i)).serializeToStream(abstractSerializedData);
            }
        }
    }

    public static class TL_botInlineMediaResult extends BotInlineResult {
        public static int constructor;

        static {
            constructor = 400266251;
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.flags = abstractSerializedData.readInt32(z);
            this.id = abstractSerializedData.readString(z);
            this.type = abstractSerializedData.readString(z);
            if ((this.flags & TLRPC.USER_FLAG_ACCESS_HASH) != 0) {
                this.photo = Photo.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
            }
            if ((this.flags & TLRPC.USER_FLAG_FIRST_NAME) != 0) {
                this.document = Document.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
            }
            if ((this.flags & TLRPC.USER_FLAG_LAST_NAME) != 0) {
                this.title = abstractSerializedData.readString(z);
            }
            if ((this.flags & TLRPC.USER_FLAG_USERNAME) != 0) {
                this.description = abstractSerializedData.readString(z);
            }
            this.send_message = BotInlineMessage.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.flags);
            abstractSerializedData.writeString(this.id);
            abstractSerializedData.writeString(this.type);
            if ((this.flags & TLRPC.USER_FLAG_ACCESS_HASH) != 0) {
                this.photo.serializeToStream(abstractSerializedData);
            }
            if ((this.flags & TLRPC.USER_FLAG_FIRST_NAME) != 0) {
                this.document.serializeToStream(abstractSerializedData);
            }
            if ((this.flags & TLRPC.USER_FLAG_LAST_NAME) != 0) {
                abstractSerializedData.writeString(this.title);
            }
            if ((this.flags & TLRPC.USER_FLAG_USERNAME) != 0) {
                abstractSerializedData.writeString(this.description);
            }
            this.send_message.serializeToStream(abstractSerializedData);
        }
    }

    public static class TL_botInlineMessageMediaAuto extends BotInlineMessage {
        public static int constructor;

        static {
            constructor = 175419739;
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.flags = abstractSerializedData.readInt32(z);
            this.caption = abstractSerializedData.readString(z);
            if ((this.flags & TLRPC.USER_FLAG_LAST_NAME) != 0) {
                this.reply_markup = ReplyMarkup.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
            }
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.flags);
            abstractSerializedData.writeString(this.caption);
            if ((this.flags & TLRPC.USER_FLAG_LAST_NAME) != 0) {
                this.reply_markup.serializeToStream(abstractSerializedData);
            }
        }
    }

    public static class TL_botInlineMessageMediaContact extends BotInlineMessage {
        public static int constructor;

        static {
            constructor = 904770772;
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.flags = abstractSerializedData.readInt32(z);
            this.phone_number = abstractSerializedData.readString(z);
            this.first_name = abstractSerializedData.readString(z);
            this.last_name = abstractSerializedData.readString(z);
            if ((this.flags & TLRPC.USER_FLAG_LAST_NAME) != 0) {
                this.reply_markup = ReplyMarkup.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
            }
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.flags);
            abstractSerializedData.writeString(this.phone_number);
            abstractSerializedData.writeString(this.first_name);
            abstractSerializedData.writeString(this.last_name);
            if ((this.flags & TLRPC.USER_FLAG_LAST_NAME) != 0) {
                this.reply_markup.serializeToStream(abstractSerializedData);
            }
        }
    }

    public static class TL_botInlineMessageMediaGeo extends BotInlineMessage {
        public static int constructor;

        static {
            constructor = 982505656;
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.flags = abstractSerializedData.readInt32(z);
            this.geo = GeoPoint.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
            if ((this.flags & TLRPC.USER_FLAG_LAST_NAME) != 0) {
                this.reply_markup = ReplyMarkup.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
            }
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.flags);
            this.geo.serializeToStream(abstractSerializedData);
            if ((this.flags & TLRPC.USER_FLAG_LAST_NAME) != 0) {
                this.reply_markup.serializeToStream(abstractSerializedData);
            }
        }
    }

    public static class TL_botInlineMessageMediaVenue extends BotInlineMessage {
        public static int constructor;

        static {
            constructor = 1130767150;
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.flags = abstractSerializedData.readInt32(z);
            this.geo = GeoPoint.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
            this.title = abstractSerializedData.readString(z);
            this.address = abstractSerializedData.readString(z);
            this.provider = abstractSerializedData.readString(z);
            this.venue_id = abstractSerializedData.readString(z);
            if ((this.flags & TLRPC.USER_FLAG_LAST_NAME) != 0) {
                this.reply_markup = ReplyMarkup.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
            }
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.flags);
            this.geo.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeString(this.title);
            abstractSerializedData.writeString(this.address);
            abstractSerializedData.writeString(this.provider);
            abstractSerializedData.writeString(this.venue_id);
            if ((this.flags & TLRPC.USER_FLAG_LAST_NAME) != 0) {
                this.reply_markup.serializeToStream(abstractSerializedData);
            }
        }
    }

    public static class TL_botInlineMessageText extends BotInlineMessage {
        public static int constructor;

        static {
            constructor = -1937807902;
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            int i = 0;
            this.flags = abstractSerializedData.readInt32(z);
            this.no_webpage = (this.flags & TLRPC.USER_FLAG_ACCESS_HASH) != 0;
            this.message = abstractSerializedData.readString(z);
            if ((this.flags & TLRPC.USER_FLAG_FIRST_NAME) != 0) {
                int readInt32 = abstractSerializedData.readInt32(z);
                if (readInt32 == 481674261) {
                    readInt32 = abstractSerializedData.readInt32(z);
                    while (i < readInt32) {
                        MessageEntity TLdeserialize = MessageEntity.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
                        if (TLdeserialize != null) {
                            this.entities.add(TLdeserialize);
                            i += TLRPC.USER_FLAG_ACCESS_HASH;
                        } else {
                            return;
                        }
                    }
                } else if (z) {
                    Object[] objArr = new Object[TLRPC.USER_FLAG_ACCESS_HASH];
                    objArr[0] = Integer.valueOf(readInt32);
                    throw new RuntimeException(String.format("wrong Vector magic, got %x", objArr));
                } else {
                    return;
                }
            }
            if ((this.flags & TLRPC.USER_FLAG_LAST_NAME) != 0) {
                this.reply_markup = ReplyMarkup.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
            }
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.flags = this.no_webpage ? this.flags | TLRPC.USER_FLAG_ACCESS_HASH : this.flags & -2;
            abstractSerializedData.writeInt32(this.flags);
            abstractSerializedData.writeString(this.message);
            if ((this.flags & TLRPC.USER_FLAG_FIRST_NAME) != 0) {
                abstractSerializedData.writeInt32(481674261);
                int size = this.entities.size();
                abstractSerializedData.writeInt32(size);
                for (int i = 0; i < size; i += TLRPC.USER_FLAG_ACCESS_HASH) {
                    ((MessageEntity) this.entities.get(i)).serializeToStream(abstractSerializedData);
                }
            }
            if ((this.flags & TLRPC.USER_FLAG_LAST_NAME) != 0) {
                this.reply_markup.serializeToStream(abstractSerializedData);
            }
        }
    }

    public static class TL_botInlineResult extends BotInlineResult {
        public static int constructor;

        static {
            constructor = -1679053127;
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.flags = abstractSerializedData.readInt32(z);
            this.id = abstractSerializedData.readString(z);
            this.type = abstractSerializedData.readString(z);
            if ((this.flags & TLRPC.USER_FLAG_FIRST_NAME) != 0) {
                this.title = abstractSerializedData.readString(z);
            }
            if ((this.flags & TLRPC.USER_FLAG_LAST_NAME) != 0) {
                this.description = abstractSerializedData.readString(z);
            }
            if ((this.flags & TLRPC.USER_FLAG_USERNAME) != 0) {
                this.url = abstractSerializedData.readString(z);
            }
            if ((this.flags & TLRPC.USER_FLAG_PHONE) != 0) {
                this.thumb_url = abstractSerializedData.readString(z);
            }
            if ((this.flags & TLRPC.USER_FLAG_PHOTO) != 0) {
                this.content_url = abstractSerializedData.readString(z);
            }
            if ((this.flags & TLRPC.USER_FLAG_PHOTO) != 0) {
                this.content_type = abstractSerializedData.readString(z);
            }
            if ((this.flags & TLRPC.USER_FLAG_STATUS) != 0) {
                this.w = abstractSerializedData.readInt32(z);
            }
            if ((this.flags & TLRPC.USER_FLAG_STATUS) != 0) {
                this.h = abstractSerializedData.readInt32(z);
            }
            if ((this.flags & TLRPC.USER_FLAG_UNUSED) != 0) {
                this.duration = abstractSerializedData.readInt32(z);
            }
            this.send_message = BotInlineMessage.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.flags);
            abstractSerializedData.writeString(this.id);
            abstractSerializedData.writeString(this.type);
            if ((this.flags & TLRPC.USER_FLAG_FIRST_NAME) != 0) {
                abstractSerializedData.writeString(this.title);
            }
            if ((this.flags & TLRPC.USER_FLAG_LAST_NAME) != 0) {
                abstractSerializedData.writeString(this.description);
            }
            if ((this.flags & TLRPC.USER_FLAG_USERNAME) != 0) {
                abstractSerializedData.writeString(this.url);
            }
            if ((this.flags & TLRPC.USER_FLAG_PHONE) != 0) {
                abstractSerializedData.writeString(this.thumb_url);
            }
            if ((this.flags & TLRPC.USER_FLAG_PHOTO) != 0) {
                abstractSerializedData.writeString(this.content_url);
            }
            if ((this.flags & TLRPC.USER_FLAG_PHOTO) != 0) {
                abstractSerializedData.writeString(this.content_type);
            }
            if ((this.flags & TLRPC.USER_FLAG_STATUS) != 0) {
                abstractSerializedData.writeInt32(this.w);
            }
            if ((this.flags & TLRPC.USER_FLAG_STATUS) != 0) {
                abstractSerializedData.writeInt32(this.h);
            }
            if ((this.flags & TLRPC.USER_FLAG_UNUSED) != 0) {
                abstractSerializedData.writeInt32(this.duration);
            }
            this.send_message.serializeToStream(abstractSerializedData);
        }
    }

    public static class TL_channel extends Chat {
        public static int constructor;

        static {
            constructor = -1588737454;
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            boolean z2 = true;
            this.flags = abstractSerializedData.readInt32(z);
            this.creator = (this.flags & TLRPC.USER_FLAG_ACCESS_HASH) != 0;
            this.kicked = (this.flags & TLRPC.USER_FLAG_FIRST_NAME) != 0;
            this.left = (this.flags & TLRPC.USER_FLAG_LAST_NAME) != 0;
            this.editor = (this.flags & TLRPC.USER_FLAG_USERNAME) != 0;
            this.moderator = (this.flags & TLRPC.USER_FLAG_PHONE) != 0;
            this.broadcast = (this.flags & TLRPC.USER_FLAG_PHOTO) != 0;
            this.verified = (this.flags & TLRPC.USER_FLAG_UNUSED) != 0;
            this.megagroup = (this.flags & TLRPC.USER_FLAG_UNUSED2) != 0;
            this.restricted = (this.flags & TLRPC.USER_FLAG_UNUSED3) != 0;
            this.democracy = (this.flags & TLRPC.MESSAGE_FLAG_HAS_VIEWS) != 0;
            this.signatures = (this.flags & TLRPC.MESSAGE_FLAG_HAS_BOT_ID) != 0;
            if ((this.flags & ItemAnimator.FLAG_APPEARED_IN_PRE_LAYOUT) == 0) {
                z2 = false;
            }
            this.min = z2;
            this.id = abstractSerializedData.readInt32(z);
            if ((this.flags & MessagesController.UPDATE_MASK_CHANNEL) != 0) {
                this.access_hash = abstractSerializedData.readInt64(z);
            }
            this.title = abstractSerializedData.readString(z);
            if ((this.flags & TLRPC.USER_FLAG_STATUS) != 0) {
                this.username = abstractSerializedData.readString(z);
            }
            this.photo = ChatPhoto.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
            this.date = abstractSerializedData.readInt32(z);
            this.version = abstractSerializedData.readInt32(z);
            if ((this.flags & TLRPC.USER_FLAG_UNUSED3) != 0) {
                this.restriction_reason = abstractSerializedData.readString(z);
            }
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.flags = this.creator ? this.flags | TLRPC.USER_FLAG_ACCESS_HASH : this.flags & -2;
            this.flags = this.kicked ? this.flags | TLRPC.USER_FLAG_FIRST_NAME : this.flags & -3;
            this.flags = this.left ? this.flags | TLRPC.USER_FLAG_LAST_NAME : this.flags & -5;
            this.flags = this.editor ? this.flags | TLRPC.USER_FLAG_USERNAME : this.flags & -9;
            this.flags = this.moderator ? this.flags | TLRPC.USER_FLAG_PHONE : this.flags & -17;
            this.flags = this.broadcast ? this.flags | TLRPC.USER_FLAG_PHOTO : this.flags & -33;
            this.flags = this.verified ? this.flags | TLRPC.USER_FLAG_UNUSED : this.flags & -129;
            this.flags = this.megagroup ? this.flags | TLRPC.USER_FLAG_UNUSED2 : this.flags & -257;
            this.flags = this.restricted ? this.flags | TLRPC.USER_FLAG_UNUSED3 : this.flags & -513;
            this.flags = this.democracy ? this.flags | TLRPC.MESSAGE_FLAG_HAS_VIEWS : this.flags & -1025;
            this.flags = this.signatures ? this.flags | TLRPC.MESSAGE_FLAG_HAS_BOT_ID : this.flags & -2049;
            this.flags = this.min ? this.flags | ItemAnimator.FLAG_APPEARED_IN_PRE_LAYOUT : this.flags & -4097;
            abstractSerializedData.writeInt32(this.flags);
            abstractSerializedData.writeInt32(this.id);
            if ((this.flags & MessagesController.UPDATE_MASK_CHANNEL) != 0) {
                abstractSerializedData.writeInt64(this.access_hash);
            }
            abstractSerializedData.writeString(this.title);
            if ((this.flags & TLRPC.USER_FLAG_STATUS) != 0) {
                abstractSerializedData.writeString(this.username);
            }
            this.photo.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeInt32(this.date);
            abstractSerializedData.writeInt32(this.version);
            if ((this.flags & TLRPC.USER_FLAG_UNUSED3) != 0) {
                abstractSerializedData.writeString(this.restriction_reason);
            }
        }
    }

    public static class TL_channelForbidden extends Chat {
        public static int constructor;

        static {
            constructor = -2059962289;
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            boolean z2 = true;
            this.flags = abstractSerializedData.readInt32(z);
            this.broadcast = (this.flags & TLRPC.USER_FLAG_PHOTO) != 0;
            if ((this.flags & TLRPC.USER_FLAG_UNUSED2) == 0) {
                z2 = false;
            }
            this.megagroup = z2;
            this.id = abstractSerializedData.readInt32(z);
            this.access_hash = abstractSerializedData.readInt64(z);
            this.title = abstractSerializedData.readString(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.flags = this.broadcast ? this.flags | TLRPC.USER_FLAG_PHOTO : this.flags & -33;
            this.flags = this.megagroup ? this.flags | TLRPC.USER_FLAG_UNUSED2 : this.flags & -257;
            abstractSerializedData.writeInt32(this.flags);
            abstractSerializedData.writeInt32(this.id);
            abstractSerializedData.writeInt64(this.access_hash);
            abstractSerializedData.writeString(this.title);
        }
    }

    public static class TL_channelForbidden_layer52 extends Chat {
        public static int constructor;

        static {
            constructor = 763724588;
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.id = abstractSerializedData.readInt32(z);
            this.access_hash = abstractSerializedData.readInt64(z);
            this.title = abstractSerializedData.readString(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.id);
            abstractSerializedData.writeInt64(this.access_hash);
            abstractSerializedData.writeString(this.title);
        }
    }

    public static class TL_channelFull extends ChatFull {
        public static int constructor;

        static {
            constructor = -1009430225;
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            int i = 0;
            this.flags = abstractSerializedData.readInt32(z);
            this.can_view_participants = (this.flags & TLRPC.USER_FLAG_USERNAME) != 0;
            this.can_set_username = (this.flags & TLRPC.USER_FLAG_STATUS) != 0;
            this.id = abstractSerializedData.readInt32(z);
            this.about = abstractSerializedData.readString(z);
            if ((this.flags & TLRPC.USER_FLAG_ACCESS_HASH) != 0) {
                this.participants_count = abstractSerializedData.readInt32(z);
            }
            if ((this.flags & TLRPC.USER_FLAG_FIRST_NAME) != 0) {
                this.admins_count = abstractSerializedData.readInt32(z);
            }
            if ((this.flags & TLRPC.USER_FLAG_LAST_NAME) != 0) {
                this.kicked_count = abstractSerializedData.readInt32(z);
            }
            this.read_inbox_max_id = abstractSerializedData.readInt32(z);
            this.read_outbox_max_id = abstractSerializedData.readInt32(z);
            this.unread_count = abstractSerializedData.readInt32(z);
            this.chat_photo = Photo.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
            this.notify_settings = PeerNotifySettings.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
            this.exported_invite = ExportedChatInvite.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
            int readInt32 = abstractSerializedData.readInt32(z);
            if (readInt32 == 481674261) {
                readInt32 = abstractSerializedData.readInt32(z);
                while (i < readInt32) {
                    BotInfo TLdeserialize = BotInfo.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
                    if (TLdeserialize != null) {
                        this.bot_info.add(TLdeserialize);
                        i += TLRPC.USER_FLAG_ACCESS_HASH;
                    } else {
                        return;
                    }
                }
                if ((this.flags & TLRPC.USER_FLAG_PHONE) != 0) {
                    this.migrated_from_chat_id = abstractSerializedData.readInt32(z);
                }
                if ((this.flags & TLRPC.USER_FLAG_PHONE) != 0) {
                    this.migrated_from_max_id = abstractSerializedData.readInt32(z);
                }
                if ((this.flags & TLRPC.USER_FLAG_PHOTO) != 0) {
                    this.pinned_msg_id = abstractSerializedData.readInt32(z);
                }
            } else if (z) {
                Object[] objArr = new Object[TLRPC.USER_FLAG_ACCESS_HASH];
                objArr[0] = Integer.valueOf(readInt32);
                throw new RuntimeException(String.format("wrong Vector magic, got %x", objArr));
            }
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.flags = this.can_view_participants ? this.flags | TLRPC.USER_FLAG_USERNAME : this.flags & -9;
            this.flags = this.can_set_username ? this.flags | TLRPC.USER_FLAG_STATUS : this.flags & -65;
            abstractSerializedData.writeInt32(this.flags);
            abstractSerializedData.writeInt32(this.id);
            abstractSerializedData.writeString(this.about);
            if ((this.flags & TLRPC.USER_FLAG_ACCESS_HASH) != 0) {
                abstractSerializedData.writeInt32(this.participants_count);
            }
            if ((this.flags & TLRPC.USER_FLAG_FIRST_NAME) != 0) {
                abstractSerializedData.writeInt32(this.admins_count);
            }
            if ((this.flags & TLRPC.USER_FLAG_LAST_NAME) != 0) {
                abstractSerializedData.writeInt32(this.kicked_count);
            }
            abstractSerializedData.writeInt32(this.read_inbox_max_id);
            abstractSerializedData.writeInt32(this.read_outbox_max_id);
            abstractSerializedData.writeInt32(this.unread_count);
            this.chat_photo.serializeToStream(abstractSerializedData);
            this.notify_settings.serializeToStream(abstractSerializedData);
            this.exported_invite.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeInt32(481674261);
            int size = this.bot_info.size();
            abstractSerializedData.writeInt32(size);
            for (int i = 0; i < size; i += TLRPC.USER_FLAG_ACCESS_HASH) {
                ((BotInfo) this.bot_info.get(i)).serializeToStream(abstractSerializedData);
            }
            if ((this.flags & TLRPC.USER_FLAG_PHONE) != 0) {
                abstractSerializedData.writeInt32(this.migrated_from_chat_id);
            }
            if ((this.flags & TLRPC.USER_FLAG_PHONE) != 0) {
                abstractSerializedData.writeInt32(this.migrated_from_max_id);
            }
            if ((this.flags & TLRPC.USER_FLAG_PHOTO) != 0) {
                abstractSerializedData.writeInt32(this.pinned_msg_id);
            }
        }
    }

    public static class TL_channelFull_layer48 extends TL_channelFull {
        public static int constructor;

        static {
            constructor = -1640751649;
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            int i = 0;
            this.flags = abstractSerializedData.readInt32(z);
            this.can_view_participants = (this.flags & TLRPC.USER_FLAG_USERNAME) != 0;
            this.id = abstractSerializedData.readInt32(z);
            this.about = abstractSerializedData.readString(z);
            if ((this.flags & TLRPC.USER_FLAG_ACCESS_HASH) != 0) {
                this.participants_count = abstractSerializedData.readInt32(z);
            }
            if ((this.flags & TLRPC.USER_FLAG_FIRST_NAME) != 0) {
                this.admins_count = abstractSerializedData.readInt32(z);
            }
            if ((this.flags & TLRPC.USER_FLAG_LAST_NAME) != 0) {
                this.kicked_count = abstractSerializedData.readInt32(z);
            }
            this.read_inbox_max_id = abstractSerializedData.readInt32(z);
            this.unread_count = abstractSerializedData.readInt32(z);
            abstractSerializedData.readInt32(z);
            this.chat_photo = Photo.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
            this.notify_settings = PeerNotifySettings.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
            this.exported_invite = ExportedChatInvite.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
            int readInt32 = abstractSerializedData.readInt32(z);
            if (readInt32 == 481674261) {
                readInt32 = abstractSerializedData.readInt32(z);
                while (i < readInt32) {
                    BotInfo TLdeserialize = BotInfo.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
                    if (TLdeserialize != null) {
                        this.bot_info.add(TLdeserialize);
                        i += TLRPC.USER_FLAG_ACCESS_HASH;
                    } else {
                        return;
                    }
                }
                if ((this.flags & TLRPC.USER_FLAG_PHONE) != 0) {
                    this.migrated_from_chat_id = abstractSerializedData.readInt32(z);
                }
                if ((this.flags & TLRPC.USER_FLAG_PHONE) != 0) {
                    this.migrated_from_max_id = abstractSerializedData.readInt32(z);
                }
            } else if (z) {
                Object[] objArr = new Object[TLRPC.USER_FLAG_ACCESS_HASH];
                objArr[0] = Integer.valueOf(readInt32);
                throw new RuntimeException(String.format("wrong Vector magic, got %x", objArr));
            }
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            int i = 0;
            abstractSerializedData.writeInt32(constructor);
            this.flags = this.can_view_participants ? this.flags | TLRPC.USER_FLAG_USERNAME : this.flags & -9;
            abstractSerializedData.writeInt32(this.flags);
            abstractSerializedData.writeInt32(this.id);
            abstractSerializedData.writeString(this.about);
            if ((this.flags & TLRPC.USER_FLAG_ACCESS_HASH) != 0) {
                abstractSerializedData.writeInt32(this.participants_count);
            }
            if ((this.flags & TLRPC.USER_FLAG_FIRST_NAME) != 0) {
                abstractSerializedData.writeInt32(this.admins_count);
            }
            if ((this.flags & TLRPC.USER_FLAG_LAST_NAME) != 0) {
                abstractSerializedData.writeInt32(this.kicked_count);
            }
            abstractSerializedData.writeInt32(this.read_inbox_max_id);
            abstractSerializedData.writeInt32(this.unread_count);
            abstractSerializedData.writeInt32(0);
            this.chat_photo.serializeToStream(abstractSerializedData);
            this.notify_settings.serializeToStream(abstractSerializedData);
            this.exported_invite.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeInt32(481674261);
            int size = this.bot_info.size();
            abstractSerializedData.writeInt32(size);
            while (i < size) {
                ((BotInfo) this.bot_info.get(i)).serializeToStream(abstractSerializedData);
                i += TLRPC.USER_FLAG_ACCESS_HASH;
            }
            if ((this.flags & TLRPC.USER_FLAG_PHONE) != 0) {
                abstractSerializedData.writeInt32(this.migrated_from_chat_id);
            }
            if ((this.flags & TLRPC.USER_FLAG_PHONE) != 0) {
                abstractSerializedData.writeInt32(this.migrated_from_max_id);
            }
        }
    }

    public static class TL_channelFull_layer52 extends TL_channelFull {
        public static int constructor;

        static {
            constructor = -1749097118;
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            int i = 0;
            this.flags = abstractSerializedData.readInt32(z);
            this.can_view_participants = (this.flags & TLRPC.USER_FLAG_USERNAME) != 0;
            this.can_set_username = (this.flags & TLRPC.USER_FLAG_STATUS) != 0;
            this.id = abstractSerializedData.readInt32(z);
            this.about = abstractSerializedData.readString(z);
            if ((this.flags & TLRPC.USER_FLAG_ACCESS_HASH) != 0) {
                this.participants_count = abstractSerializedData.readInt32(z);
            }
            if ((this.flags & TLRPC.USER_FLAG_FIRST_NAME) != 0) {
                this.admins_count = abstractSerializedData.readInt32(z);
            }
            if ((this.flags & TLRPC.USER_FLAG_LAST_NAME) != 0) {
                this.kicked_count = abstractSerializedData.readInt32(z);
            }
            this.read_inbox_max_id = abstractSerializedData.readInt32(z);
            this.unread_count = abstractSerializedData.readInt32(z);
            abstractSerializedData.readInt32(z);
            this.chat_photo = Photo.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
            this.notify_settings = PeerNotifySettings.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
            this.exported_invite = ExportedChatInvite.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
            int readInt32 = abstractSerializedData.readInt32(z);
            if (readInt32 == 481674261) {
                readInt32 = abstractSerializedData.readInt32(z);
                while (i < readInt32) {
                    BotInfo TLdeserialize = BotInfo.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
                    if (TLdeserialize != null) {
                        this.bot_info.add(TLdeserialize);
                        i += TLRPC.USER_FLAG_ACCESS_HASH;
                    } else {
                        return;
                    }
                }
                if ((this.flags & TLRPC.USER_FLAG_PHONE) != 0) {
                    this.migrated_from_chat_id = abstractSerializedData.readInt32(z);
                }
                if ((this.flags & TLRPC.USER_FLAG_PHONE) != 0) {
                    this.migrated_from_max_id = abstractSerializedData.readInt32(z);
                }
                if ((this.flags & TLRPC.USER_FLAG_PHOTO) != 0) {
                    this.pinned_msg_id = abstractSerializedData.readInt32(z);
                }
            } else if (z) {
                Object[] objArr = new Object[TLRPC.USER_FLAG_ACCESS_HASH];
                objArr[0] = Integer.valueOf(readInt32);
                throw new RuntimeException(String.format("wrong Vector magic, got %x", objArr));
            }
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            int i = 0;
            abstractSerializedData.writeInt32(constructor);
            this.flags = this.can_view_participants ? this.flags | TLRPC.USER_FLAG_USERNAME : this.flags & -9;
            this.flags = this.can_set_username ? this.flags | TLRPC.USER_FLAG_STATUS : this.flags & -65;
            abstractSerializedData.writeInt32(this.flags);
            abstractSerializedData.writeInt32(this.id);
            abstractSerializedData.writeString(this.about);
            if ((this.flags & TLRPC.USER_FLAG_ACCESS_HASH) != 0) {
                abstractSerializedData.writeInt32(this.participants_count);
            }
            if ((this.flags & TLRPC.USER_FLAG_FIRST_NAME) != 0) {
                abstractSerializedData.writeInt32(this.admins_count);
            }
            if ((this.flags & TLRPC.USER_FLAG_LAST_NAME) != 0) {
                abstractSerializedData.writeInt32(this.kicked_count);
            }
            abstractSerializedData.writeInt32(this.read_inbox_max_id);
            abstractSerializedData.writeInt32(this.unread_count);
            abstractSerializedData.writeInt32(0);
            this.chat_photo.serializeToStream(abstractSerializedData);
            this.notify_settings.serializeToStream(abstractSerializedData);
            this.exported_invite.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeInt32(481674261);
            int size = this.bot_info.size();
            abstractSerializedData.writeInt32(size);
            while (i < size) {
                ((BotInfo) this.bot_info.get(i)).serializeToStream(abstractSerializedData);
                i += TLRPC.USER_FLAG_ACCESS_HASH;
            }
            if ((this.flags & TLRPC.USER_FLAG_PHONE) != 0) {
                abstractSerializedData.writeInt32(this.migrated_from_chat_id);
            }
            if ((this.flags & TLRPC.USER_FLAG_PHONE) != 0) {
                abstractSerializedData.writeInt32(this.migrated_from_max_id);
            }
            if ((this.flags & TLRPC.USER_FLAG_PHOTO) != 0) {
                abstractSerializedData.writeInt32(this.pinned_msg_id);
            }
        }
    }

    public static class TL_channelFull_old extends TL_channelFull {
        public static int constructor;

        static {
            constructor = -88925533;
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.flags = abstractSerializedData.readInt32(z);
            this.can_view_participants = (this.flags & TLRPC.USER_FLAG_USERNAME) != 0;
            this.id = abstractSerializedData.readInt32(z);
            this.about = abstractSerializedData.readString(z);
            if ((this.flags & TLRPC.USER_FLAG_ACCESS_HASH) != 0) {
                this.participants_count = abstractSerializedData.readInt32(z);
            }
            if ((this.flags & TLRPC.USER_FLAG_FIRST_NAME) != 0) {
                this.admins_count = abstractSerializedData.readInt32(z);
            }
            if ((this.flags & TLRPC.USER_FLAG_LAST_NAME) != 0) {
                this.kicked_count = abstractSerializedData.readInt32(z);
            }
            this.read_inbox_max_id = abstractSerializedData.readInt32(z);
            this.unread_count = abstractSerializedData.readInt32(z);
            abstractSerializedData.readInt32(z);
            this.chat_photo = Photo.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
            this.notify_settings = PeerNotifySettings.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
            this.exported_invite = ExportedChatInvite.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.flags = this.can_view_participants ? this.flags | TLRPC.USER_FLAG_USERNAME : this.flags & -9;
            abstractSerializedData.writeInt32(this.flags);
            abstractSerializedData.writeInt32(this.id);
            abstractSerializedData.writeString(this.about);
            if ((this.flags & TLRPC.USER_FLAG_ACCESS_HASH) != 0) {
                abstractSerializedData.writeInt32(this.participants_count);
            }
            if ((this.flags & TLRPC.USER_FLAG_FIRST_NAME) != 0) {
                abstractSerializedData.writeInt32(this.admins_count);
            }
            if ((this.flags & TLRPC.USER_FLAG_LAST_NAME) != 0) {
                abstractSerializedData.writeInt32(this.kicked_count);
            }
            abstractSerializedData.writeInt32(this.read_inbox_max_id);
            abstractSerializedData.writeInt32(this.unread_count);
            abstractSerializedData.writeInt32(0);
            this.chat_photo.serializeToStream(abstractSerializedData);
            this.notify_settings.serializeToStream(abstractSerializedData);
            this.exported_invite.serializeToStream(abstractSerializedData);
        }
    }

    public static class TL_channelMessagesFilter extends ChannelMessagesFilter {
        public static int constructor;

        static {
            constructor = -847783593;
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            int i = 0;
            this.flags = abstractSerializedData.readInt32(z);
            this.exclude_new_messages = (this.flags & TLRPC.USER_FLAG_FIRST_NAME) != 0;
            int readInt32 = abstractSerializedData.readInt32(z);
            if (readInt32 == 481674261) {
                readInt32 = abstractSerializedData.readInt32(z);
                while (i < readInt32) {
                    TL_messageRange TLdeserialize = TL_messageRange.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
                    if (TLdeserialize != null) {
                        this.ranges.add(TLdeserialize);
                        i += TLRPC.USER_FLAG_ACCESS_HASH;
                    } else {
                        return;
                    }
                }
            } else if (z) {
                Object[] objArr = new Object[TLRPC.USER_FLAG_ACCESS_HASH];
                objArr[0] = Integer.valueOf(readInt32);
                throw new RuntimeException(String.format("wrong Vector magic, got %x", objArr));
            }
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.flags = this.exclude_new_messages ? this.flags | TLRPC.USER_FLAG_FIRST_NAME : this.flags & -3;
            abstractSerializedData.writeInt32(this.flags);
            abstractSerializedData.writeInt32(481674261);
            int size = this.ranges.size();
            abstractSerializedData.writeInt32(size);
            for (int i = 0; i < size; i += TLRPC.USER_FLAG_ACCESS_HASH) {
                ((TL_messageRange) this.ranges.get(i)).serializeToStream(abstractSerializedData);
            }
        }
    }

    public static class TL_channelMessagesFilterEmpty extends ChannelMessagesFilter {
        public static int constructor;

        static {
            constructor = -1798033689;
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
        }
    }

    public static class TL_channelParticipant extends ChannelParticipant {
        public static int constructor;

        static {
            constructor = 367766557;
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.user_id = abstractSerializedData.readInt32(z);
            this.date = abstractSerializedData.readInt32(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.user_id);
            abstractSerializedData.writeInt32(this.date);
        }
    }

    public static class TL_channelParticipantCreator extends ChannelParticipant {
        public static int constructor;

        static {
            constructor = -471670279;
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.user_id = abstractSerializedData.readInt32(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.user_id);
        }
    }

    public static class TL_channelParticipantEditor extends ChannelParticipant {
        public static int constructor;

        static {
            constructor = -1743180447;
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.user_id = abstractSerializedData.readInt32(z);
            this.inviter_id = abstractSerializedData.readInt32(z);
            this.date = abstractSerializedData.readInt32(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.user_id);
            abstractSerializedData.writeInt32(this.inviter_id);
            abstractSerializedData.writeInt32(this.date);
        }
    }

    public static class TL_channelParticipantKicked extends ChannelParticipant {
        public static int constructor;

        static {
            constructor = -1933187430;
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.user_id = abstractSerializedData.readInt32(z);
            this.kicked_by = abstractSerializedData.readInt32(z);
            this.date = abstractSerializedData.readInt32(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.user_id);
            abstractSerializedData.writeInt32(this.kicked_by);
            abstractSerializedData.writeInt32(this.date);
        }
    }

    public static class TL_channelParticipantModerator extends ChannelParticipant {
        public static int constructor;

        static {
            constructor = -1861910545;
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.user_id = abstractSerializedData.readInt32(z);
            this.inviter_id = abstractSerializedData.readInt32(z);
            this.date = abstractSerializedData.readInt32(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.user_id);
            abstractSerializedData.writeInt32(this.inviter_id);
            abstractSerializedData.writeInt32(this.date);
        }
    }

    public static class TL_channelParticipantSelf extends ChannelParticipant {
        public static int constructor;

        static {
            constructor = -1557620115;
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.user_id = abstractSerializedData.readInt32(z);
            this.inviter_id = abstractSerializedData.readInt32(z);
            this.date = abstractSerializedData.readInt32(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.user_id);
            abstractSerializedData.writeInt32(this.inviter_id);
            abstractSerializedData.writeInt32(this.date);
        }
    }

    public static class TL_channelParticipantsAdmins extends ChannelParticipantsFilter {
        public static int constructor;

        static {
            constructor = -1268741783;
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
        }
    }

    public static class TL_channelParticipantsBots extends ChannelParticipantsFilter {
        public static int constructor;

        static {
            constructor = -1328445861;
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
        }
    }

    public static class TL_channelParticipantsKicked extends ChannelParticipantsFilter {
        public static int constructor;

        static {
            constructor = 1010285434;
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
        }
    }

    public static class TL_channelParticipantsRecent extends ChannelParticipantsFilter {
        public static int constructor;

        static {
            constructor = -566281095;
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
        }
    }

    public static class TL_channelRoleEditor extends ChannelParticipantRole {
        public static int constructor;

        static {
            constructor = -2113143156;
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
        }
    }

    public static class TL_channelRoleEmpty extends ChannelParticipantRole {
        public static int constructor;

        static {
            constructor = -1299865402;
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
        }
    }

    public static class TL_channelRoleModerator extends ChannelParticipantRole {
        public static int constructor;

        static {
            constructor = -1776756363;
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
        }
    }

    public static class TL_channel_layer48 extends TL_channel {
        public static int constructor;

        static {
            constructor = 1260090630;
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            boolean z2 = true;
            this.flags = abstractSerializedData.readInt32(z);
            this.creator = (this.flags & TLRPC.USER_FLAG_ACCESS_HASH) != 0;
            this.kicked = (this.flags & TLRPC.USER_FLAG_FIRST_NAME) != 0;
            this.left = (this.flags & TLRPC.USER_FLAG_LAST_NAME) != 0;
            this.editor = (this.flags & TLRPC.USER_FLAG_USERNAME) != 0;
            this.moderator = (this.flags & TLRPC.USER_FLAG_PHONE) != 0;
            this.broadcast = (this.flags & TLRPC.USER_FLAG_PHOTO) != 0;
            this.verified = (this.flags & TLRPC.USER_FLAG_UNUSED) != 0;
            this.megagroup = (this.flags & TLRPC.USER_FLAG_UNUSED2) != 0;
            this.restricted = (this.flags & TLRPC.USER_FLAG_UNUSED3) != 0;
            this.democracy = (this.flags & TLRPC.MESSAGE_FLAG_HAS_VIEWS) != 0;
            if ((this.flags & TLRPC.MESSAGE_FLAG_HAS_BOT_ID) == 0) {
                z2 = false;
            }
            this.signatures = z2;
            this.id = abstractSerializedData.readInt32(z);
            this.access_hash = abstractSerializedData.readInt64(z);
            this.title = abstractSerializedData.readString(z);
            if ((this.flags & TLRPC.USER_FLAG_STATUS) != 0) {
                this.username = abstractSerializedData.readString(z);
            }
            this.photo = ChatPhoto.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
            this.date = abstractSerializedData.readInt32(z);
            this.version = abstractSerializedData.readInt32(z);
            if ((this.flags & TLRPC.USER_FLAG_UNUSED3) != 0) {
                this.restriction_reason = abstractSerializedData.readString(z);
            }
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.flags = this.creator ? this.flags | TLRPC.USER_FLAG_ACCESS_HASH : this.flags & -2;
            this.flags = this.kicked ? this.flags | TLRPC.USER_FLAG_FIRST_NAME : this.flags & -3;
            this.flags = this.left ? this.flags | TLRPC.USER_FLAG_LAST_NAME : this.flags & -5;
            this.flags = this.editor ? this.flags | TLRPC.USER_FLAG_USERNAME : this.flags & -9;
            this.flags = this.moderator ? this.flags | TLRPC.USER_FLAG_PHONE : this.flags & -17;
            this.flags = this.broadcast ? this.flags | TLRPC.USER_FLAG_PHOTO : this.flags & -33;
            this.flags = this.verified ? this.flags | TLRPC.USER_FLAG_UNUSED : this.flags & -129;
            this.flags = this.megagroup ? this.flags | TLRPC.USER_FLAG_UNUSED2 : this.flags & -257;
            this.flags = this.restricted ? this.flags | TLRPC.USER_FLAG_UNUSED3 : this.flags & -513;
            this.flags = this.democracy ? this.flags | TLRPC.MESSAGE_FLAG_HAS_VIEWS : this.flags & -1025;
            this.flags = this.signatures ? this.flags | TLRPC.MESSAGE_FLAG_HAS_BOT_ID : this.flags & -2049;
            abstractSerializedData.writeInt32(this.flags);
            abstractSerializedData.writeInt32(this.id);
            abstractSerializedData.writeInt64(this.access_hash);
            abstractSerializedData.writeString(this.title);
            if ((this.flags & TLRPC.USER_FLAG_STATUS) != 0) {
                abstractSerializedData.writeString(this.username);
            }
            this.photo.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeInt32(this.date);
            abstractSerializedData.writeInt32(this.version);
            if ((this.flags & TLRPC.USER_FLAG_UNUSED3) != 0) {
                abstractSerializedData.writeString(this.restriction_reason);
            }
        }
    }

    public static class TL_channel_old extends TL_channel {
        public static int constructor;

        static {
            constructor = 1737397639;
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            boolean z2 = true;
            this.flags = abstractSerializedData.readInt32(z);
            this.creator = (this.flags & TLRPC.USER_FLAG_ACCESS_HASH) != 0;
            this.kicked = (this.flags & TLRPC.USER_FLAG_FIRST_NAME) != 0;
            this.left = (this.flags & TLRPC.USER_FLAG_LAST_NAME) != 0;
            this.editor = (this.flags & TLRPC.USER_FLAG_USERNAME) != 0;
            this.moderator = (this.flags & TLRPC.USER_FLAG_PHONE) != 0;
            this.broadcast = (this.flags & TLRPC.USER_FLAG_PHOTO) != 0;
            this.verified = (this.flags & TLRPC.USER_FLAG_UNUSED) != 0;
            this.megagroup = (this.flags & TLRPC.USER_FLAG_UNUSED2) != 0;
            if ((this.flags & TLRPC.USER_FLAG_UNUSED3) == 0) {
                z2 = false;
            }
            this.explicit_content = z2;
            this.id = abstractSerializedData.readInt32(z);
            this.access_hash = abstractSerializedData.readInt64(z);
            this.title = abstractSerializedData.readString(z);
            if ((this.flags & TLRPC.USER_FLAG_STATUS) != 0) {
                this.username = abstractSerializedData.readString(z);
            }
            this.photo = ChatPhoto.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
            this.date = abstractSerializedData.readInt32(z);
            this.version = abstractSerializedData.readInt32(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.flags = this.creator ? this.flags | TLRPC.USER_FLAG_ACCESS_HASH : this.flags & -2;
            this.flags = this.kicked ? this.flags | TLRPC.USER_FLAG_FIRST_NAME : this.flags & -3;
            this.flags = this.left ? this.flags | TLRPC.USER_FLAG_LAST_NAME : this.flags & -5;
            this.flags = this.editor ? this.flags | TLRPC.USER_FLAG_USERNAME : this.flags & -9;
            this.flags = this.moderator ? this.flags | TLRPC.USER_FLAG_PHONE : this.flags & -17;
            this.flags = this.broadcast ? this.flags | TLRPC.USER_FLAG_PHOTO : this.flags & -33;
            this.flags = this.verified ? this.flags | TLRPC.USER_FLAG_UNUSED : this.flags & -129;
            this.flags = this.megagroup ? this.flags | TLRPC.USER_FLAG_UNUSED2 : this.flags & -257;
            this.flags = this.explicit_content ? this.flags | TLRPC.USER_FLAG_UNUSED3 : this.flags & -513;
            abstractSerializedData.writeInt32(this.flags);
            abstractSerializedData.writeInt32(this.id);
            abstractSerializedData.writeInt64(this.access_hash);
            abstractSerializedData.writeString(this.title);
            if ((this.flags & TLRPC.USER_FLAG_STATUS) != 0) {
                abstractSerializedData.writeString(this.username);
            }
            this.photo.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeInt32(this.date);
            abstractSerializedData.writeInt32(this.version);
        }
    }

    public static class TL_channels_channelParticipant extends TLObject {
        public static int constructor;
        public ChannelParticipant participant;
        public ArrayList<User> users;

        static {
            constructor = -791039645;
        }

        public TL_channels_channelParticipant() {
            this.users = new ArrayList();
        }

        public static TL_channels_channelParticipant TLdeserialize(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            if (constructor == i) {
                TL_channels_channelParticipant tL_channels_channelParticipant = new TL_channels_channelParticipant();
                tL_channels_channelParticipant.readParams(abstractSerializedData, z);
                return tL_channels_channelParticipant;
            } else if (!z) {
                return null;
            } else {
                Object[] objArr = new Object[TLRPC.USER_FLAG_ACCESS_HASH];
                objArr[0] = Integer.valueOf(i);
                throw new RuntimeException(String.format("can't parse magic %x in TL_channels_channelParticipant", objArr));
            }
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            int i = 0;
            this.participant = ChannelParticipant.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
            int readInt32 = abstractSerializedData.readInt32(z);
            if (readInt32 == 481674261) {
                readInt32 = abstractSerializedData.readInt32(z);
                while (i < readInt32) {
                    User TLdeserialize = User.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
                    if (TLdeserialize != null) {
                        this.users.add(TLdeserialize);
                        i += TLRPC.USER_FLAG_ACCESS_HASH;
                    } else {
                        return;
                    }
                }
            } else if (z) {
                Object[] objArr = new Object[TLRPC.USER_FLAG_ACCESS_HASH];
                objArr[0] = Integer.valueOf(readInt32);
                throw new RuntimeException(String.format("wrong Vector magic, got %x", objArr));
            }
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.participant.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeInt32(481674261);
            int size = this.users.size();
            abstractSerializedData.writeInt32(size);
            for (int i = 0; i < size; i += TLRPC.USER_FLAG_ACCESS_HASH) {
                ((User) this.users.get(i)).serializeToStream(abstractSerializedData);
            }
        }
    }

    public static class TL_channels_channelParticipants extends TLObject {
        public static int constructor;
        public int count;
        public ArrayList<ChannelParticipant> participants;
        public ArrayList<User> users;

        static {
            constructor = -177282392;
        }

        public TL_channels_channelParticipants() {
            this.participants = new ArrayList();
            this.users = new ArrayList();
        }

        public static TL_channels_channelParticipants TLdeserialize(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            if (constructor == i) {
                TL_channels_channelParticipants tL_channels_channelParticipants = new TL_channels_channelParticipants();
                tL_channels_channelParticipants.readParams(abstractSerializedData, z);
                return tL_channels_channelParticipants;
            } else if (!z) {
                return null;
            } else {
                Object[] objArr = new Object[TLRPC.USER_FLAG_ACCESS_HASH];
                objArr[0] = Integer.valueOf(i);
                throw new RuntimeException(String.format("can't parse magic %x in TL_channels_channelParticipants", objArr));
            }
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            int i = 0;
            this.count = abstractSerializedData.readInt32(z);
            int readInt32 = abstractSerializedData.readInt32(z);
            Object[] objArr;
            if (readInt32 == 481674261) {
                int readInt322 = abstractSerializedData.readInt32(z);
                readInt32 = 0;
                while (readInt32 < readInt322) {
                    ChannelParticipant TLdeserialize = ChannelParticipant.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
                    if (TLdeserialize != null) {
                        this.participants.add(TLdeserialize);
                        readInt32 += TLRPC.USER_FLAG_ACCESS_HASH;
                    } else {
                        return;
                    }
                }
                readInt32 = abstractSerializedData.readInt32(z);
                if (readInt32 == 481674261) {
                    readInt32 = abstractSerializedData.readInt32(z);
                    while (i < readInt32) {
                        User TLdeserialize2 = User.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
                        if (TLdeserialize2 != null) {
                            this.users.add(TLdeserialize2);
                            i += TLRPC.USER_FLAG_ACCESS_HASH;
                        } else {
                            return;
                        }
                    }
                } else if (z) {
                    objArr = new Object[TLRPC.USER_FLAG_ACCESS_HASH];
                    objArr[0] = Integer.valueOf(readInt32);
                    throw new RuntimeException(String.format("wrong Vector magic, got %x", objArr));
                }
            } else if (z) {
                objArr = new Object[TLRPC.USER_FLAG_ACCESS_HASH];
                objArr[0] = Integer.valueOf(readInt32);
                throw new RuntimeException(String.format("wrong Vector magic, got %x", objArr));
            }
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            int i;
            int i2 = 0;
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.count);
            abstractSerializedData.writeInt32(481674261);
            int size = this.participants.size();
            abstractSerializedData.writeInt32(size);
            for (i = 0; i < size; i += TLRPC.USER_FLAG_ACCESS_HASH) {
                ((ChannelParticipant) this.participants.get(i)).serializeToStream(abstractSerializedData);
            }
            abstractSerializedData.writeInt32(481674261);
            i = this.users.size();
            abstractSerializedData.writeInt32(i);
            while (i2 < i) {
                ((User) this.users.get(i2)).serializeToStream(abstractSerializedData);
                i2 += TLRPC.USER_FLAG_ACCESS_HASH;
            }
        }
    }

    public static class TL_channels_checkUsername extends TLObject {
        public static int constructor;
        public InputChannel channel;
        public String username;

        static {
            constructor = 283557164;
        }

        public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            return Bool.TLdeserialize(abstractSerializedData, i, z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.channel.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeString(this.username);
        }
    }

    public static class TL_channels_createChannel extends TLObject {
        public static int constructor;
        public String about;
        public boolean broadcast;
        public int flags;
        public boolean megagroup;
        public String title;

        static {
            constructor = -192332417;
        }

        public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            return Updates.TLdeserialize(abstractSerializedData, i, z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.flags = this.broadcast ? this.flags | TLRPC.USER_FLAG_ACCESS_HASH : this.flags & -2;
            this.flags = this.megagroup ? this.flags | TLRPC.USER_FLAG_FIRST_NAME : this.flags & -3;
            abstractSerializedData.writeInt32(this.flags);
            abstractSerializedData.writeString(this.title);
            abstractSerializedData.writeString(this.about);
        }
    }

    public static class TL_channels_deleteChannel extends TLObject {
        public static int constructor;
        public InputChannel channel;

        static {
            constructor = -1072619549;
        }

        public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            return Updates.TLdeserialize(abstractSerializedData, i, z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.channel.serializeToStream(abstractSerializedData);
        }
    }

    public static class TL_channels_deleteMessages extends TLObject {
        public static int constructor;
        public InputChannel channel;
        public ArrayList<Integer> id;

        static {
            constructor = -2067661490;
        }

        public TL_channels_deleteMessages() {
            this.id = new ArrayList();
        }

        public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            return TL_messages_affectedMessages.TLdeserialize(abstractSerializedData, i, z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.channel.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeInt32(481674261);
            int size = this.id.size();
            abstractSerializedData.writeInt32(size);
            for (int i = 0; i < size; i += TLRPC.USER_FLAG_ACCESS_HASH) {
                abstractSerializedData.writeInt32(((Integer) this.id.get(i)).intValue());
            }
        }
    }

    public static class TL_channels_deleteUserHistory extends TLObject {
        public static int constructor;
        public InputChannel channel;
        public InputUser user_id;

        static {
            constructor = -787622117;
        }

        public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            return TL_messages_affectedHistory.TLdeserialize(abstractSerializedData, i, z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.channel.serializeToStream(abstractSerializedData);
            this.user_id.serializeToStream(abstractSerializedData);
        }
    }

    public static class TL_channels_editAbout extends TLObject {
        public static int constructor;
        public String about;
        public InputChannel channel;

        static {
            constructor = 333610782;
        }

        public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            return Bool.TLdeserialize(abstractSerializedData, i, z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.channel.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeString(this.about);
        }
    }

    public static class TL_channels_editAdmin extends TLObject {
        public static int constructor;
        public InputChannel channel;
        public ChannelParticipantRole role;
        public InputUser user_id;

        static {
            constructor = -344583728;
        }

        public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            return Updates.TLdeserialize(abstractSerializedData, i, z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.channel.serializeToStream(abstractSerializedData);
            this.user_id.serializeToStream(abstractSerializedData);
            this.role.serializeToStream(abstractSerializedData);
        }
    }

    public static class TL_channels_editPhoto extends TLObject {
        public static int constructor;
        public InputChannel channel;
        public InputChatPhoto photo;

        static {
            constructor = -248621111;
        }

        public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            return Updates.TLdeserialize(abstractSerializedData, i, z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.channel.serializeToStream(abstractSerializedData);
            this.photo.serializeToStream(abstractSerializedData);
        }
    }

    public static class TL_channels_editTitle extends TLObject {
        public static int constructor;
        public InputChannel channel;
        public String title;

        static {
            constructor = 1450044624;
        }

        public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            return Updates.TLdeserialize(abstractSerializedData, i, z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.channel.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeString(this.title);
        }
    }

    public static class TL_channels_exportInvite extends TLObject {
        public static int constructor;
        public InputChannel channel;

        static {
            constructor = -950663035;
        }

        public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            return ExportedChatInvite.TLdeserialize(abstractSerializedData, i, z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.channel.serializeToStream(abstractSerializedData);
        }
    }

    public static class TL_channels_exportMessageLink extends TLObject {
        public static int constructor;
        public InputChannel channel;
        public int id;

        static {
            constructor = -934882771;
        }

        public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            return TL_exportedMessageLink.TLdeserialize(abstractSerializedData, i, z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.channel.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeInt32(this.id);
        }
    }

    public static class TL_channels_getAdminedPublicChannels extends TLObject {
        public static int constructor;

        static {
            constructor = -1920105769;
        }

        public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            return TL_messages_chats.TLdeserialize(abstractSerializedData, i, z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
        }
    }

    public static class TL_channels_getChannels extends TLObject {
        public static int constructor;
        public ArrayList<InputChannel> id;

        static {
            constructor = 176122811;
        }

        public TL_channels_getChannels() {
            this.id = new ArrayList();
        }

        public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            return TL_messages_chats.TLdeserialize(abstractSerializedData, i, z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(481674261);
            int size = this.id.size();
            abstractSerializedData.writeInt32(size);
            for (int i = 0; i < size; i += TLRPC.USER_FLAG_ACCESS_HASH) {
                ((InputChannel) this.id.get(i)).serializeToStream(abstractSerializedData);
            }
        }
    }

    public static class TL_channels_getFullChannel extends TLObject {
        public static int constructor;
        public InputChannel channel;

        static {
            constructor = 141781513;
        }

        public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            return TL_messages_chatFull.TLdeserialize(abstractSerializedData, i, z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.channel.serializeToStream(abstractSerializedData);
        }
    }

    public static class TL_channels_getMessages extends TLObject {
        public static int constructor;
        public InputChannel channel;
        public ArrayList<Integer> id;

        static {
            constructor = -1814580409;
        }

        public TL_channels_getMessages() {
            this.id = new ArrayList();
        }

        public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            return messages_Messages.TLdeserialize(abstractSerializedData, i, z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.channel.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeInt32(481674261);
            int size = this.id.size();
            abstractSerializedData.writeInt32(size);
            for (int i = 0; i < size; i += TLRPC.USER_FLAG_ACCESS_HASH) {
                abstractSerializedData.writeInt32(((Integer) this.id.get(i)).intValue());
            }
        }
    }

    public static class TL_channels_getParticipant extends TLObject {
        public static int constructor;
        public InputChannel channel;
        public InputUser user_id;

        static {
            constructor = 1416484774;
        }

        public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            return TL_channels_channelParticipant.TLdeserialize(abstractSerializedData, i, z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.channel.serializeToStream(abstractSerializedData);
            this.user_id.serializeToStream(abstractSerializedData);
        }
    }

    public static class TL_channels_getParticipants extends TLObject {
        public static int constructor;
        public InputChannel channel;
        public ChannelParticipantsFilter filter;
        public int limit;
        public int offset;

        static {
            constructor = 618237842;
        }

        public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            return TL_channels_channelParticipants.TLdeserialize(abstractSerializedData, i, z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.channel.serializeToStream(abstractSerializedData);
            this.filter.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeInt32(this.offset);
            abstractSerializedData.writeInt32(this.limit);
        }
    }

    public static class TL_channels_inviteToChannel extends TLObject {
        public static int constructor;
        public InputChannel channel;
        public ArrayList<InputUser> users;

        static {
            constructor = 429865580;
        }

        public TL_channels_inviteToChannel() {
            this.users = new ArrayList();
        }

        public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            return Updates.TLdeserialize(abstractSerializedData, i, z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.channel.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeInt32(481674261);
            int size = this.users.size();
            abstractSerializedData.writeInt32(size);
            for (int i = 0; i < size; i += TLRPC.USER_FLAG_ACCESS_HASH) {
                ((InputUser) this.users.get(i)).serializeToStream(abstractSerializedData);
            }
        }
    }

    public static class TL_channels_joinChannel extends TLObject {
        public static int constructor;
        public InputChannel channel;

        static {
            constructor = 615851205;
        }

        public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            return Updates.TLdeserialize(abstractSerializedData, i, z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.channel.serializeToStream(abstractSerializedData);
        }
    }

    public static class TL_channels_kickFromChannel extends TLObject {
        public static int constructor;
        public InputChannel channel;
        public boolean kicked;
        public InputUser user_id;

        static {
            constructor = -1502421484;
        }

        public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            return Updates.TLdeserialize(abstractSerializedData, i, z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.channel.serializeToStream(abstractSerializedData);
            this.user_id.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeBool(this.kicked);
        }
    }

    public static class TL_channels_leaveChannel extends TLObject {
        public static int constructor;
        public InputChannel channel;

        static {
            constructor = -130635115;
        }

        public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            return Updates.TLdeserialize(abstractSerializedData, i, z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.channel.serializeToStream(abstractSerializedData);
        }
    }

    public static class TL_channels_readHistory extends TLObject {
        public static int constructor;
        public InputChannel channel;
        public int max_id;

        static {
            constructor = -871347913;
        }

        public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            return Bool.TLdeserialize(abstractSerializedData, i, z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.channel.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeInt32(this.max_id);
        }
    }

    public static class TL_channels_reportSpam extends TLObject {
        public static int constructor;
        public InputChannel channel;
        public ArrayList<Integer> id;
        public InputUser user_id;

        static {
            constructor = -32999408;
        }

        public TL_channels_reportSpam() {
            this.id = new ArrayList();
        }

        public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            return Bool.TLdeserialize(abstractSerializedData, i, z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.channel.serializeToStream(abstractSerializedData);
            this.user_id.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeInt32(481674261);
            int size = this.id.size();
            abstractSerializedData.writeInt32(size);
            for (int i = 0; i < size; i += TLRPC.USER_FLAG_ACCESS_HASH) {
                abstractSerializedData.writeInt32(((Integer) this.id.get(i)).intValue());
            }
        }
    }

    public static class TL_channels_toggleInvites extends TLObject {
        public static int constructor;
        public InputChannel channel;
        public boolean enabled;

        static {
            constructor = 1231065863;
        }

        public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            return Updates.TLdeserialize(abstractSerializedData, i, z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.channel.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeBool(this.enabled);
        }
    }

    public static class TL_channels_toggleSignatures extends TLObject {
        public static int constructor;
        public InputChannel channel;
        public boolean enabled;

        static {
            constructor = 527021574;
        }

        public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            return Updates.TLdeserialize(abstractSerializedData, i, z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.channel.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeBool(this.enabled);
        }
    }

    public static class TL_channels_updatePinnedMessage extends TLObject {
        public static int constructor;
        public InputChannel channel;
        public int flags;
        public int id;
        public boolean silent;

        static {
            constructor = -1490162350;
        }

        public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            return Updates.TLdeserialize(abstractSerializedData, i, z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.flags = this.silent ? this.flags | TLRPC.USER_FLAG_ACCESS_HASH : this.flags & -2;
            abstractSerializedData.writeInt32(this.flags);
            this.channel.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeInt32(this.id);
        }
    }

    public static class TL_channels_updateUsername extends TLObject {
        public static int constructor;
        public InputChannel channel;
        public String username;

        static {
            constructor = 890549214;
        }

        public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            return Bool.TLdeserialize(abstractSerializedData, i, z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.channel.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeString(this.username);
        }
    }

    public static class TL_chat extends Chat {
        public static int constructor;

        static {
            constructor = -652419756;
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            boolean z2 = true;
            this.flags = abstractSerializedData.readInt32(z);
            this.creator = (this.flags & TLRPC.USER_FLAG_ACCESS_HASH) != 0;
            this.kicked = (this.flags & TLRPC.USER_FLAG_FIRST_NAME) != 0;
            this.left = (this.flags & TLRPC.USER_FLAG_LAST_NAME) != 0;
            this.admins_enabled = (this.flags & TLRPC.USER_FLAG_USERNAME) != 0;
            this.admin = (this.flags & TLRPC.USER_FLAG_PHONE) != 0;
            if ((this.flags & TLRPC.USER_FLAG_PHOTO) == 0) {
                z2 = false;
            }
            this.deactivated = z2;
            this.id = abstractSerializedData.readInt32(z);
            this.title = abstractSerializedData.readString(z);
            this.photo = ChatPhoto.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
            this.participants_count = abstractSerializedData.readInt32(z);
            this.date = abstractSerializedData.readInt32(z);
            this.version = abstractSerializedData.readInt32(z);
            if ((this.flags & TLRPC.USER_FLAG_STATUS) != 0) {
                this.migrated_to = InputChannel.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
            }
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.flags = this.creator ? this.flags | TLRPC.USER_FLAG_ACCESS_HASH : this.flags & -2;
            this.flags = this.kicked ? this.flags | TLRPC.USER_FLAG_FIRST_NAME : this.flags & -3;
            this.flags = this.left ? this.flags | TLRPC.USER_FLAG_LAST_NAME : this.flags & -5;
            this.flags = this.admins_enabled ? this.flags | TLRPC.USER_FLAG_USERNAME : this.flags & -9;
            this.flags = this.admin ? this.flags | TLRPC.USER_FLAG_PHONE : this.flags & -17;
            this.flags = this.deactivated ? this.flags | TLRPC.USER_FLAG_PHOTO : this.flags & -33;
            abstractSerializedData.writeInt32(this.flags);
            abstractSerializedData.writeInt32(this.id);
            abstractSerializedData.writeString(this.title);
            this.photo.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeInt32(this.participants_count);
            abstractSerializedData.writeInt32(this.date);
            abstractSerializedData.writeInt32(this.version);
            if ((this.flags & TLRPC.USER_FLAG_STATUS) != 0) {
                this.migrated_to.serializeToStream(abstractSerializedData);
            }
        }
    }

    public static class TL_chatChannelParticipant extends ChatParticipant {
        public static int constructor;
        public ChannelParticipant channelParticipant;

        static {
            constructor = -925415106;
        }
    }

    public static class TL_chatEmpty extends Chat {
        public static int constructor;

        static {
            constructor = -1683826688;
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.id = abstractSerializedData.readInt32(z);
            this.title = "DELETED";
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.id);
        }
    }

    public static class TL_chatForbidden extends Chat {
        public static int constructor;

        static {
            constructor = 120753115;
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.id = abstractSerializedData.readInt32(z);
            this.title = abstractSerializedData.readString(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.id);
            abstractSerializedData.writeString(this.title);
        }
    }

    public static class TL_chatForbidden_old extends TL_chatForbidden {
        public static int constructor;

        static {
            constructor = -83047359;
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.id = abstractSerializedData.readInt32(z);
            this.title = abstractSerializedData.readString(z);
            this.date = abstractSerializedData.readInt32(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.id);
            abstractSerializedData.writeString(this.title);
            abstractSerializedData.writeInt32(this.date);
        }
    }

    public static class TL_chatFull extends ChatFull {
        public static int constructor;

        static {
            constructor = 771925524;
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            int i = 0;
            this.id = abstractSerializedData.readInt32(z);
            this.participants = ChatParticipants.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
            this.chat_photo = Photo.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
            this.notify_settings = PeerNotifySettings.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
            this.exported_invite = ExportedChatInvite.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
            int readInt32 = abstractSerializedData.readInt32(z);
            if (readInt32 == 481674261) {
                readInt32 = abstractSerializedData.readInt32(z);
                while (i < readInt32) {
                    BotInfo TLdeserialize = BotInfo.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
                    if (TLdeserialize != null) {
                        this.bot_info.add(TLdeserialize);
                        i += TLRPC.USER_FLAG_ACCESS_HASH;
                    } else {
                        return;
                    }
                }
            } else if (z) {
                Object[] objArr = new Object[TLRPC.USER_FLAG_ACCESS_HASH];
                objArr[0] = Integer.valueOf(readInt32);
                throw new RuntimeException(String.format("wrong Vector magic, got %x", objArr));
            }
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.id);
            this.participants.serializeToStream(abstractSerializedData);
            this.chat_photo.serializeToStream(abstractSerializedData);
            this.notify_settings.serializeToStream(abstractSerializedData);
            this.exported_invite.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeInt32(481674261);
            int size = this.bot_info.size();
            abstractSerializedData.writeInt32(size);
            for (int i = 0; i < size; i += TLRPC.USER_FLAG_ACCESS_HASH) {
                ((BotInfo) this.bot_info.get(i)).serializeToStream(abstractSerializedData);
            }
        }
    }

    public static class TL_chatInvite extends ChatInvite {
        public static int constructor;

        static {
            constructor = -613092008;
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            int i = 0;
            this.flags = abstractSerializedData.readInt32(z);
            this.channel = (this.flags & TLRPC.USER_FLAG_ACCESS_HASH) != 0;
            this.broadcast = (this.flags & TLRPC.USER_FLAG_FIRST_NAME) != 0;
            this.isPublic = (this.flags & TLRPC.USER_FLAG_LAST_NAME) != 0;
            this.megagroup = (this.flags & TLRPC.USER_FLAG_USERNAME) != 0;
            this.title = abstractSerializedData.readString(z);
            this.photo = ChatPhoto.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
            this.participants_count = abstractSerializedData.readInt32(z);
            if ((this.flags & TLRPC.USER_FLAG_PHONE) != 0) {
                int readInt32 = abstractSerializedData.readInt32(z);
                if (readInt32 == 481674261) {
                    readInt32 = abstractSerializedData.readInt32(z);
                    while (i < readInt32) {
                        User TLdeserialize = User.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
                        if (TLdeserialize != null) {
                            this.participants.add(TLdeserialize);
                            i += TLRPC.USER_FLAG_ACCESS_HASH;
                        } else {
                            return;
                        }
                    }
                } else if (z) {
                    Object[] objArr = new Object[TLRPC.USER_FLAG_ACCESS_HASH];
                    objArr[0] = Integer.valueOf(readInt32);
                    throw new RuntimeException(String.format("wrong Vector magic, got %x", objArr));
                }
            }
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.flags = this.channel ? this.flags | TLRPC.USER_FLAG_ACCESS_HASH : this.flags & -2;
            this.flags = this.broadcast ? this.flags | TLRPC.USER_FLAG_FIRST_NAME : this.flags & -3;
            this.flags = this.isPublic ? this.flags | TLRPC.USER_FLAG_LAST_NAME : this.flags & -5;
            this.flags = this.megagroup ? this.flags | TLRPC.USER_FLAG_USERNAME : this.flags & -9;
            abstractSerializedData.writeInt32(this.flags);
            abstractSerializedData.writeString(this.title);
            this.photo.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeInt32(this.participants_count);
            if ((this.flags & TLRPC.USER_FLAG_PHONE) != 0) {
                abstractSerializedData.writeInt32(481674261);
                int size = this.participants.size();
                abstractSerializedData.writeInt32(size);
                for (int i = 0; i < size; i += TLRPC.USER_FLAG_ACCESS_HASH) {
                    ((User) this.participants.get(i)).serializeToStream(abstractSerializedData);
                }
            }
        }
    }

    public static class TL_chatInviteAlready extends ChatInvite {
        public static int constructor;

        static {
            constructor = 1516793212;
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.chat = Chat.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.chat.serializeToStream(abstractSerializedData);
        }
    }

    public static class TL_chatInviteEmpty extends ExportedChatInvite {
        public static int constructor;

        static {
            constructor = 1776236393;
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
        }
    }

    public static class TL_chatInviteExported extends ExportedChatInvite {
        public static int constructor;

        static {
            constructor = -64092740;
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.link = abstractSerializedData.readString(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeString(this.link);
        }
    }

    public static class TL_chatLocated extends TLObject {
        public static int constructor;
        public int chat_id;
        public int distance;

        static {
            constructor = 909233996;
        }

        public static TL_chatLocated TLdeserialize(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            if (constructor == i) {
                TL_chatLocated tL_chatLocated = new TL_chatLocated();
                tL_chatLocated.readParams(abstractSerializedData, z);
                return tL_chatLocated;
            } else if (!z) {
                return null;
            } else {
                Object[] objArr = new Object[TLRPC.USER_FLAG_ACCESS_HASH];
                objArr[0] = Integer.valueOf(i);
                throw new RuntimeException(String.format("can't parse magic %x in TL_chatLocated", objArr));
            }
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.chat_id = abstractSerializedData.readInt32(z);
            this.distance = abstractSerializedData.readInt32(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.chat_id);
            abstractSerializedData.writeInt32(this.distance);
        }
    }

    public static class TL_chatParticipant extends ChatParticipant {
        public static int constructor;

        static {
            constructor = -925415106;
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.user_id = abstractSerializedData.readInt32(z);
            this.inviter_id = abstractSerializedData.readInt32(z);
            this.date = abstractSerializedData.readInt32(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.user_id);
            abstractSerializedData.writeInt32(this.inviter_id);
            abstractSerializedData.writeInt32(this.date);
        }
    }

    public static class TL_chatParticipantAdmin extends ChatParticipant {
        public static int constructor;

        static {
            constructor = -489233354;
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.user_id = abstractSerializedData.readInt32(z);
            this.inviter_id = abstractSerializedData.readInt32(z);
            this.date = abstractSerializedData.readInt32(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.user_id);
            abstractSerializedData.writeInt32(this.inviter_id);
            abstractSerializedData.writeInt32(this.date);
        }
    }

    public static class TL_chatParticipantCreator extends ChatParticipant {
        public static int constructor;

        static {
            constructor = -636267638;
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.user_id = abstractSerializedData.readInt32(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.user_id);
        }
    }

    public static class TL_chatParticipants extends ChatParticipants {
        public static int constructor;

        static {
            constructor = 1061556205;
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            int i = 0;
            this.chat_id = abstractSerializedData.readInt32(z);
            int readInt32 = abstractSerializedData.readInt32(z);
            if (readInt32 == 481674261) {
                readInt32 = abstractSerializedData.readInt32(z);
                while (i < readInt32) {
                    ChatParticipant TLdeserialize = ChatParticipant.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
                    if (TLdeserialize != null) {
                        this.participants.add(TLdeserialize);
                        i += TLRPC.USER_FLAG_ACCESS_HASH;
                    } else {
                        return;
                    }
                }
                this.version = abstractSerializedData.readInt32(z);
            } else if (z) {
                Object[] objArr = new Object[TLRPC.USER_FLAG_ACCESS_HASH];
                objArr[0] = Integer.valueOf(readInt32);
                throw new RuntimeException(String.format("wrong Vector magic, got %x", objArr));
            }
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.chat_id);
            abstractSerializedData.writeInt32(481674261);
            int size = this.participants.size();
            abstractSerializedData.writeInt32(size);
            for (int i = 0; i < size; i += TLRPC.USER_FLAG_ACCESS_HASH) {
                ((ChatParticipant) this.participants.get(i)).serializeToStream(abstractSerializedData);
            }
            abstractSerializedData.writeInt32(this.version);
        }
    }

    public static class TL_chatParticipantsForbidden extends ChatParticipants {
        public static int constructor;

        static {
            constructor = -57668565;
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.flags = abstractSerializedData.readInt32(z);
            this.chat_id = abstractSerializedData.readInt32(z);
            if ((this.flags & TLRPC.USER_FLAG_ACCESS_HASH) != 0) {
                this.self_participant = ChatParticipant.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
            }
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.flags);
            abstractSerializedData.writeInt32(this.chat_id);
            if ((this.flags & TLRPC.USER_FLAG_ACCESS_HASH) != 0) {
                this.self_participant.serializeToStream(abstractSerializedData);
            }
        }
    }

    public static class TL_chatParticipantsForbidden_old extends TL_chatParticipantsForbidden {
        public static int constructor;

        static {
            constructor = 265468810;
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.chat_id = abstractSerializedData.readInt32(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.chat_id);
        }
    }

    public static class TL_chatParticipants_old extends TL_chatParticipants {
        public static int constructor;

        static {
            constructor = 2017571861;
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            int i = 0;
            this.chat_id = abstractSerializedData.readInt32(z);
            this.admin_id = abstractSerializedData.readInt32(z);
            int readInt32 = abstractSerializedData.readInt32(z);
            if (readInt32 == 481674261) {
                readInt32 = abstractSerializedData.readInt32(z);
                while (i < readInt32) {
                    ChatParticipant TLdeserialize = ChatParticipant.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
                    if (TLdeserialize != null) {
                        this.participants.add(TLdeserialize);
                        i += TLRPC.USER_FLAG_ACCESS_HASH;
                    } else {
                        return;
                    }
                }
                this.version = abstractSerializedData.readInt32(z);
            } else if (z) {
                Object[] objArr = new Object[TLRPC.USER_FLAG_ACCESS_HASH];
                objArr[0] = Integer.valueOf(readInt32);
                throw new RuntimeException(String.format("wrong Vector magic, got %x", objArr));
            }
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.chat_id);
            abstractSerializedData.writeInt32(this.admin_id);
            abstractSerializedData.writeInt32(481674261);
            int size = this.participants.size();
            abstractSerializedData.writeInt32(size);
            for (int i = 0; i < size; i += TLRPC.USER_FLAG_ACCESS_HASH) {
                ((ChatParticipant) this.participants.get(i)).serializeToStream(abstractSerializedData);
            }
            abstractSerializedData.writeInt32(this.version);
        }
    }

    public static class TL_chatPhoto extends ChatPhoto {
        public static int constructor;

        static {
            constructor = 1632839530;
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.photo_small = FileLocation.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
            this.photo_big = FileLocation.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.photo_small.serializeToStream(abstractSerializedData);
            this.photo_big.serializeToStream(abstractSerializedData);
        }
    }

    public static class TL_chatPhotoEmpty extends ChatPhoto {
        public static int constructor;

        static {
            constructor = 935395612;
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
        }
    }

    public static class TL_chat_old2 extends TL_chat {
        public static int constructor;

        static {
            constructor = 1930607688;
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            boolean z2 = true;
            this.flags = abstractSerializedData.readInt32(z);
            this.creator = (this.flags & TLRPC.USER_FLAG_ACCESS_HASH) != 0;
            this.kicked = (this.flags & TLRPC.USER_FLAG_FIRST_NAME) != 0;
            this.left = (this.flags & TLRPC.USER_FLAG_LAST_NAME) != 0;
            this.admins_enabled = (this.flags & TLRPC.USER_FLAG_USERNAME) != 0;
            this.admin = (this.flags & TLRPC.USER_FLAG_PHONE) != 0;
            if ((this.flags & TLRPC.USER_FLAG_PHOTO) == 0) {
                z2 = false;
            }
            this.deactivated = z2;
            this.id = abstractSerializedData.readInt32(z);
            this.title = abstractSerializedData.readString(z);
            this.photo = ChatPhoto.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
            this.participants_count = abstractSerializedData.readInt32(z);
            this.date = abstractSerializedData.readInt32(z);
            this.version = abstractSerializedData.readInt32(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.flags = this.creator ? this.flags | TLRPC.USER_FLAG_ACCESS_HASH : this.flags & -2;
            this.flags = this.kicked ? this.flags | TLRPC.USER_FLAG_FIRST_NAME : this.flags & -3;
            this.flags = this.left ? this.flags | TLRPC.USER_FLAG_LAST_NAME : this.flags & -5;
            this.flags = this.admins_enabled ? this.flags | TLRPC.USER_FLAG_USERNAME : this.flags & -9;
            this.flags = this.admin ? this.flags | TLRPC.USER_FLAG_PHONE : this.flags & -17;
            this.flags = this.deactivated ? this.flags | TLRPC.USER_FLAG_PHOTO : this.flags & -33;
            abstractSerializedData.writeInt32(this.flags);
            abstractSerializedData.writeInt32(this.id);
            abstractSerializedData.writeString(this.title);
            this.photo.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeInt32(this.participants_count);
            abstractSerializedData.writeInt32(this.date);
            abstractSerializedData.writeInt32(this.version);
        }
    }

    public static class TL_chat_old extends TL_chat {
        public static int constructor;

        static {
            constructor = 1855757255;
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.id = abstractSerializedData.readInt32(z);
            this.title = abstractSerializedData.readString(z);
            this.photo = ChatPhoto.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
            this.participants_count = abstractSerializedData.readInt32(z);
            this.date = abstractSerializedData.readInt32(z);
            this.left = abstractSerializedData.readBool(z);
            this.version = abstractSerializedData.readInt32(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.id);
            abstractSerializedData.writeString(this.title);
            this.photo.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeInt32(this.participants_count);
            abstractSerializedData.writeInt32(this.date);
            abstractSerializedData.writeBool(this.left);
            abstractSerializedData.writeInt32(this.version);
        }
    }

    public static class TL_config extends TLObject {
        public static int constructor;
        public int chat_big_size;
        public int chat_size_max;
        public int date;
        public ArrayList<TL_dcOption> dc_options;
        public ArrayList<TL_disabledFeature> disabled_features;
        public int edit_time_limit;
        public int expires;
        public int flags;
        public int forwarded_count_max;
        public int megagroup_size_max;
        public int notify_cloud_delay_ms;
        public int notify_default_delay_ms;
        public int offline_blur_timeout_ms;
        public int offline_idle_timeout_ms;
        public int online_cloud_timeout_ms;
        public int online_update_period_ms;
        public int push_chat_limit;
        public int push_chat_period_ms;
        public int rating_e_decay;
        public int saved_gifs_limit;
        public int stickers_recent_limit;
        public boolean test_mode;
        public int this_dc;
        public int tmp_sessions;

        static {
            constructor = -1704251862;
        }

        public TL_config() {
            this.dc_options = new ArrayList();
            this.disabled_features = new ArrayList();
        }

        public static TL_config TLdeserialize(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            if (constructor == i) {
                TL_config tL_config = new TL_config();
                tL_config.readParams(abstractSerializedData, z);
                return tL_config;
            } else if (!z) {
                return null;
            } else {
                Object[] objArr = new Object[TLRPC.USER_FLAG_ACCESS_HASH];
                objArr[0] = Integer.valueOf(i);
                throw new RuntimeException(String.format("can't parse magic %x in TL_config", objArr));
            }
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            int i = 0;
            this.flags = abstractSerializedData.readInt32(z);
            this.date = abstractSerializedData.readInt32(z);
            this.expires = abstractSerializedData.readInt32(z);
            this.test_mode = abstractSerializedData.readBool(z);
            this.this_dc = abstractSerializedData.readInt32(z);
            int readInt32 = abstractSerializedData.readInt32(z);
            Object[] objArr;
            if (readInt32 == 481674261) {
                int readInt322 = abstractSerializedData.readInt32(z);
                readInt32 = 0;
                while (readInt32 < readInt322) {
                    TL_dcOption TLdeserialize = TL_dcOption.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
                    if (TLdeserialize != null) {
                        this.dc_options.add(TLdeserialize);
                        readInt32 += TLRPC.USER_FLAG_ACCESS_HASH;
                    } else {
                        return;
                    }
                }
                this.chat_size_max = abstractSerializedData.readInt32(z);
                this.megagroup_size_max = abstractSerializedData.readInt32(z);
                this.forwarded_count_max = abstractSerializedData.readInt32(z);
                this.online_update_period_ms = abstractSerializedData.readInt32(z);
                this.offline_blur_timeout_ms = abstractSerializedData.readInt32(z);
                this.offline_idle_timeout_ms = abstractSerializedData.readInt32(z);
                this.online_cloud_timeout_ms = abstractSerializedData.readInt32(z);
                this.notify_cloud_delay_ms = abstractSerializedData.readInt32(z);
                this.notify_default_delay_ms = abstractSerializedData.readInt32(z);
                this.chat_big_size = abstractSerializedData.readInt32(z);
                this.push_chat_period_ms = abstractSerializedData.readInt32(z);
                this.push_chat_limit = abstractSerializedData.readInt32(z);
                this.saved_gifs_limit = abstractSerializedData.readInt32(z);
                this.edit_time_limit = abstractSerializedData.readInt32(z);
                this.rating_e_decay = abstractSerializedData.readInt32(z);
                this.stickers_recent_limit = abstractSerializedData.readInt32(z);
                if ((this.flags & TLRPC.USER_FLAG_ACCESS_HASH) != 0) {
                    this.tmp_sessions = abstractSerializedData.readInt32(z);
                }
                readInt32 = abstractSerializedData.readInt32(z);
                if (readInt32 == 481674261) {
                    readInt32 = abstractSerializedData.readInt32(z);
                    while (i < readInt32) {
                        TL_disabledFeature TLdeserialize2 = TL_disabledFeature.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
                        if (TLdeserialize2 != null) {
                            this.disabled_features.add(TLdeserialize2);
                            i += TLRPC.USER_FLAG_ACCESS_HASH;
                        } else {
                            return;
                        }
                    }
                } else if (z) {
                    objArr = new Object[TLRPC.USER_FLAG_ACCESS_HASH];
                    objArr[0] = Integer.valueOf(readInt32);
                    throw new RuntimeException(String.format("wrong Vector magic, got %x", objArr));
                }
            } else if (z) {
                objArr = new Object[TLRPC.USER_FLAG_ACCESS_HASH];
                objArr[0] = Integer.valueOf(readInt32);
                throw new RuntimeException(String.format("wrong Vector magic, got %x", objArr));
            }
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            int i;
            int i2 = 0;
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.flags);
            abstractSerializedData.writeInt32(this.date);
            abstractSerializedData.writeInt32(this.expires);
            abstractSerializedData.writeBool(this.test_mode);
            abstractSerializedData.writeInt32(this.this_dc);
            abstractSerializedData.writeInt32(481674261);
            int size = this.dc_options.size();
            abstractSerializedData.writeInt32(size);
            for (i = 0; i < size; i += TLRPC.USER_FLAG_ACCESS_HASH) {
                ((TL_dcOption) this.dc_options.get(i)).serializeToStream(abstractSerializedData);
            }
            abstractSerializedData.writeInt32(this.chat_size_max);
            abstractSerializedData.writeInt32(this.megagroup_size_max);
            abstractSerializedData.writeInt32(this.forwarded_count_max);
            abstractSerializedData.writeInt32(this.online_update_period_ms);
            abstractSerializedData.writeInt32(this.offline_blur_timeout_ms);
            abstractSerializedData.writeInt32(this.offline_idle_timeout_ms);
            abstractSerializedData.writeInt32(this.online_cloud_timeout_ms);
            abstractSerializedData.writeInt32(this.notify_cloud_delay_ms);
            abstractSerializedData.writeInt32(this.notify_default_delay_ms);
            abstractSerializedData.writeInt32(this.chat_big_size);
            abstractSerializedData.writeInt32(this.push_chat_period_ms);
            abstractSerializedData.writeInt32(this.push_chat_limit);
            abstractSerializedData.writeInt32(this.saved_gifs_limit);
            abstractSerializedData.writeInt32(this.edit_time_limit);
            abstractSerializedData.writeInt32(this.rating_e_decay);
            abstractSerializedData.writeInt32(this.stickers_recent_limit);
            if ((this.flags & TLRPC.USER_FLAG_ACCESS_HASH) != 0) {
                abstractSerializedData.writeInt32(this.tmp_sessions);
            }
            abstractSerializedData.writeInt32(481674261);
            i = this.disabled_features.size();
            abstractSerializedData.writeInt32(i);
            while (i2 < i) {
                ((TL_disabledFeature) this.disabled_features.get(i2)).serializeToStream(abstractSerializedData);
                i2 += TLRPC.USER_FLAG_ACCESS_HASH;
            }
        }
    }

    public static class TL_contact extends TLObject {
        public static int constructor;
        public boolean mutual;
        public int user_id;

        static {
            constructor = -116274796;
        }

        public static TL_contact TLdeserialize(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            if (constructor == i) {
                TL_contact tL_contact = new TL_contact();
                tL_contact.readParams(abstractSerializedData, z);
                return tL_contact;
            } else if (!z) {
                return null;
            } else {
                Object[] objArr = new Object[TLRPC.USER_FLAG_ACCESS_HASH];
                objArr[0] = Integer.valueOf(i);
                throw new RuntimeException(String.format("can't parse magic %x in TL_contact", objArr));
            }
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.user_id = abstractSerializedData.readInt32(z);
            this.mutual = abstractSerializedData.readBool(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.user_id);
            abstractSerializedData.writeBool(this.mutual);
        }
    }

    public static class TL_contactBlocked extends TLObject {
        public static int constructor;
        public int date;
        public int user_id;

        static {
            constructor = 1444661369;
        }

        public static TL_contactBlocked TLdeserialize(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            if (constructor == i) {
                TL_contactBlocked tL_contactBlocked = new TL_contactBlocked();
                tL_contactBlocked.readParams(abstractSerializedData, z);
                return tL_contactBlocked;
            } else if (!z) {
                return null;
            } else {
                Object[] objArr = new Object[TLRPC.USER_FLAG_ACCESS_HASH];
                objArr[0] = Integer.valueOf(i);
                throw new RuntimeException(String.format("can't parse magic %x in TL_contactBlocked", objArr));
            }
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.user_id = abstractSerializedData.readInt32(z);
            this.date = abstractSerializedData.readInt32(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.user_id);
            abstractSerializedData.writeInt32(this.date);
        }
    }

    public static class TL_contactFound extends TLObject {
        public static int constructor;
        public int user_id;

        static {
            constructor = -360210539;
        }

        public static TL_contactFound TLdeserialize(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            if (constructor == i) {
                TL_contactFound tL_contactFound = new TL_contactFound();
                tL_contactFound.readParams(abstractSerializedData, z);
                return tL_contactFound;
            } else if (!z) {
                return null;
            } else {
                Object[] objArr = new Object[TLRPC.USER_FLAG_ACCESS_HASH];
                objArr[0] = Integer.valueOf(i);
                throw new RuntimeException(String.format("can't parse magic %x in TL_contactFound", objArr));
            }
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.user_id = abstractSerializedData.readInt32(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.user_id);
        }
    }

    public static class TL_contactLinkContact extends ContactLink {
        public static int constructor;

        static {
            constructor = -721239344;
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
        }
    }

    public static class TL_contactLinkHasPhone extends ContactLink {
        public static int constructor;

        static {
            constructor = 646922073;
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
        }
    }

    public static class TL_contactLinkNone extends ContactLink {
        public static int constructor;

        static {
            constructor = -17968211;
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
        }
    }

    public static class TL_contactLinkUnknown extends ContactLink {
        public static int constructor;

        static {
            constructor = 1599050311;
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
        }
    }

    public static class TL_contactStatus extends TLObject {
        public static int constructor;
        public UserStatus status;
        public int user_id;

        static {
            constructor = -748155807;
        }

        public static TL_contactStatus TLdeserialize(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            if (constructor == i) {
                TL_contactStatus tL_contactStatus = new TL_contactStatus();
                tL_contactStatus.readParams(abstractSerializedData, z);
                return tL_contactStatus;
            } else if (!z) {
                return null;
            } else {
                Object[] objArr = new Object[TLRPC.USER_FLAG_ACCESS_HASH];
                objArr[0] = Integer.valueOf(i);
                throw new RuntimeException(String.format("can't parse magic %x in TL_contactStatus", objArr));
            }
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.user_id = abstractSerializedData.readInt32(z);
            this.status = UserStatus.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.user_id);
            this.status.serializeToStream(abstractSerializedData);
        }
    }

    public static class TL_contacts_block extends TLObject {
        public static int constructor;
        public InputUser id;

        static {
            constructor = 858475004;
        }

        public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            return Bool.TLdeserialize(abstractSerializedData, i, z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.id.serializeToStream(abstractSerializedData);
        }
    }

    public static class contacts_Blocked extends TLObject {
        public ArrayList<TL_contactBlocked> blocked;
        public int count;
        public ArrayList<User> users;

        public contacts_Blocked() {
            this.blocked = new ArrayList();
            this.users = new ArrayList();
        }

        public static contacts_Blocked TLdeserialize(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            contacts_Blocked com_hanista_mobogram_tgnet_TLRPC_contacts_Blocked = null;
            switch (i) {
                case -1878523231:
                    com_hanista_mobogram_tgnet_TLRPC_contacts_Blocked = new TL_contacts_blockedSlice();
                    break;
                case 471043349:
                    com_hanista_mobogram_tgnet_TLRPC_contacts_Blocked = new TL_contacts_blocked();
                    break;
            }
            if (com_hanista_mobogram_tgnet_TLRPC_contacts_Blocked == null && z) {
                Object[] objArr = new Object[TLRPC.USER_FLAG_ACCESS_HASH];
                objArr[0] = Integer.valueOf(i);
                throw new RuntimeException(String.format("can't parse magic %x in contacts_Blocked", objArr));
            }
            if (com_hanista_mobogram_tgnet_TLRPC_contacts_Blocked != null) {
                com_hanista_mobogram_tgnet_TLRPC_contacts_Blocked.readParams(abstractSerializedData, z);
            }
            return com_hanista_mobogram_tgnet_TLRPC_contacts_Blocked;
        }
    }

    public static class TL_contacts_blocked extends contacts_Blocked {
        public static int constructor;

        static {
            constructor = 471043349;
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            int i = 0;
            int readInt32 = abstractSerializedData.readInt32(z);
            Object[] objArr;
            if (readInt32 == 481674261) {
                int readInt322 = abstractSerializedData.readInt32(z);
                readInt32 = 0;
                while (readInt32 < readInt322) {
                    TL_contactBlocked TLdeserialize = TL_contactBlocked.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
                    if (TLdeserialize != null) {
                        this.blocked.add(TLdeserialize);
                        readInt32 += TLRPC.USER_FLAG_ACCESS_HASH;
                    } else {
                        return;
                    }
                }
                readInt32 = abstractSerializedData.readInt32(z);
                if (readInt32 == 481674261) {
                    readInt32 = abstractSerializedData.readInt32(z);
                    while (i < readInt32) {
                        User TLdeserialize2 = User.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
                        if (TLdeserialize2 != null) {
                            this.users.add(TLdeserialize2);
                            i += TLRPC.USER_FLAG_ACCESS_HASH;
                        } else {
                            return;
                        }
                    }
                } else if (z) {
                    objArr = new Object[TLRPC.USER_FLAG_ACCESS_HASH];
                    objArr[0] = Integer.valueOf(readInt32);
                    throw new RuntimeException(String.format("wrong Vector magic, got %x", objArr));
                }
            } else if (z) {
                objArr = new Object[TLRPC.USER_FLAG_ACCESS_HASH];
                objArr[0] = Integer.valueOf(readInt32);
                throw new RuntimeException(String.format("wrong Vector magic, got %x", objArr));
            }
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            int i;
            int i2 = 0;
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(481674261);
            int size = this.blocked.size();
            abstractSerializedData.writeInt32(size);
            for (i = 0; i < size; i += TLRPC.USER_FLAG_ACCESS_HASH) {
                ((TL_contactBlocked) this.blocked.get(i)).serializeToStream(abstractSerializedData);
            }
            abstractSerializedData.writeInt32(481674261);
            i = this.users.size();
            abstractSerializedData.writeInt32(i);
            while (i2 < i) {
                ((User) this.users.get(i2)).serializeToStream(abstractSerializedData);
                i2 += TLRPC.USER_FLAG_ACCESS_HASH;
            }
        }
    }

    public static class TL_contacts_blockedSlice extends contacts_Blocked {
        public static int constructor;

        static {
            constructor = -1878523231;
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            int i = 0;
            this.count = abstractSerializedData.readInt32(z);
            int readInt32 = abstractSerializedData.readInt32(z);
            Object[] objArr;
            if (readInt32 == 481674261) {
                int readInt322 = abstractSerializedData.readInt32(z);
                readInt32 = 0;
                while (readInt32 < readInt322) {
                    TL_contactBlocked TLdeserialize = TL_contactBlocked.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
                    if (TLdeserialize != null) {
                        this.blocked.add(TLdeserialize);
                        readInt32 += TLRPC.USER_FLAG_ACCESS_HASH;
                    } else {
                        return;
                    }
                }
                readInt32 = abstractSerializedData.readInt32(z);
                if (readInt32 == 481674261) {
                    readInt32 = abstractSerializedData.readInt32(z);
                    while (i < readInt32) {
                        User TLdeserialize2 = User.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
                        if (TLdeserialize2 != null) {
                            this.users.add(TLdeserialize2);
                            i += TLRPC.USER_FLAG_ACCESS_HASH;
                        } else {
                            return;
                        }
                    }
                } else if (z) {
                    objArr = new Object[TLRPC.USER_FLAG_ACCESS_HASH];
                    objArr[0] = Integer.valueOf(readInt32);
                    throw new RuntimeException(String.format("wrong Vector magic, got %x", objArr));
                }
            } else if (z) {
                objArr = new Object[TLRPC.USER_FLAG_ACCESS_HASH];
                objArr[0] = Integer.valueOf(readInt32);
                throw new RuntimeException(String.format("wrong Vector magic, got %x", objArr));
            }
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            int i;
            int i2 = 0;
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.count);
            abstractSerializedData.writeInt32(481674261);
            int size = this.blocked.size();
            abstractSerializedData.writeInt32(size);
            for (i = 0; i < size; i += TLRPC.USER_FLAG_ACCESS_HASH) {
                ((TL_contactBlocked) this.blocked.get(i)).serializeToStream(abstractSerializedData);
            }
            abstractSerializedData.writeInt32(481674261);
            i = this.users.size();
            abstractSerializedData.writeInt32(i);
            while (i2 < i) {
                ((User) this.users.get(i2)).serializeToStream(abstractSerializedData);
                i2 += TLRPC.USER_FLAG_ACCESS_HASH;
            }
        }
    }

    public static class contacts_Contacts extends TLObject {
        public ArrayList<TL_contact> contacts;
        public ArrayList<User> users;

        public contacts_Contacts() {
            this.contacts = new ArrayList();
            this.users = new ArrayList();
        }

        public static contacts_Contacts TLdeserialize(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            contacts_Contacts com_hanista_mobogram_tgnet_TLRPC_contacts_Contacts = null;
            switch (i) {
                case -1219778094:
                    com_hanista_mobogram_tgnet_TLRPC_contacts_Contacts = new TL_contacts_contactsNotModified();
                    break;
                case 1871416498:
                    com_hanista_mobogram_tgnet_TLRPC_contacts_Contacts = new TL_contacts_contacts();
                    break;
            }
            if (com_hanista_mobogram_tgnet_TLRPC_contacts_Contacts == null && z) {
                Object[] objArr = new Object[TLRPC.USER_FLAG_ACCESS_HASH];
                objArr[0] = Integer.valueOf(i);
                throw new RuntimeException(String.format("can't parse magic %x in contacts_Contacts", objArr));
            }
            if (com_hanista_mobogram_tgnet_TLRPC_contacts_Contacts != null) {
                com_hanista_mobogram_tgnet_TLRPC_contacts_Contacts.readParams(abstractSerializedData, z);
            }
            return com_hanista_mobogram_tgnet_TLRPC_contacts_Contacts;
        }
    }

    public static class TL_contacts_contacts extends contacts_Contacts {
        public static int constructor;

        static {
            constructor = 1871416498;
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            int i = 0;
            int readInt32 = abstractSerializedData.readInt32(z);
            Object[] objArr;
            if (readInt32 == 481674261) {
                int readInt322 = abstractSerializedData.readInt32(z);
                readInt32 = 0;
                while (readInt32 < readInt322) {
                    TL_contact TLdeserialize = TL_contact.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
                    if (TLdeserialize != null) {
                        this.contacts.add(TLdeserialize);
                        readInt32 += TLRPC.USER_FLAG_ACCESS_HASH;
                    } else {
                        return;
                    }
                }
                readInt32 = abstractSerializedData.readInt32(z);
                if (readInt32 == 481674261) {
                    readInt32 = abstractSerializedData.readInt32(z);
                    while (i < readInt32) {
                        User TLdeserialize2 = User.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
                        if (TLdeserialize2 != null) {
                            this.users.add(TLdeserialize2);
                            i += TLRPC.USER_FLAG_ACCESS_HASH;
                        } else {
                            return;
                        }
                    }
                } else if (z) {
                    objArr = new Object[TLRPC.USER_FLAG_ACCESS_HASH];
                    objArr[0] = Integer.valueOf(readInt32);
                    throw new RuntimeException(String.format("wrong Vector magic, got %x", objArr));
                }
            } else if (z) {
                objArr = new Object[TLRPC.USER_FLAG_ACCESS_HASH];
                objArr[0] = Integer.valueOf(readInt32);
                throw new RuntimeException(String.format("wrong Vector magic, got %x", objArr));
            }
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            int i;
            int i2 = 0;
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(481674261);
            int size = this.contacts.size();
            abstractSerializedData.writeInt32(size);
            for (i = 0; i < size; i += TLRPC.USER_FLAG_ACCESS_HASH) {
                ((TL_contact) this.contacts.get(i)).serializeToStream(abstractSerializedData);
            }
            abstractSerializedData.writeInt32(481674261);
            i = this.users.size();
            abstractSerializedData.writeInt32(i);
            while (i2 < i) {
                ((User) this.users.get(i2)).serializeToStream(abstractSerializedData);
                i2 += TLRPC.USER_FLAG_ACCESS_HASH;
            }
        }
    }

    public static class TL_contacts_contactsNotModified extends contacts_Contacts {
        public static int constructor;

        static {
            constructor = -1219778094;
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
        }
    }

    public static class TL_contacts_deleteContact extends TLObject {
        public static int constructor;
        public InputUser id;

        static {
            constructor = -1902823612;
        }

        public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            return TL_contacts_link.TLdeserialize(abstractSerializedData, i, z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.id.serializeToStream(abstractSerializedData);
        }
    }

    public static class TL_contacts_deleteContacts extends TLObject {
        public static int constructor;
        public ArrayList<InputUser> id;

        static {
            constructor = 1504393374;
        }

        public TL_contacts_deleteContacts() {
            this.id = new ArrayList();
        }

        public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            return Bool.TLdeserialize(abstractSerializedData, i, z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(481674261);
            int size = this.id.size();
            abstractSerializedData.writeInt32(size);
            for (int i = 0; i < size; i += TLRPC.USER_FLAG_ACCESS_HASH) {
                ((InputUser) this.id.get(i)).serializeToStream(abstractSerializedData);
            }
        }
    }

    public static class TL_contacts_exportCard extends TLObject {
        public static int constructor;

        static {
            constructor = -2065352905;
        }

        public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            TLObject vector = new Vector();
            int readInt32 = abstractSerializedData.readInt32(z);
            for (int i2 = 0; i2 < readInt32; i2 += TLRPC.USER_FLAG_ACCESS_HASH) {
                vector.objects.add(Integer.valueOf(abstractSerializedData.readInt32(z)));
            }
            return vector;
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
        }
    }

    public static class TL_contacts_found extends TLObject {
        public static int constructor;
        public ArrayList<Chat> chats;
        public ArrayList<Peer> results;
        public ArrayList<User> users;

        static {
            constructor = 446822276;
        }

        public TL_contacts_found() {
            this.results = new ArrayList();
            this.chats = new ArrayList();
            this.users = new ArrayList();
        }

        public static TL_contacts_found TLdeserialize(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            if (constructor == i) {
                TL_contacts_found tL_contacts_found = new TL_contacts_found();
                tL_contacts_found.readParams(abstractSerializedData, z);
                return tL_contacts_found;
            } else if (!z) {
                return null;
            } else {
                Object[] objArr = new Object[TLRPC.USER_FLAG_ACCESS_HASH];
                objArr[0] = Integer.valueOf(i);
                throw new RuntimeException(String.format("can't parse magic %x in TL_contacts_found", objArr));
            }
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            int i = 0;
            int readInt32 = abstractSerializedData.readInt32(z);
            Object[] objArr;
            if (readInt32 == 481674261) {
                int readInt322 = abstractSerializedData.readInt32(z);
                readInt32 = 0;
                while (readInt32 < readInt322) {
                    Peer TLdeserialize = Peer.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
                    if (TLdeserialize != null) {
                        this.results.add(TLdeserialize);
                        readInt32 += TLRPC.USER_FLAG_ACCESS_HASH;
                    } else {
                        return;
                    }
                }
                readInt32 = abstractSerializedData.readInt32(z);
                if (readInt32 == 481674261) {
                    readInt322 = abstractSerializedData.readInt32(z);
                    readInt32 = 0;
                    while (readInt32 < readInt322) {
                        Chat TLdeserialize2 = Chat.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
                        if (TLdeserialize2 != null) {
                            this.chats.add(TLdeserialize2);
                            readInt32 += TLRPC.USER_FLAG_ACCESS_HASH;
                        } else {
                            return;
                        }
                    }
                    readInt32 = abstractSerializedData.readInt32(z);
                    if (readInt32 == 481674261) {
                        readInt32 = abstractSerializedData.readInt32(z);
                        while (i < readInt32) {
                            User TLdeserialize3 = User.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
                            if (TLdeserialize3 != null) {
                                this.users.add(TLdeserialize3);
                                i += TLRPC.USER_FLAG_ACCESS_HASH;
                            } else {
                                return;
                            }
                        }
                    } else if (z) {
                        objArr = new Object[TLRPC.USER_FLAG_ACCESS_HASH];
                        objArr[0] = Integer.valueOf(readInt32);
                        throw new RuntimeException(String.format("wrong Vector magic, got %x", objArr));
                    }
                } else if (z) {
                    objArr = new Object[TLRPC.USER_FLAG_ACCESS_HASH];
                    objArr[0] = Integer.valueOf(readInt32);
                    throw new RuntimeException(String.format("wrong Vector magic, got %x", objArr));
                }
            } else if (z) {
                objArr = new Object[TLRPC.USER_FLAG_ACCESS_HASH];
                objArr[0] = Integer.valueOf(readInt32);
                throw new RuntimeException(String.format("wrong Vector magic, got %x", objArr));
            }
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            int i;
            int i2 = 0;
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(481674261);
            int size = this.results.size();
            abstractSerializedData.writeInt32(size);
            for (i = 0; i < size; i += TLRPC.USER_FLAG_ACCESS_HASH) {
                ((Peer) this.results.get(i)).serializeToStream(abstractSerializedData);
            }
            abstractSerializedData.writeInt32(481674261);
            size = this.chats.size();
            abstractSerializedData.writeInt32(size);
            for (i = 0; i < size; i += TLRPC.USER_FLAG_ACCESS_HASH) {
                ((Chat) this.chats.get(i)).serializeToStream(abstractSerializedData);
            }
            abstractSerializedData.writeInt32(481674261);
            i = this.users.size();
            abstractSerializedData.writeInt32(i);
            while (i2 < i) {
                ((User) this.users.get(i2)).serializeToStream(abstractSerializedData);
                i2 += TLRPC.USER_FLAG_ACCESS_HASH;
            }
        }
    }

    public static class TL_contacts_getBlocked extends TLObject {
        public static int constructor;
        public int limit;
        public int offset;

        static {
            constructor = -176409329;
        }

        public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            return contacts_Blocked.TLdeserialize(abstractSerializedData, i, z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.offset);
            abstractSerializedData.writeInt32(this.limit);
        }
    }

    public static class TL_contacts_getContacts extends TLObject {
        public static int constructor;
        public String hash;

        static {
            constructor = 583445000;
        }

        public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            return contacts_Contacts.TLdeserialize(abstractSerializedData, i, z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeString(this.hash);
        }
    }

    public static class TL_contacts_getStatuses extends TLObject {
        public static int constructor;

        static {
            constructor = -995929106;
        }

        public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            TLObject vector = new Vector();
            int readInt32 = abstractSerializedData.readInt32(z);
            for (int i2 = 0; i2 < readInt32; i2 += TLRPC.USER_FLAG_ACCESS_HASH) {
                TL_contactStatus TLdeserialize = TL_contactStatus.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
                if (TLdeserialize == null) {
                    break;
                }
                vector.objects.add(TLdeserialize);
            }
            return vector;
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
        }
    }

    public static class TL_contacts_getTopPeers extends TLObject {
        public static int constructor;
        public boolean bots_inline;
        public boolean bots_pm;
        public boolean channels;
        public boolean correspondents;
        public int flags;
        public boolean groups;
        public int hash;
        public int limit;
        public int offset;

        static {
            constructor = -728224331;
        }

        public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            return contacts_TopPeers.TLdeserialize(abstractSerializedData, i, z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.flags = this.correspondents ? this.flags | TLRPC.USER_FLAG_ACCESS_HASH : this.flags & -2;
            this.flags = this.bots_pm ? this.flags | TLRPC.USER_FLAG_FIRST_NAME : this.flags & -3;
            this.flags = this.bots_inline ? this.flags | TLRPC.USER_FLAG_LAST_NAME : this.flags & -5;
            this.flags = this.groups ? this.flags | TLRPC.MESSAGE_FLAG_HAS_VIEWS : this.flags & -1025;
            this.flags = this.channels ? this.flags | TLRPC.MESSAGE_FLAG_EDITED : this.flags & -32769;
            abstractSerializedData.writeInt32(this.flags);
            abstractSerializedData.writeInt32(this.offset);
            abstractSerializedData.writeInt32(this.limit);
            abstractSerializedData.writeInt32(this.hash);
        }
    }

    public static class TL_contacts_importCard extends TLObject {
        public static int constructor;
        public ArrayList<Integer> export_card;

        static {
            constructor = 1340184318;
        }

        public TL_contacts_importCard() {
            this.export_card = new ArrayList();
        }

        public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            return User.TLdeserialize(abstractSerializedData, i, z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(481674261);
            int size = this.export_card.size();
            abstractSerializedData.writeInt32(size);
            for (int i = 0; i < size; i += TLRPC.USER_FLAG_ACCESS_HASH) {
                abstractSerializedData.writeInt32(((Integer) this.export_card.get(i)).intValue());
            }
        }
    }

    public static class TL_contacts_importContacts extends TLObject {
        public static int constructor;
        public ArrayList<TL_inputPhoneContact> contacts;
        public boolean replace;

        static {
            constructor = -634342611;
        }

        public TL_contacts_importContacts() {
            this.contacts = new ArrayList();
        }

        public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            return TL_contacts_importedContacts.TLdeserialize(abstractSerializedData, i, z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(481674261);
            int size = this.contacts.size();
            abstractSerializedData.writeInt32(size);
            for (int i = 0; i < size; i += TLRPC.USER_FLAG_ACCESS_HASH) {
                ((TL_inputPhoneContact) this.contacts.get(i)).serializeToStream(abstractSerializedData);
            }
            abstractSerializedData.writeBool(this.replace);
        }
    }

    public static class TL_contacts_importedContacts extends TLObject {
        public static int constructor;
        public ArrayList<TL_importedContact> imported;
        public ArrayList<Long> retry_contacts;
        public ArrayList<User> users;

        static {
            constructor = -1387117803;
        }

        public TL_contacts_importedContacts() {
            this.imported = new ArrayList();
            this.retry_contacts = new ArrayList();
            this.users = new ArrayList();
        }

        public static TL_contacts_importedContacts TLdeserialize(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            if (constructor == i) {
                TL_contacts_importedContacts tL_contacts_importedContacts = new TL_contacts_importedContacts();
                tL_contacts_importedContacts.readParams(abstractSerializedData, z);
                return tL_contacts_importedContacts;
            } else if (!z) {
                return null;
            } else {
                Object[] objArr = new Object[TLRPC.USER_FLAG_ACCESS_HASH];
                objArr[0] = Integer.valueOf(i);
                throw new RuntimeException(String.format("can't parse magic %x in TL_contacts_importedContacts", objArr));
            }
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            int i = 0;
            int readInt32 = abstractSerializedData.readInt32(z);
            Object[] objArr;
            if (readInt32 == 481674261) {
                int readInt322 = abstractSerializedData.readInt32(z);
                readInt32 = 0;
                while (readInt32 < readInt322) {
                    TL_importedContact TLdeserialize = TL_importedContact.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
                    if (TLdeserialize != null) {
                        this.imported.add(TLdeserialize);
                        readInt32 += TLRPC.USER_FLAG_ACCESS_HASH;
                    } else {
                        return;
                    }
                }
                readInt32 = abstractSerializedData.readInt32(z);
                if (readInt32 == 481674261) {
                    readInt322 = abstractSerializedData.readInt32(z);
                    for (readInt32 = 0; readInt32 < readInt322; readInt32 += TLRPC.USER_FLAG_ACCESS_HASH) {
                        this.retry_contacts.add(Long.valueOf(abstractSerializedData.readInt64(z)));
                    }
                    readInt32 = abstractSerializedData.readInt32(z);
                    if (readInt32 == 481674261) {
                        readInt32 = abstractSerializedData.readInt32(z);
                        while (i < readInt32) {
                            User TLdeserialize2 = User.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
                            if (TLdeserialize2 != null) {
                                this.users.add(TLdeserialize2);
                                i += TLRPC.USER_FLAG_ACCESS_HASH;
                            } else {
                                return;
                            }
                        }
                    } else if (z) {
                        objArr = new Object[TLRPC.USER_FLAG_ACCESS_HASH];
                        objArr[0] = Integer.valueOf(readInt32);
                        throw new RuntimeException(String.format("wrong Vector magic, got %x", objArr));
                    }
                } else if (z) {
                    objArr = new Object[TLRPC.USER_FLAG_ACCESS_HASH];
                    objArr[0] = Integer.valueOf(readInt32);
                    throw new RuntimeException(String.format("wrong Vector magic, got %x", objArr));
                }
            } else if (z) {
                objArr = new Object[TLRPC.USER_FLAG_ACCESS_HASH];
                objArr[0] = Integer.valueOf(readInt32);
                throw new RuntimeException(String.format("wrong Vector magic, got %x", objArr));
            }
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            int i;
            int i2 = 0;
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(481674261);
            int size = this.imported.size();
            abstractSerializedData.writeInt32(size);
            for (i = 0; i < size; i += TLRPC.USER_FLAG_ACCESS_HASH) {
                ((TL_importedContact) this.imported.get(i)).serializeToStream(abstractSerializedData);
            }
            abstractSerializedData.writeInt32(481674261);
            size = this.retry_contacts.size();
            abstractSerializedData.writeInt32(size);
            for (i = 0; i < size; i += TLRPC.USER_FLAG_ACCESS_HASH) {
                abstractSerializedData.writeInt64(((Long) this.retry_contacts.get(i)).longValue());
            }
            abstractSerializedData.writeInt32(481674261);
            i = this.users.size();
            abstractSerializedData.writeInt32(i);
            while (i2 < i) {
                ((User) this.users.get(i2)).serializeToStream(abstractSerializedData);
                i2 += TLRPC.USER_FLAG_ACCESS_HASH;
            }
        }
    }

    public static class TL_contacts_link extends TLObject {
        public static int constructor;
        public ContactLink foreign_link;
        public ContactLink my_link;
        public User user;

        static {
            constructor = 986597452;
        }

        public static TL_contacts_link TLdeserialize(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            if (constructor == i) {
                TL_contacts_link tL_contacts_link = new TL_contacts_link();
                tL_contacts_link.readParams(abstractSerializedData, z);
                return tL_contacts_link;
            } else if (!z) {
                return null;
            } else {
                Object[] objArr = new Object[TLRPC.USER_FLAG_ACCESS_HASH];
                objArr[0] = Integer.valueOf(i);
                throw new RuntimeException(String.format("can't parse magic %x in TL_contacts_link", objArr));
            }
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.my_link = ContactLink.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
            this.foreign_link = ContactLink.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
            this.user = User.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.my_link.serializeToStream(abstractSerializedData);
            this.foreign_link.serializeToStream(abstractSerializedData);
            this.user.serializeToStream(abstractSerializedData);
        }
    }

    public static class TL_contacts_resetTopPeerRating extends TLObject {
        public static int constructor;
        public TopPeerCategory category;
        public InputPeer peer;

        static {
            constructor = 451113900;
        }

        public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            return Bool.TLdeserialize(abstractSerializedData, i, z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.category.serializeToStream(abstractSerializedData);
            this.peer.serializeToStream(abstractSerializedData);
        }
    }

    public static class TL_contacts_resolveUsername extends TLObject {
        public static int constructor;
        public String username;

        static {
            constructor = -113456221;
        }

        public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            return TL_contacts_resolvedPeer.TLdeserialize(abstractSerializedData, i, z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeString(this.username);
        }
    }

    public static class TL_contacts_resolvedPeer extends TLObject {
        public static int constructor;
        public ArrayList<Chat> chats;
        public Peer peer;
        public ArrayList<User> users;

        static {
            constructor = 2131196633;
        }

        public TL_contacts_resolvedPeer() {
            this.chats = new ArrayList();
            this.users = new ArrayList();
        }

        public static TL_contacts_resolvedPeer TLdeserialize(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            if (constructor == i) {
                TL_contacts_resolvedPeer tL_contacts_resolvedPeer = new TL_contacts_resolvedPeer();
                tL_contacts_resolvedPeer.readParams(abstractSerializedData, z);
                return tL_contacts_resolvedPeer;
            } else if (!z) {
                return null;
            } else {
                Object[] objArr = new Object[TLRPC.USER_FLAG_ACCESS_HASH];
                objArr[0] = Integer.valueOf(i);
                throw new RuntimeException(String.format("can't parse magic %x in TL_contacts_resolvedPeer", objArr));
            }
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            int i = 0;
            this.peer = Peer.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
            int readInt32 = abstractSerializedData.readInt32(z);
            Object[] objArr;
            if (readInt32 == 481674261) {
                int readInt322 = abstractSerializedData.readInt32(z);
                readInt32 = 0;
                while (readInt32 < readInt322) {
                    Chat TLdeserialize = Chat.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
                    if (TLdeserialize != null) {
                        this.chats.add(TLdeserialize);
                        readInt32 += TLRPC.USER_FLAG_ACCESS_HASH;
                    } else {
                        return;
                    }
                }
                readInt32 = abstractSerializedData.readInt32(z);
                if (readInt32 == 481674261) {
                    readInt32 = abstractSerializedData.readInt32(z);
                    while (i < readInt32) {
                        User TLdeserialize2 = User.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
                        if (TLdeserialize2 != null) {
                            this.users.add(TLdeserialize2);
                            i += TLRPC.USER_FLAG_ACCESS_HASH;
                        } else {
                            return;
                        }
                    }
                } else if (z) {
                    objArr = new Object[TLRPC.USER_FLAG_ACCESS_HASH];
                    objArr[0] = Integer.valueOf(readInt32);
                    throw new RuntimeException(String.format("wrong Vector magic, got %x", objArr));
                }
            } else if (z) {
                objArr = new Object[TLRPC.USER_FLAG_ACCESS_HASH];
                objArr[0] = Integer.valueOf(readInt32);
                throw new RuntimeException(String.format("wrong Vector magic, got %x", objArr));
            }
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            int i;
            int i2 = 0;
            abstractSerializedData.writeInt32(constructor);
            this.peer.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeInt32(481674261);
            int size = this.chats.size();
            abstractSerializedData.writeInt32(size);
            for (i = 0; i < size; i += TLRPC.USER_FLAG_ACCESS_HASH) {
                ((Chat) this.chats.get(i)).serializeToStream(abstractSerializedData);
            }
            abstractSerializedData.writeInt32(481674261);
            i = this.users.size();
            abstractSerializedData.writeInt32(i);
            while (i2 < i) {
                ((User) this.users.get(i2)).serializeToStream(abstractSerializedData);
                i2 += TLRPC.USER_FLAG_ACCESS_HASH;
            }
        }
    }

    public static class TL_contacts_search extends TLObject {
        public static int constructor;
        public int limit;
        public String f2665q;

        static {
            constructor = 301470424;
        }

        public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            return TL_contacts_found.TLdeserialize(abstractSerializedData, i, z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeString(this.f2665q);
            abstractSerializedData.writeInt32(this.limit);
        }
    }

    public static class contacts_TopPeers extends TLObject {
        public ArrayList<TL_topPeerCategoryPeers> categories;
        public ArrayList<Chat> chats;
        public ArrayList<User> users;

        public contacts_TopPeers() {
            this.categories = new ArrayList();
            this.chats = new ArrayList();
            this.users = new ArrayList();
        }

        public static contacts_TopPeers TLdeserialize(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            contacts_TopPeers com_hanista_mobogram_tgnet_TLRPC_contacts_TopPeers = null;
            switch (i) {
                case -567906571:
                    com_hanista_mobogram_tgnet_TLRPC_contacts_TopPeers = new TL_contacts_topPeersNotModified();
                    break;
                case 1891070632:
                    com_hanista_mobogram_tgnet_TLRPC_contacts_TopPeers = new TL_contacts_topPeers();
                    break;
            }
            if (com_hanista_mobogram_tgnet_TLRPC_contacts_TopPeers == null && z) {
                Object[] objArr = new Object[TLRPC.USER_FLAG_ACCESS_HASH];
                objArr[0] = Integer.valueOf(i);
                throw new RuntimeException(String.format("can't parse magic %x in contacts_TopPeers", objArr));
            }
            if (com_hanista_mobogram_tgnet_TLRPC_contacts_TopPeers != null) {
                com_hanista_mobogram_tgnet_TLRPC_contacts_TopPeers.readParams(abstractSerializedData, z);
            }
            return com_hanista_mobogram_tgnet_TLRPC_contacts_TopPeers;
        }
    }

    public static class TL_contacts_topPeers extends contacts_TopPeers {
        public static int constructor;

        static {
            constructor = 1891070632;
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            int i = 0;
            int readInt32 = abstractSerializedData.readInt32(z);
            Object[] objArr;
            if (readInt32 == 481674261) {
                int readInt322 = abstractSerializedData.readInt32(z);
                readInt32 = 0;
                while (readInt32 < readInt322) {
                    TL_topPeerCategoryPeers TLdeserialize = TL_topPeerCategoryPeers.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
                    if (TLdeserialize != null) {
                        this.categories.add(TLdeserialize);
                        readInt32 += TLRPC.USER_FLAG_ACCESS_HASH;
                    } else {
                        return;
                    }
                }
                readInt32 = abstractSerializedData.readInt32(z);
                if (readInt32 == 481674261) {
                    readInt322 = abstractSerializedData.readInt32(z);
                    readInt32 = 0;
                    while (readInt32 < readInt322) {
                        Chat TLdeserialize2 = Chat.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
                        if (TLdeserialize2 != null) {
                            this.chats.add(TLdeserialize2);
                            readInt32 += TLRPC.USER_FLAG_ACCESS_HASH;
                        } else {
                            return;
                        }
                    }
                    readInt32 = abstractSerializedData.readInt32(z);
                    if (readInt32 == 481674261) {
                        readInt32 = abstractSerializedData.readInt32(z);
                        while (i < readInt32) {
                            User TLdeserialize3 = User.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
                            if (TLdeserialize3 != null) {
                                this.users.add(TLdeserialize3);
                                i += TLRPC.USER_FLAG_ACCESS_HASH;
                            } else {
                                return;
                            }
                        }
                    } else if (z) {
                        objArr = new Object[TLRPC.USER_FLAG_ACCESS_HASH];
                        objArr[0] = Integer.valueOf(readInt32);
                        throw new RuntimeException(String.format("wrong Vector magic, got %x", objArr));
                    }
                } else if (z) {
                    objArr = new Object[TLRPC.USER_FLAG_ACCESS_HASH];
                    objArr[0] = Integer.valueOf(readInt32);
                    throw new RuntimeException(String.format("wrong Vector magic, got %x", objArr));
                }
            } else if (z) {
                objArr = new Object[TLRPC.USER_FLAG_ACCESS_HASH];
                objArr[0] = Integer.valueOf(readInt32);
                throw new RuntimeException(String.format("wrong Vector magic, got %x", objArr));
            }
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            int i;
            int i2 = 0;
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(481674261);
            int size = this.categories.size();
            abstractSerializedData.writeInt32(size);
            for (i = 0; i < size; i += TLRPC.USER_FLAG_ACCESS_HASH) {
                ((TL_topPeerCategoryPeers) this.categories.get(i)).serializeToStream(abstractSerializedData);
            }
            abstractSerializedData.writeInt32(481674261);
            size = this.chats.size();
            abstractSerializedData.writeInt32(size);
            for (i = 0; i < size; i += TLRPC.USER_FLAG_ACCESS_HASH) {
                ((Chat) this.chats.get(i)).serializeToStream(abstractSerializedData);
            }
            abstractSerializedData.writeInt32(481674261);
            i = this.users.size();
            abstractSerializedData.writeInt32(i);
            while (i2 < i) {
                ((User) this.users.get(i2)).serializeToStream(abstractSerializedData);
                i2 += TLRPC.USER_FLAG_ACCESS_HASH;
            }
        }
    }

    public static class TL_contacts_topPeersNotModified extends contacts_TopPeers {
        public static int constructor;

        static {
            constructor = -567906571;
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
        }
    }

    public static class TL_contacts_unblock extends TLObject {
        public static int constructor;
        public InputUser id;

        static {
            constructor = -448724803;
        }

        public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            return Bool.TLdeserialize(abstractSerializedData, i, z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.id.serializeToStream(abstractSerializedData);
        }
    }

    public static class TL_dcOption extends TLObject {
        public static int constructor;
        public int flags;
        public int id;
        public String ip_address;
        public boolean ipv6;
        public boolean media_only;
        public int port;
        public boolean tcpo_only;

        static {
            constructor = 98092748;
        }

        public static TL_dcOption TLdeserialize(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            if (constructor == i) {
                TL_dcOption tL_dcOption = new TL_dcOption();
                tL_dcOption.readParams(abstractSerializedData, z);
                return tL_dcOption;
            } else if (!z) {
                return null;
            } else {
                Object[] objArr = new Object[TLRPC.USER_FLAG_ACCESS_HASH];
                objArr[0] = Integer.valueOf(i);
                throw new RuntimeException(String.format("can't parse magic %x in TL_dcOption", objArr));
            }
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            boolean z2 = true;
            this.flags = abstractSerializedData.readInt32(z);
            this.ipv6 = (this.flags & TLRPC.USER_FLAG_ACCESS_HASH) != 0;
            this.media_only = (this.flags & TLRPC.USER_FLAG_FIRST_NAME) != 0;
            if ((this.flags & TLRPC.USER_FLAG_LAST_NAME) == 0) {
                z2 = false;
            }
            this.tcpo_only = z2;
            this.id = abstractSerializedData.readInt32(z);
            this.ip_address = abstractSerializedData.readString(z);
            this.port = abstractSerializedData.readInt32(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.flags = this.ipv6 ? this.flags | TLRPC.USER_FLAG_ACCESS_HASH : this.flags & -2;
            this.flags = this.media_only ? this.flags | TLRPC.USER_FLAG_FIRST_NAME : this.flags & -3;
            this.flags = this.tcpo_only ? this.flags | TLRPC.USER_FLAG_LAST_NAME : this.flags & -5;
            abstractSerializedData.writeInt32(this.flags);
            abstractSerializedData.writeInt32(this.id);
            abstractSerializedData.writeString(this.ip_address);
            abstractSerializedData.writeInt32(this.port);
        }
    }

    public static class TL_decryptedMessage extends DecryptedMessage {
        public static int constructor;

        static {
            constructor = 917541342;
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            int i = 0;
            this.flags = abstractSerializedData.readInt32(z);
            this.random_id = abstractSerializedData.readInt64(z);
            this.ttl = abstractSerializedData.readInt32(z);
            this.message = abstractSerializedData.readString(z);
            if ((this.flags & TLRPC.USER_FLAG_UNUSED3) != 0) {
                this.media = DecryptedMessageMedia.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
            }
            if ((this.flags & TLRPC.USER_FLAG_UNUSED) != 0) {
                int readInt32 = abstractSerializedData.readInt32(z);
                if (readInt32 == 481674261) {
                    readInt32 = abstractSerializedData.readInt32(z);
                    while (i < readInt32) {
                        MessageEntity TLdeserialize = MessageEntity.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
                        if (TLdeserialize != null) {
                            this.entities.add(TLdeserialize);
                            i += TLRPC.USER_FLAG_ACCESS_HASH;
                        } else {
                            return;
                        }
                    }
                } else if (z) {
                    Object[] objArr = new Object[TLRPC.USER_FLAG_ACCESS_HASH];
                    objArr[0] = Integer.valueOf(readInt32);
                    throw new RuntimeException(String.format("wrong Vector magic, got %x", objArr));
                } else {
                    return;
                }
            }
            if ((this.flags & TLRPC.MESSAGE_FLAG_HAS_BOT_ID) != 0) {
                this.via_bot_name = abstractSerializedData.readString(z);
            }
            if ((this.flags & TLRPC.USER_FLAG_USERNAME) != 0) {
                this.reply_to_random_id = abstractSerializedData.readInt64(z);
            }
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.flags);
            abstractSerializedData.writeInt64(this.random_id);
            abstractSerializedData.writeInt32(this.ttl);
            abstractSerializedData.writeString(this.message);
            if ((this.flags & TLRPC.USER_FLAG_UNUSED3) != 0) {
                this.media.serializeToStream(abstractSerializedData);
            }
            if ((this.flags & TLRPC.USER_FLAG_UNUSED) != 0) {
                abstractSerializedData.writeInt32(481674261);
                int size = this.entities.size();
                abstractSerializedData.writeInt32(size);
                for (int i = 0; i < size; i += TLRPC.USER_FLAG_ACCESS_HASH) {
                    ((MessageEntity) this.entities.get(i)).serializeToStream(abstractSerializedData);
                }
            }
            if ((this.flags & TLRPC.MESSAGE_FLAG_HAS_BOT_ID) != 0) {
                abstractSerializedData.writeString(this.via_bot_name);
            }
            if ((this.flags & TLRPC.USER_FLAG_USERNAME) != 0) {
                abstractSerializedData.writeInt64(this.reply_to_random_id);
            }
        }
    }

    public static class TL_decryptedMessageActionAbortKey extends DecryptedMessageAction {
        public static int constructor;

        static {
            constructor = -586814357;
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.exchange_id = abstractSerializedData.readInt64(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt64(this.exchange_id);
        }
    }

    public static class TL_decryptedMessageActionAcceptKey extends DecryptedMessageAction {
        public static int constructor;

        static {
            constructor = 1877046107;
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.exchange_id = abstractSerializedData.readInt64(z);
            this.g_b = abstractSerializedData.readByteArray(z);
            this.key_fingerprint = abstractSerializedData.readInt64(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt64(this.exchange_id);
            abstractSerializedData.writeByteArray(this.g_b);
            abstractSerializedData.writeInt64(this.key_fingerprint);
        }
    }

    public static class TL_decryptedMessageActionCommitKey extends DecryptedMessageAction {
        public static int constructor;

        static {
            constructor = -332526693;
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.exchange_id = abstractSerializedData.readInt64(z);
            this.key_fingerprint = abstractSerializedData.readInt64(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt64(this.exchange_id);
            abstractSerializedData.writeInt64(this.key_fingerprint);
        }
    }

    public static class TL_decryptedMessageActionDeleteMessages extends DecryptedMessageAction {
        public static int constructor;

        static {
            constructor = 1700872964;
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            int i = 0;
            int readInt32 = abstractSerializedData.readInt32(z);
            if (readInt32 == 481674261) {
                readInt32 = abstractSerializedData.readInt32(z);
                while (i < readInt32) {
                    this.random_ids.add(Long.valueOf(abstractSerializedData.readInt64(z)));
                    i += TLRPC.USER_FLAG_ACCESS_HASH;
                }
            } else if (z) {
                Object[] objArr = new Object[TLRPC.USER_FLAG_ACCESS_HASH];
                objArr[0] = Integer.valueOf(readInt32);
                throw new RuntimeException(String.format("wrong Vector magic, got %x", objArr));
            }
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(481674261);
            int size = this.random_ids.size();
            abstractSerializedData.writeInt32(size);
            for (int i = 0; i < size; i += TLRPC.USER_FLAG_ACCESS_HASH) {
                abstractSerializedData.writeInt64(((Long) this.random_ids.get(i)).longValue());
            }
        }
    }

    public static class TL_decryptedMessageActionFlushHistory extends DecryptedMessageAction {
        public static int constructor;

        static {
            constructor = 1729750108;
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
        }
    }

    public static class TL_decryptedMessageActionNoop extends DecryptedMessageAction {
        public static int constructor;

        static {
            constructor = -1473258141;
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
        }
    }

    public static class TL_decryptedMessageActionNotifyLayer extends DecryptedMessageAction {
        public static int constructor;

        static {
            constructor = -217806717;
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.layer = abstractSerializedData.readInt32(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.layer);
        }
    }

    public static class TL_decryptedMessageActionReadMessages extends DecryptedMessageAction {
        public static int constructor;

        static {
            constructor = 206520510;
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            int i = 0;
            int readInt32 = abstractSerializedData.readInt32(z);
            if (readInt32 == 481674261) {
                readInt32 = abstractSerializedData.readInt32(z);
                while (i < readInt32) {
                    this.random_ids.add(Long.valueOf(abstractSerializedData.readInt64(z)));
                    i += TLRPC.USER_FLAG_ACCESS_HASH;
                }
            } else if (z) {
                Object[] objArr = new Object[TLRPC.USER_FLAG_ACCESS_HASH];
                objArr[0] = Integer.valueOf(readInt32);
                throw new RuntimeException(String.format("wrong Vector magic, got %x", objArr));
            }
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(481674261);
            int size = this.random_ids.size();
            abstractSerializedData.writeInt32(size);
            for (int i = 0; i < size; i += TLRPC.USER_FLAG_ACCESS_HASH) {
                abstractSerializedData.writeInt64(((Long) this.random_ids.get(i)).longValue());
            }
        }
    }

    public static class TL_decryptedMessageActionRequestKey extends DecryptedMessageAction {
        public static int constructor;

        static {
            constructor = -204906213;
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.exchange_id = abstractSerializedData.readInt64(z);
            this.g_a = abstractSerializedData.readByteArray(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt64(this.exchange_id);
            abstractSerializedData.writeByteArray(this.g_a);
        }
    }

    public static class TL_decryptedMessageActionResend extends DecryptedMessageAction {
        public static int constructor;

        static {
            constructor = 1360072880;
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.start_seq_no = abstractSerializedData.readInt32(z);
            this.end_seq_no = abstractSerializedData.readInt32(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.start_seq_no);
            abstractSerializedData.writeInt32(this.end_seq_no);
        }
    }

    public static class TL_decryptedMessageActionScreenshotMessages extends DecryptedMessageAction {
        public static int constructor;

        static {
            constructor = -1967000459;
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            int i = 0;
            int readInt32 = abstractSerializedData.readInt32(z);
            if (readInt32 == 481674261) {
                readInt32 = abstractSerializedData.readInt32(z);
                while (i < readInt32) {
                    this.random_ids.add(Long.valueOf(abstractSerializedData.readInt64(z)));
                    i += TLRPC.USER_FLAG_ACCESS_HASH;
                }
            } else if (z) {
                Object[] objArr = new Object[TLRPC.USER_FLAG_ACCESS_HASH];
                objArr[0] = Integer.valueOf(readInt32);
                throw new RuntimeException(String.format("wrong Vector magic, got %x", objArr));
            }
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(481674261);
            int size = this.random_ids.size();
            abstractSerializedData.writeInt32(size);
            for (int i = 0; i < size; i += TLRPC.USER_FLAG_ACCESS_HASH) {
                abstractSerializedData.writeInt64(((Long) this.random_ids.get(i)).longValue());
            }
        }
    }

    public static class TL_decryptedMessageActionSetMessageTTL extends DecryptedMessageAction {
        public static int constructor;

        static {
            constructor = -1586283796;
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.ttl_seconds = abstractSerializedData.readInt32(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.ttl_seconds);
        }
    }

    public static class TL_decryptedMessageActionTyping extends DecryptedMessageAction {
        public static int constructor;

        static {
            constructor = -860719551;
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.action = SendMessageAction.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.action.serializeToStream(abstractSerializedData);
        }
    }

    public static class TL_decryptedMessageLayer extends TLObject {
        public static int constructor;
        public int in_seq_no;
        public int layer;
        public DecryptedMessage message;
        public int out_seq_no;
        public byte[] random_bytes;

        static {
            constructor = 467867529;
        }

        public static TL_decryptedMessageLayer TLdeserialize(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            if (constructor == i) {
                TL_decryptedMessageLayer tL_decryptedMessageLayer = new TL_decryptedMessageLayer();
                tL_decryptedMessageLayer.readParams(abstractSerializedData, z);
                return tL_decryptedMessageLayer;
            } else if (!z) {
                return null;
            } else {
                Object[] objArr = new Object[TLRPC.USER_FLAG_ACCESS_HASH];
                objArr[0] = Integer.valueOf(i);
                throw new RuntimeException(String.format("can't parse magic %x in TL_decryptedMessageLayer", objArr));
            }
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.random_bytes = abstractSerializedData.readByteArray(z);
            this.layer = abstractSerializedData.readInt32(z);
            this.in_seq_no = abstractSerializedData.readInt32(z);
            this.out_seq_no = abstractSerializedData.readInt32(z);
            this.message = DecryptedMessage.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeByteArray(this.random_bytes);
            abstractSerializedData.writeInt32(this.layer);
            abstractSerializedData.writeInt32(this.in_seq_no);
            abstractSerializedData.writeInt32(this.out_seq_no);
            this.message.serializeToStream(abstractSerializedData);
        }
    }

    public static class TL_decryptedMessageMediaAudio extends DecryptedMessageMedia {
        public static int constructor;

        static {
            constructor = 1474341323;
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.duration = abstractSerializedData.readInt32(z);
            this.mime_type = abstractSerializedData.readString(z);
            this.size = abstractSerializedData.readInt32(z);
            this.key = abstractSerializedData.readByteArray(z);
            this.iv = abstractSerializedData.readByteArray(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.duration);
            abstractSerializedData.writeString(this.mime_type);
            abstractSerializedData.writeInt32(this.size);
            abstractSerializedData.writeByteArray(this.key);
            abstractSerializedData.writeByteArray(this.iv);
        }
    }

    public static class TL_decryptedMessageMediaAudio_layer8 extends TL_decryptedMessageMediaAudio {
        public static int constructor;

        static {
            constructor = 1619031439;
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.duration = abstractSerializedData.readInt32(z);
            this.size = abstractSerializedData.readInt32(z);
            this.key = abstractSerializedData.readByteArray(z);
            this.iv = abstractSerializedData.readByteArray(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.duration);
            abstractSerializedData.writeInt32(this.size);
            abstractSerializedData.writeByteArray(this.key);
            abstractSerializedData.writeByteArray(this.iv);
        }
    }

    public static class TL_decryptedMessageMediaContact extends DecryptedMessageMedia {
        public static int constructor;

        static {
            constructor = 1485441687;
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.phone_number = abstractSerializedData.readString(z);
            this.first_name = abstractSerializedData.readString(z);
            this.last_name = abstractSerializedData.readString(z);
            this.user_id = abstractSerializedData.readInt32(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeString(this.phone_number);
            abstractSerializedData.writeString(this.first_name);
            abstractSerializedData.writeString(this.last_name);
            abstractSerializedData.writeInt32(this.user_id);
        }
    }

    public static class TL_decryptedMessageMediaDocument extends DecryptedMessageMedia {
        public static int constructor;
        public byte[] thumb;

        static {
            constructor = 2063502050;
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            int i = 0;
            this.thumb = abstractSerializedData.readByteArray(z);
            this.thumb_w = abstractSerializedData.readInt32(z);
            this.thumb_h = abstractSerializedData.readInt32(z);
            this.mime_type = abstractSerializedData.readString(z);
            this.size = abstractSerializedData.readInt32(z);
            this.key = abstractSerializedData.readByteArray(z);
            this.iv = abstractSerializedData.readByteArray(z);
            int readInt32 = abstractSerializedData.readInt32(z);
            if (readInt32 == 481674261) {
                readInt32 = abstractSerializedData.readInt32(z);
                while (i < readInt32) {
                    DocumentAttribute TLdeserialize = DocumentAttribute.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
                    if (TLdeserialize != null) {
                        this.attributes.add(TLdeserialize);
                        i += TLRPC.USER_FLAG_ACCESS_HASH;
                    } else {
                        return;
                    }
                }
                this.caption = abstractSerializedData.readString(z);
            } else if (z) {
                Object[] objArr = new Object[TLRPC.USER_FLAG_ACCESS_HASH];
                objArr[0] = Integer.valueOf(readInt32);
                throw new RuntimeException(String.format("wrong Vector magic, got %x", objArr));
            }
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeByteArray(this.thumb);
            abstractSerializedData.writeInt32(this.thumb_w);
            abstractSerializedData.writeInt32(this.thumb_h);
            abstractSerializedData.writeString(this.mime_type);
            abstractSerializedData.writeInt32(this.size);
            abstractSerializedData.writeByteArray(this.key);
            abstractSerializedData.writeByteArray(this.iv);
            abstractSerializedData.writeInt32(481674261);
            int size = this.attributes.size();
            abstractSerializedData.writeInt32(size);
            for (int i = 0; i < size; i += TLRPC.USER_FLAG_ACCESS_HASH) {
                ((DocumentAttribute) this.attributes.get(i)).serializeToStream(abstractSerializedData);
            }
            abstractSerializedData.writeString(this.caption);
        }
    }

    public static class TL_decryptedMessageMediaDocument_layer8 extends TL_decryptedMessageMediaDocument {
        public static int constructor;
        public byte[] thumb;

        static {
            constructor = -1332395189;
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.thumb = abstractSerializedData.readByteArray(z);
            this.thumb_w = abstractSerializedData.readInt32(z);
            this.thumb_h = abstractSerializedData.readInt32(z);
            this.file_name = abstractSerializedData.readString(z);
            this.mime_type = abstractSerializedData.readString(z);
            this.size = abstractSerializedData.readInt32(z);
            this.key = abstractSerializedData.readByteArray(z);
            this.iv = abstractSerializedData.readByteArray(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeByteArray(this.thumb);
            abstractSerializedData.writeInt32(this.thumb_w);
            abstractSerializedData.writeInt32(this.thumb_h);
            abstractSerializedData.writeString(this.file_name);
            abstractSerializedData.writeString(this.mime_type);
            abstractSerializedData.writeInt32(this.size);
            abstractSerializedData.writeByteArray(this.key);
            abstractSerializedData.writeByteArray(this.iv);
        }
    }

    public static class TL_decryptedMessageMediaEmpty extends DecryptedMessageMedia {
        public static int constructor;

        static {
            constructor = 144661578;
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
        }
    }

    public static class TL_decryptedMessageMediaExternalDocument extends DecryptedMessageMedia {
        public static int constructor;
        public PhotoSize thumb;

        static {
            constructor = -90853155;
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            int i = 0;
            this.id = abstractSerializedData.readInt64(z);
            this.access_hash = abstractSerializedData.readInt64(z);
            this.date = abstractSerializedData.readInt32(z);
            this.mime_type = abstractSerializedData.readString(z);
            this.size = abstractSerializedData.readInt32(z);
            this.thumb = PhotoSize.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
            this.dc_id = abstractSerializedData.readInt32(z);
            int readInt32 = abstractSerializedData.readInt32(z);
            if (readInt32 == 481674261) {
                readInt32 = abstractSerializedData.readInt32(z);
                while (i < readInt32) {
                    DocumentAttribute TLdeserialize = DocumentAttribute.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
                    if (TLdeserialize != null) {
                        this.attributes.add(TLdeserialize);
                        i += TLRPC.USER_FLAG_ACCESS_HASH;
                    } else {
                        return;
                    }
                }
            } else if (z) {
                Object[] objArr = new Object[TLRPC.USER_FLAG_ACCESS_HASH];
                objArr[0] = Integer.valueOf(readInt32);
                throw new RuntimeException(String.format("wrong Vector magic, got %x", objArr));
            }
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt64(this.id);
            abstractSerializedData.writeInt64(this.access_hash);
            abstractSerializedData.writeInt32(this.date);
            abstractSerializedData.writeString(this.mime_type);
            abstractSerializedData.writeInt32(this.size);
            this.thumb.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeInt32(this.dc_id);
            abstractSerializedData.writeInt32(481674261);
            int size = this.attributes.size();
            abstractSerializedData.writeInt32(size);
            for (int i = 0; i < size; i += TLRPC.USER_FLAG_ACCESS_HASH) {
                ((DocumentAttribute) this.attributes.get(i)).serializeToStream(abstractSerializedData);
            }
        }
    }

    public static class TL_decryptedMessageMediaGeoPoint extends DecryptedMessageMedia {
        public static int constructor;

        static {
            constructor = 893913689;
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.lat = abstractSerializedData.readDouble(z);
            this._long = abstractSerializedData.readDouble(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeDouble(this.lat);
            abstractSerializedData.writeDouble(this._long);
        }
    }

    public static class TL_decryptedMessageMediaPhoto extends DecryptedMessageMedia {
        public static int constructor;
        public byte[] thumb;

        static {
            constructor = -235238024;
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.thumb = abstractSerializedData.readByteArray(z);
            this.thumb_w = abstractSerializedData.readInt32(z);
            this.thumb_h = abstractSerializedData.readInt32(z);
            this.w = abstractSerializedData.readInt32(z);
            this.h = abstractSerializedData.readInt32(z);
            this.size = abstractSerializedData.readInt32(z);
            this.key = abstractSerializedData.readByteArray(z);
            this.iv = abstractSerializedData.readByteArray(z);
            this.caption = abstractSerializedData.readString(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeByteArray(this.thumb);
            abstractSerializedData.writeInt32(this.thumb_w);
            abstractSerializedData.writeInt32(this.thumb_h);
            abstractSerializedData.writeInt32(this.w);
            abstractSerializedData.writeInt32(this.h);
            abstractSerializedData.writeInt32(this.size);
            abstractSerializedData.writeByteArray(this.key);
            abstractSerializedData.writeByteArray(this.iv);
            abstractSerializedData.writeString(this.caption);
        }
    }

    public static class TL_decryptedMessageMediaPhoto_layer8 extends TL_decryptedMessageMediaPhoto {
        public static int constructor;
        public byte[] thumb;

        static {
            constructor = 846826124;
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.thumb = abstractSerializedData.readByteArray(z);
            this.thumb_w = abstractSerializedData.readInt32(z);
            this.thumb_h = abstractSerializedData.readInt32(z);
            this.w = abstractSerializedData.readInt32(z);
            this.h = abstractSerializedData.readInt32(z);
            this.size = abstractSerializedData.readInt32(z);
            this.key = abstractSerializedData.readByteArray(z);
            this.iv = abstractSerializedData.readByteArray(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeByteArray(this.thumb);
            abstractSerializedData.writeInt32(this.thumb_w);
            abstractSerializedData.writeInt32(this.thumb_h);
            abstractSerializedData.writeInt32(this.w);
            abstractSerializedData.writeInt32(this.h);
            abstractSerializedData.writeInt32(this.size);
            abstractSerializedData.writeByteArray(this.key);
            abstractSerializedData.writeByteArray(this.iv);
        }
    }

    public static class TL_decryptedMessageMediaVenue extends DecryptedMessageMedia {
        public static int constructor;

        static {
            constructor = -1978796689;
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.lat = abstractSerializedData.readDouble(z);
            this._long = abstractSerializedData.readDouble(z);
            this.title = abstractSerializedData.readString(z);
            this.address = abstractSerializedData.readString(z);
            this.provider = abstractSerializedData.readString(z);
            this.venue_id = abstractSerializedData.readString(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeDouble(this.lat);
            abstractSerializedData.writeDouble(this._long);
            abstractSerializedData.writeString(this.title);
            abstractSerializedData.writeString(this.address);
            abstractSerializedData.writeString(this.provider);
            abstractSerializedData.writeString(this.venue_id);
        }
    }

    public static class TL_decryptedMessageMediaVideo extends DecryptedMessageMedia {
        public static int constructor;
        public byte[] thumb;

        static {
            constructor = -1760785394;
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.thumb = abstractSerializedData.readByteArray(z);
            this.thumb_w = abstractSerializedData.readInt32(z);
            this.thumb_h = abstractSerializedData.readInt32(z);
            this.duration = abstractSerializedData.readInt32(z);
            this.mime_type = abstractSerializedData.readString(z);
            this.w = abstractSerializedData.readInt32(z);
            this.h = abstractSerializedData.readInt32(z);
            this.size = abstractSerializedData.readInt32(z);
            this.key = abstractSerializedData.readByteArray(z);
            this.iv = abstractSerializedData.readByteArray(z);
            this.caption = abstractSerializedData.readString(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeByteArray(this.thumb);
            abstractSerializedData.writeInt32(this.thumb_w);
            abstractSerializedData.writeInt32(this.thumb_h);
            abstractSerializedData.writeInt32(this.duration);
            abstractSerializedData.writeString(this.mime_type);
            abstractSerializedData.writeInt32(this.w);
            abstractSerializedData.writeInt32(this.h);
            abstractSerializedData.writeInt32(this.size);
            abstractSerializedData.writeByteArray(this.key);
            abstractSerializedData.writeByteArray(this.iv);
            abstractSerializedData.writeString(this.caption);
        }
    }

    public static class TL_decryptedMessageMediaVideo_layer17 extends TL_decryptedMessageMediaVideo {
        public static int constructor;
        public byte[] thumb;

        static {
            constructor = 1380598109;
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.thumb = abstractSerializedData.readByteArray(z);
            this.thumb_w = abstractSerializedData.readInt32(z);
            this.thumb_h = abstractSerializedData.readInt32(z);
            this.duration = abstractSerializedData.readInt32(z);
            this.mime_type = abstractSerializedData.readString(z);
            this.w = abstractSerializedData.readInt32(z);
            this.h = abstractSerializedData.readInt32(z);
            this.size = abstractSerializedData.readInt32(z);
            this.key = abstractSerializedData.readByteArray(z);
            this.iv = abstractSerializedData.readByteArray(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeByteArray(this.thumb);
            abstractSerializedData.writeInt32(this.thumb_w);
            abstractSerializedData.writeInt32(this.thumb_h);
            abstractSerializedData.writeInt32(this.duration);
            abstractSerializedData.writeString(this.mime_type);
            abstractSerializedData.writeInt32(this.w);
            abstractSerializedData.writeInt32(this.h);
            abstractSerializedData.writeInt32(this.size);
            abstractSerializedData.writeByteArray(this.key);
            abstractSerializedData.writeByteArray(this.iv);
        }
    }

    public static class TL_decryptedMessageMediaVideo_layer8 extends TL_decryptedMessageMediaVideo {
        public static int constructor;
        public byte[] thumb;

        static {
            constructor = 1290694387;
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.thumb = abstractSerializedData.readByteArray(z);
            this.thumb_w = abstractSerializedData.readInt32(z);
            this.thumb_h = abstractSerializedData.readInt32(z);
            this.duration = abstractSerializedData.readInt32(z);
            this.w = abstractSerializedData.readInt32(z);
            this.h = abstractSerializedData.readInt32(z);
            this.size = abstractSerializedData.readInt32(z);
            this.key = abstractSerializedData.readByteArray(z);
            this.iv = abstractSerializedData.readByteArray(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeByteArray(this.thumb);
            abstractSerializedData.writeInt32(this.thumb_w);
            abstractSerializedData.writeInt32(this.thumb_h);
            abstractSerializedData.writeInt32(this.duration);
            abstractSerializedData.writeInt32(this.w);
            abstractSerializedData.writeInt32(this.h);
            abstractSerializedData.writeInt32(this.size);
            abstractSerializedData.writeByteArray(this.key);
            abstractSerializedData.writeByteArray(this.iv);
        }
    }

    public static class TL_decryptedMessageMediaWebPage extends DecryptedMessageMedia {
        public static int constructor;

        static {
            constructor = -452652584;
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.url = abstractSerializedData.readString(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeString(this.url);
        }
    }

    public static class TL_decryptedMessageService extends DecryptedMessage {
        public static int constructor;

        static {
            constructor = 1930838368;
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.random_id = abstractSerializedData.readInt64(z);
            this.action = DecryptedMessageAction.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt64(this.random_id);
            this.action.serializeToStream(abstractSerializedData);
        }
    }

    public static class TL_decryptedMessageService_layer8 extends TL_decryptedMessageService {
        public static int constructor;

        static {
            constructor = -1438109059;
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.random_id = abstractSerializedData.readInt64(z);
            this.random_bytes = abstractSerializedData.readByteArray(z);
            this.action = DecryptedMessageAction.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt64(this.random_id);
            abstractSerializedData.writeByteArray(this.random_bytes);
            this.action.serializeToStream(abstractSerializedData);
        }
    }

    public static class TL_decryptedMessage_layer17 extends TL_decryptedMessage {
        public static int constructor;

        static {
            constructor = 541931640;
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.random_id = abstractSerializedData.readInt64(z);
            this.ttl = abstractSerializedData.readInt32(z);
            this.message = abstractSerializedData.readString(z);
            this.media = DecryptedMessageMedia.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt64(this.random_id);
            abstractSerializedData.writeInt32(this.ttl);
            abstractSerializedData.writeString(this.message);
            this.media.serializeToStream(abstractSerializedData);
        }
    }

    public static class TL_decryptedMessage_layer8 extends TL_decryptedMessage {
        public static int constructor;

        static {
            constructor = 528568095;
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.random_id = abstractSerializedData.readInt64(z);
            this.random_bytes = abstractSerializedData.readByteArray(z);
            this.message = abstractSerializedData.readString(z);
            this.media = DecryptedMessageMedia.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt64(this.random_id);
            abstractSerializedData.writeByteArray(this.random_bytes);
            abstractSerializedData.writeString(this.message);
            this.media.serializeToStream(abstractSerializedData);
        }
    }

    public static class TL_dialog extends TLObject {
        public static int constructor;
        public DraftMessage draft;
        public int flags;
        public long id;
        public int last_message_date;
        public PeerNotifySettings notify_settings;
        public Peer peer;
        public int pts;
        public int read_inbox_max_id;
        public int read_outbox_max_id;
        public int top_message;
        public int unread_count;

        static {
            constructor = 1728035348;
        }

        public static TL_dialog TLdeserialize(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            if (constructor == i) {
                TL_dialog tL_dialog = new TL_dialog();
                tL_dialog.readParams(abstractSerializedData, z);
                return tL_dialog;
            } else if (!z) {
                return null;
            } else {
                Object[] objArr = new Object[TLRPC.USER_FLAG_ACCESS_HASH];
                objArr[0] = Integer.valueOf(i);
                throw new RuntimeException(String.format("can't parse magic %x in TL_dialog", objArr));
            }
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.flags = abstractSerializedData.readInt32(z);
            this.peer = Peer.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
            this.top_message = abstractSerializedData.readInt32(z);
            this.read_inbox_max_id = abstractSerializedData.readInt32(z);
            this.read_outbox_max_id = abstractSerializedData.readInt32(z);
            this.unread_count = abstractSerializedData.readInt32(z);
            this.notify_settings = PeerNotifySettings.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
            if ((this.flags & TLRPC.USER_FLAG_ACCESS_HASH) != 0) {
                this.pts = abstractSerializedData.readInt32(z);
            }
            if ((this.flags & TLRPC.USER_FLAG_FIRST_NAME) != 0) {
                this.draft = DraftMessage.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
            }
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.flags);
            this.peer.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeInt32(this.top_message);
            abstractSerializedData.writeInt32(this.read_inbox_max_id);
            abstractSerializedData.writeInt32(this.read_outbox_max_id);
            abstractSerializedData.writeInt32(this.unread_count);
            this.notify_settings.serializeToStream(abstractSerializedData);
            if ((this.flags & TLRPC.USER_FLAG_ACCESS_HASH) != 0) {
                abstractSerializedData.writeInt32(this.pts);
            }
            if ((this.flags & TLRPC.USER_FLAG_FIRST_NAME) != 0) {
                this.draft.serializeToStream(abstractSerializedData);
            }
        }
    }

    public static class TL_disabledFeature extends TLObject {
        public static int constructor;
        public String description;
        public String feature;

        static {
            constructor = -1369215196;
        }

        public static TL_disabledFeature TLdeserialize(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            if (constructor == i) {
                TL_disabledFeature tL_disabledFeature = new TL_disabledFeature();
                tL_disabledFeature.readParams(abstractSerializedData, z);
                return tL_disabledFeature;
            } else if (!z) {
                return null;
            } else {
                Object[] objArr = new Object[TLRPC.USER_FLAG_ACCESS_HASH];
                objArr[0] = Integer.valueOf(i);
                throw new RuntimeException(String.format("can't parse magic %x in TL_disabledFeature", objArr));
            }
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.feature = abstractSerializedData.readString(z);
            this.description = abstractSerializedData.readString(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeString(this.feature);
            abstractSerializedData.writeString(this.description);
        }
    }

    public static class TL_document extends Document {
        public static int constructor;

        static {
            constructor = -2027738169;
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            int i = 0;
            this.id = abstractSerializedData.readInt64(z);
            this.access_hash = abstractSerializedData.readInt64(z);
            this.date = abstractSerializedData.readInt32(z);
            this.mime_type = abstractSerializedData.readString(z);
            this.size = abstractSerializedData.readInt32(z);
            this.thumb = PhotoSize.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
            this.dc_id = abstractSerializedData.readInt32(z);
            this.version = abstractSerializedData.readInt32(z);
            int readInt32 = abstractSerializedData.readInt32(z);
            if (readInt32 == 481674261) {
                readInt32 = abstractSerializedData.readInt32(z);
                while (i < readInt32) {
                    DocumentAttribute TLdeserialize = DocumentAttribute.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
                    if (TLdeserialize != null) {
                        this.attributes.add(TLdeserialize);
                        i += TLRPC.USER_FLAG_ACCESS_HASH;
                    } else {
                        return;
                    }
                }
            } else if (z) {
                Object[] objArr = new Object[TLRPC.USER_FLAG_ACCESS_HASH];
                objArr[0] = Integer.valueOf(readInt32);
                throw new RuntimeException(String.format("wrong Vector magic, got %x", objArr));
            }
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt64(this.id);
            abstractSerializedData.writeInt64(this.access_hash);
            abstractSerializedData.writeInt32(this.date);
            abstractSerializedData.writeString(this.mime_type);
            abstractSerializedData.writeInt32(this.size);
            this.thumb.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeInt32(this.dc_id);
            abstractSerializedData.writeInt32(this.version);
            abstractSerializedData.writeInt32(481674261);
            int size = this.attributes.size();
            abstractSerializedData.writeInt32(size);
            for (int i = 0; i < size; i += TLRPC.USER_FLAG_ACCESS_HASH) {
                ((DocumentAttribute) this.attributes.get(i)).serializeToStream(abstractSerializedData);
            }
        }
    }

    public static class TL_documentAttributeAnimated extends DocumentAttribute {
        public static int constructor;

        static {
            constructor = 297109817;
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
        }
    }

    public static class TL_documentAttributeAudio extends DocumentAttribute {
        public static int constructor;

        static {
            constructor = -1739392570;
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.flags = abstractSerializedData.readInt32(z);
            this.voice = (this.flags & TLRPC.MESSAGE_FLAG_HAS_VIEWS) != 0;
            this.duration = abstractSerializedData.readInt32(z);
            if ((this.flags & TLRPC.USER_FLAG_ACCESS_HASH) != 0) {
                this.title = abstractSerializedData.readString(z);
            }
            if ((this.flags & TLRPC.USER_FLAG_FIRST_NAME) != 0) {
                this.performer = abstractSerializedData.readString(z);
            }
            if ((this.flags & TLRPC.USER_FLAG_LAST_NAME) != 0) {
                this.waveform = abstractSerializedData.readByteArray(z);
            }
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.flags = this.voice ? this.flags | TLRPC.MESSAGE_FLAG_HAS_VIEWS : this.flags & -1025;
            abstractSerializedData.writeInt32(this.flags);
            abstractSerializedData.writeInt32(this.duration);
            if ((this.flags & TLRPC.USER_FLAG_ACCESS_HASH) != 0) {
                abstractSerializedData.writeString(this.title);
            }
            if ((this.flags & TLRPC.USER_FLAG_FIRST_NAME) != 0) {
                abstractSerializedData.writeString(this.performer);
            }
            if ((this.flags & TLRPC.USER_FLAG_LAST_NAME) != 0) {
                abstractSerializedData.writeByteArray(this.waveform);
            }
        }
    }

    public static class TL_documentAttributeAudio_layer45 extends TL_documentAttributeAudio {
        public static int constructor;

        static {
            constructor = -556656416;
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.duration = abstractSerializedData.readInt32(z);
            this.title = abstractSerializedData.readString(z);
            this.performer = abstractSerializedData.readString(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.duration);
            abstractSerializedData.writeString(this.title);
            abstractSerializedData.writeString(this.performer);
        }
    }

    public static class TL_documentAttributeAudio_old extends TL_documentAttributeAudio {
        public static int constructor;

        static {
            constructor = 85215461;
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.duration = abstractSerializedData.readInt32(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.duration);
        }
    }

    public static class TL_documentAttributeFilename extends DocumentAttribute {
        public static int constructor;

        static {
            constructor = 358154344;
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.file_name = abstractSerializedData.readString(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeString(this.file_name);
        }
    }

    public static class TL_documentAttributeHasStickers extends DocumentAttribute {
        public static int constructor;

        static {
            constructor = -1744710921;
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
        }
    }

    public static class TL_documentAttributeImageSize extends DocumentAttribute {
        public static int constructor;

        static {
            constructor = 1815593308;
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.w = abstractSerializedData.readInt32(z);
            this.h = abstractSerializedData.readInt32(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.w);
            abstractSerializedData.writeInt32(this.h);
        }
    }

    public static class TL_documentAttributeSticker extends DocumentAttribute {
        public static int constructor;

        static {
            constructor = 1662637586;
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.flags = abstractSerializedData.readInt32(z);
            this.mask = (this.flags & TLRPC.USER_FLAG_FIRST_NAME) != 0;
            this.alt = abstractSerializedData.readString(z);
            this.stickerset = InputStickerSet.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
            if ((this.flags & TLRPC.USER_FLAG_ACCESS_HASH) != 0) {
                this.mask_coords = TL_maskCoords.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
            }
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.flags = this.mask ? this.flags | TLRPC.USER_FLAG_FIRST_NAME : this.flags & -3;
            abstractSerializedData.writeInt32(this.flags);
            abstractSerializedData.writeString(this.alt);
            this.stickerset.serializeToStream(abstractSerializedData);
            if ((this.flags & TLRPC.USER_FLAG_ACCESS_HASH) != 0) {
                this.mask_coords.serializeToStream(abstractSerializedData);
            }
        }
    }

    public static class TL_documentAttributeSticker_layer55 extends TL_documentAttributeSticker {
        public static int constructor;

        static {
            constructor = 978674434;
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.alt = abstractSerializedData.readString(z);
            this.stickerset = InputStickerSet.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeString(this.alt);
            this.stickerset.serializeToStream(abstractSerializedData);
        }
    }

    public static class TL_documentAttributeSticker_old2 extends TL_documentAttributeSticker {
        public static int constructor;

        static {
            constructor = -1723033470;
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.alt = abstractSerializedData.readString(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeString(this.alt);
        }
    }

    public static class TL_documentAttributeSticker_old extends TL_documentAttributeSticker {
        public static int constructor;

        static {
            constructor = -83208409;
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
        }
    }

    public static class TL_documentAttributeVideo extends DocumentAttribute {
        public static int constructor;

        static {
            constructor = 1494273227;
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.duration = abstractSerializedData.readInt32(z);
            this.w = abstractSerializedData.readInt32(z);
            this.h = abstractSerializedData.readInt32(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.duration);
            abstractSerializedData.writeInt32(this.w);
            abstractSerializedData.writeInt32(this.h);
        }
    }

    public static class TL_documentEmpty extends Document {
        public static int constructor;

        static {
            constructor = 922273905;
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.id = abstractSerializedData.readInt64(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt64(this.id);
        }
    }

    public static class TL_documentEncrypted extends Document {
        public static int constructor;

        static {
            constructor = 1431655768;
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.id = abstractSerializedData.readInt64(z);
            this.access_hash = abstractSerializedData.readInt64(z);
            this.date = abstractSerializedData.readInt32(z);
            int position = abstractSerializedData.getPosition();
            try {
                this.mime_type = abstractSerializedData.readString(true);
            } catch (Exception e) {
                this.mime_type = "audio/ogg";
                if (abstractSerializedData instanceof NativeByteBuffer) {
                    ((NativeByteBuffer) abstractSerializedData).position(position);
                }
            }
            this.size = abstractSerializedData.readInt32(z);
            this.thumb = PhotoSize.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
            this.dc_id = abstractSerializedData.readInt32(z);
            int readInt32 = abstractSerializedData.readInt32(z);
            if (readInt32 == 481674261) {
                position = abstractSerializedData.readInt32(z);
                readInt32 = 0;
                while (readInt32 < position) {
                    DocumentAttribute TLdeserialize = DocumentAttribute.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
                    if (TLdeserialize != null) {
                        this.attributes.add(TLdeserialize);
                        readInt32 += TLRPC.USER_FLAG_ACCESS_HASH;
                    } else {
                        return;
                    }
                }
                this.key = abstractSerializedData.readByteArray(z);
                this.iv = abstractSerializedData.readByteArray(z);
            } else if (z) {
                Object[] objArr = new Object[TLRPC.USER_FLAG_ACCESS_HASH];
                objArr[0] = Integer.valueOf(readInt32);
                throw new RuntimeException(String.format("wrong Vector magic, got %x", objArr));
            }
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt64(this.id);
            abstractSerializedData.writeInt64(this.access_hash);
            abstractSerializedData.writeInt32(this.date);
            abstractSerializedData.writeString(this.mime_type);
            abstractSerializedData.writeInt32(this.size);
            this.thumb.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeInt32(this.dc_id);
            abstractSerializedData.writeInt32(481674261);
            int size = this.attributes.size();
            abstractSerializedData.writeInt32(size);
            for (int i = 0; i < size; i += TLRPC.USER_FLAG_ACCESS_HASH) {
                ((DocumentAttribute) this.attributes.get(i)).serializeToStream(abstractSerializedData);
            }
            abstractSerializedData.writeByteArray(this.key);
            abstractSerializedData.writeByteArray(this.iv);
        }
    }

    public static class TL_documentEncrypted_old extends TL_document {
        public static int constructor;

        static {
            constructor = 1431655766;
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.id = abstractSerializedData.readInt64(z);
            this.access_hash = abstractSerializedData.readInt64(z);
            this.user_id = abstractSerializedData.readInt32(z);
            this.date = abstractSerializedData.readInt32(z);
            this.file_name = abstractSerializedData.readString(z);
            this.mime_type = abstractSerializedData.readString(z);
            this.size = abstractSerializedData.readInt32(z);
            this.thumb = PhotoSize.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
            this.dc_id = abstractSerializedData.readInt32(z);
            this.key = abstractSerializedData.readByteArray(z);
            this.iv = abstractSerializedData.readByteArray(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt64(this.id);
            abstractSerializedData.writeInt64(this.access_hash);
            abstractSerializedData.writeInt32(this.user_id);
            abstractSerializedData.writeInt32(this.date);
            abstractSerializedData.writeString(this.file_name);
            abstractSerializedData.writeString(this.mime_type);
            abstractSerializedData.writeInt32(this.size);
            this.thumb.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeInt32(this.dc_id);
            abstractSerializedData.writeByteArray(this.key);
            abstractSerializedData.writeByteArray(this.iv);
        }
    }

    public static class TL_document_layer53 extends TL_document {
        public static int constructor;

        static {
            constructor = -106717361;
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            int i = 0;
            this.id = abstractSerializedData.readInt64(z);
            this.access_hash = abstractSerializedData.readInt64(z);
            this.date = abstractSerializedData.readInt32(z);
            this.mime_type = abstractSerializedData.readString(z);
            this.size = abstractSerializedData.readInt32(z);
            this.thumb = PhotoSize.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
            this.dc_id = abstractSerializedData.readInt32(z);
            int readInt32 = abstractSerializedData.readInt32(z);
            if (readInt32 == 481674261) {
                readInt32 = abstractSerializedData.readInt32(z);
                while (i < readInt32) {
                    DocumentAttribute TLdeserialize = DocumentAttribute.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
                    if (TLdeserialize != null) {
                        this.attributes.add(TLdeserialize);
                        i += TLRPC.USER_FLAG_ACCESS_HASH;
                    } else {
                        return;
                    }
                }
            } else if (z) {
                Object[] objArr = new Object[TLRPC.USER_FLAG_ACCESS_HASH];
                objArr[0] = Integer.valueOf(readInt32);
                throw new RuntimeException(String.format("wrong Vector magic, got %x", objArr));
            }
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt64(this.id);
            abstractSerializedData.writeInt64(this.access_hash);
            abstractSerializedData.writeInt32(this.date);
            abstractSerializedData.writeString(this.mime_type);
            abstractSerializedData.writeInt32(this.size);
            this.thumb.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeInt32(this.dc_id);
            abstractSerializedData.writeInt32(481674261);
            int size = this.attributes.size();
            abstractSerializedData.writeInt32(size);
            for (int i = 0; i < size; i += TLRPC.USER_FLAG_ACCESS_HASH) {
                ((DocumentAttribute) this.attributes.get(i)).serializeToStream(abstractSerializedData);
            }
        }
    }

    public static class TL_document_old extends TL_document {
        public static int constructor;

        static {
            constructor = -1627626714;
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.id = abstractSerializedData.readInt64(z);
            this.access_hash = abstractSerializedData.readInt64(z);
            this.user_id = abstractSerializedData.readInt32(z);
            this.date = abstractSerializedData.readInt32(z);
            this.file_name = abstractSerializedData.readString(z);
            this.mime_type = abstractSerializedData.readString(z);
            this.size = abstractSerializedData.readInt32(z);
            this.thumb = PhotoSize.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
            this.dc_id = abstractSerializedData.readInt32(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt64(this.id);
            abstractSerializedData.writeInt64(this.access_hash);
            abstractSerializedData.writeInt32(this.user_id);
            abstractSerializedData.writeInt32(this.date);
            abstractSerializedData.writeString(this.file_name);
            abstractSerializedData.writeString(this.mime_type);
            abstractSerializedData.writeInt32(this.size);
            this.thumb.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeInt32(this.dc_id);
        }
    }

    public static class TL_draftMessage extends DraftMessage {
        public static int constructor;

        static {
            constructor = -40996577;
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            int i = 0;
            this.flags = abstractSerializedData.readInt32(z);
            this.no_webpage = (this.flags & TLRPC.USER_FLAG_FIRST_NAME) != 0;
            if ((this.flags & TLRPC.USER_FLAG_ACCESS_HASH) != 0) {
                this.reply_to_msg_id = abstractSerializedData.readInt32(z);
            }
            this.message = abstractSerializedData.readString(z);
            if ((this.flags & TLRPC.USER_FLAG_USERNAME) != 0) {
                int readInt32 = abstractSerializedData.readInt32(z);
                if (readInt32 == 481674261) {
                    readInt32 = abstractSerializedData.readInt32(z);
                    while (i < readInt32) {
                        MessageEntity TLdeserialize = MessageEntity.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
                        if (TLdeserialize != null) {
                            this.entities.add(TLdeserialize);
                            i += TLRPC.USER_FLAG_ACCESS_HASH;
                        } else {
                            return;
                        }
                    }
                } else if (z) {
                    Object[] objArr = new Object[TLRPC.USER_FLAG_ACCESS_HASH];
                    objArr[0] = Integer.valueOf(readInt32);
                    throw new RuntimeException(String.format("wrong Vector magic, got %x", objArr));
                } else {
                    return;
                }
            }
            this.date = abstractSerializedData.readInt32(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.flags = this.no_webpage ? this.flags | TLRPC.USER_FLAG_FIRST_NAME : this.flags & -3;
            abstractSerializedData.writeInt32(this.flags);
            if ((this.flags & TLRPC.USER_FLAG_ACCESS_HASH) != 0) {
                abstractSerializedData.writeInt32(this.reply_to_msg_id);
            }
            abstractSerializedData.writeString(this.message);
            if ((this.flags & TLRPC.USER_FLAG_USERNAME) != 0) {
                abstractSerializedData.writeInt32(481674261);
                int size = this.entities.size();
                abstractSerializedData.writeInt32(size);
                for (int i = 0; i < size; i += TLRPC.USER_FLAG_ACCESS_HASH) {
                    ((MessageEntity) this.entities.get(i)).serializeToStream(abstractSerializedData);
                }
            }
            abstractSerializedData.writeInt32(this.date);
        }
    }

    public static class TL_draftMessageEmpty extends DraftMessage {
        public static int constructor;

        static {
            constructor = -1169445179;
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
        }
    }

    public static class TL_encryptedChat extends EncryptedChat {
        public static int constructor;

        static {
            constructor = -94974410;
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.id = abstractSerializedData.readInt32(z);
            this.access_hash = abstractSerializedData.readInt64(z);
            this.date = abstractSerializedData.readInt32(z);
            this.admin_id = abstractSerializedData.readInt32(z);
            this.participant_id = abstractSerializedData.readInt32(z);
            this.g_a_or_b = abstractSerializedData.readByteArray(z);
            this.key_fingerprint = abstractSerializedData.readInt64(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.id);
            abstractSerializedData.writeInt64(this.access_hash);
            abstractSerializedData.writeInt32(this.date);
            abstractSerializedData.writeInt32(this.admin_id);
            abstractSerializedData.writeInt32(this.participant_id);
            abstractSerializedData.writeByteArray(this.g_a_or_b);
            abstractSerializedData.writeInt64(this.key_fingerprint);
        }
    }

    public static class TL_encryptedChatDiscarded extends EncryptedChat {
        public static int constructor;

        static {
            constructor = 332848423;
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.id = abstractSerializedData.readInt32(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.id);
        }
    }

    public static class TL_encryptedChatEmpty extends EncryptedChat {
        public static int constructor;

        static {
            constructor = -1417756512;
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.id = abstractSerializedData.readInt32(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.id);
        }
    }

    public static class TL_encryptedChatRequested extends EncryptedChat {
        public static int constructor;

        static {
            constructor = -931638658;
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.id = abstractSerializedData.readInt32(z);
            this.access_hash = abstractSerializedData.readInt64(z);
            this.date = abstractSerializedData.readInt32(z);
            this.admin_id = abstractSerializedData.readInt32(z);
            this.participant_id = abstractSerializedData.readInt32(z);
            this.g_a = abstractSerializedData.readByteArray(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.id);
            abstractSerializedData.writeInt64(this.access_hash);
            abstractSerializedData.writeInt32(this.date);
            abstractSerializedData.writeInt32(this.admin_id);
            abstractSerializedData.writeInt32(this.participant_id);
            abstractSerializedData.writeByteArray(this.g_a);
        }
    }

    public static class TL_encryptedChatRequested_old extends TL_encryptedChatRequested {
        public static int constructor;

        static {
            constructor = -39213129;
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.id = abstractSerializedData.readInt32(z);
            this.access_hash = abstractSerializedData.readInt64(z);
            this.date = abstractSerializedData.readInt32(z);
            this.admin_id = abstractSerializedData.readInt32(z);
            this.participant_id = abstractSerializedData.readInt32(z);
            this.g_a = abstractSerializedData.readByteArray(z);
            this.nonce = abstractSerializedData.readByteArray(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.id);
            abstractSerializedData.writeInt64(this.access_hash);
            abstractSerializedData.writeInt32(this.date);
            abstractSerializedData.writeInt32(this.admin_id);
            abstractSerializedData.writeInt32(this.participant_id);
            abstractSerializedData.writeByteArray(this.g_a);
            abstractSerializedData.writeByteArray(this.nonce);
        }
    }

    public static class TL_encryptedChatWaiting extends EncryptedChat {
        public static int constructor;

        static {
            constructor = 1006044124;
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.id = abstractSerializedData.readInt32(z);
            this.access_hash = abstractSerializedData.readInt64(z);
            this.date = abstractSerializedData.readInt32(z);
            this.admin_id = abstractSerializedData.readInt32(z);
            this.participant_id = abstractSerializedData.readInt32(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.id);
            abstractSerializedData.writeInt64(this.access_hash);
            abstractSerializedData.writeInt32(this.date);
            abstractSerializedData.writeInt32(this.admin_id);
            abstractSerializedData.writeInt32(this.participant_id);
        }
    }

    public static class TL_encryptedChat_old extends TL_encryptedChat {
        public static int constructor;

        static {
            constructor = 1711395151;
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.id = abstractSerializedData.readInt32(z);
            this.access_hash = abstractSerializedData.readInt64(z);
            this.date = abstractSerializedData.readInt32(z);
            this.admin_id = abstractSerializedData.readInt32(z);
            this.participant_id = abstractSerializedData.readInt32(z);
            this.g_a_or_b = abstractSerializedData.readByteArray(z);
            this.nonce = abstractSerializedData.readByteArray(z);
            this.key_fingerprint = abstractSerializedData.readInt64(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.id);
            abstractSerializedData.writeInt64(this.access_hash);
            abstractSerializedData.writeInt32(this.date);
            abstractSerializedData.writeInt32(this.admin_id);
            abstractSerializedData.writeInt32(this.participant_id);
            abstractSerializedData.writeByteArray(this.g_a_or_b);
            abstractSerializedData.writeByteArray(this.nonce);
            abstractSerializedData.writeInt64(this.key_fingerprint);
        }
    }

    public static class TL_encryptedFile extends EncryptedFile {
        public static int constructor;

        static {
            constructor = 1248893260;
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.id = abstractSerializedData.readInt64(z);
            this.access_hash = abstractSerializedData.readInt64(z);
            this.size = abstractSerializedData.readInt32(z);
            this.dc_id = abstractSerializedData.readInt32(z);
            this.key_fingerprint = abstractSerializedData.readInt32(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt64(this.id);
            abstractSerializedData.writeInt64(this.access_hash);
            abstractSerializedData.writeInt32(this.size);
            abstractSerializedData.writeInt32(this.dc_id);
            abstractSerializedData.writeInt32(this.key_fingerprint);
        }
    }

    public static class TL_encryptedFileEmpty extends EncryptedFile {
        public static int constructor;

        static {
            constructor = -1038136962;
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
        }
    }

    public static class TL_encryptedMessage extends EncryptedMessage {
        public static int constructor;

        static {
            constructor = -317144808;
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.random_id = abstractSerializedData.readInt64(z);
            this.chat_id = abstractSerializedData.readInt32(z);
            this.date = abstractSerializedData.readInt32(z);
            this.bytes = abstractSerializedData.readByteArray(z);
            this.file = EncryptedFile.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt64(this.random_id);
            abstractSerializedData.writeInt32(this.chat_id);
            abstractSerializedData.writeInt32(this.date);
            abstractSerializedData.writeByteArray(this.bytes);
            this.file.serializeToStream(abstractSerializedData);
        }
    }

    public static class TL_encryptedMessageService extends EncryptedMessage {
        public static int constructor;

        static {
            constructor = 594758406;
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.random_id = abstractSerializedData.readInt64(z);
            this.chat_id = abstractSerializedData.readInt32(z);
            this.date = abstractSerializedData.readInt32(z);
            this.bytes = abstractSerializedData.readByteArray(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt64(this.random_id);
            abstractSerializedData.writeInt32(this.chat_id);
            abstractSerializedData.writeInt32(this.date);
            abstractSerializedData.writeByteArray(this.bytes);
        }
    }

    public static class TL_error extends TLObject {
        public static int constructor;
        public int code;
        public String text;

        static {
            constructor = -994444869;
        }

        public static TL_error TLdeserialize(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            if (constructor == i) {
                TL_error tL_error = new TL_error();
                tL_error.readParams(abstractSerializedData, z);
                return tL_error;
            } else if (!z) {
                return null;
            } else {
                Object[] objArr = new Object[TLRPC.USER_FLAG_ACCESS_HASH];
                objArr[0] = Integer.valueOf(i);
                throw new RuntimeException(String.format("can't parse magic %x in TL_error", objArr));
            }
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.code = abstractSerializedData.readInt32(z);
            this.text = abstractSerializedData.readString(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.code);
            abstractSerializedData.writeString(this.text);
        }
    }

    public static class TL_exportedMessageLink extends TLObject {
        public static int constructor;
        public String link;

        static {
            constructor = 524838915;
        }

        public static TL_exportedMessageLink TLdeserialize(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            if (constructor == i) {
                TL_exportedMessageLink tL_exportedMessageLink = new TL_exportedMessageLink();
                tL_exportedMessageLink.readParams(abstractSerializedData, z);
                return tL_exportedMessageLink;
            } else if (!z) {
                return null;
            } else {
                Object[] objArr = new Object[TLRPC.USER_FLAG_ACCESS_HASH];
                objArr[0] = Integer.valueOf(i);
                throw new RuntimeException(String.format("can't parse magic %x in TL_exportedMessageLink", objArr));
            }
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.link = abstractSerializedData.readString(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeString(this.link);
        }
    }

    public static class TL_fileEncryptedLocation extends FileLocation {
        public static int constructor;

        static {
            constructor = 1431655764;
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.dc_id = abstractSerializedData.readInt32(z);
            this.volume_id = abstractSerializedData.readInt64(z);
            this.local_id = abstractSerializedData.readInt32(z);
            this.secret = abstractSerializedData.readInt64(z);
            this.key = abstractSerializedData.readByteArray(z);
            this.iv = abstractSerializedData.readByteArray(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.dc_id);
            abstractSerializedData.writeInt64(this.volume_id);
            abstractSerializedData.writeInt32(this.local_id);
            abstractSerializedData.writeInt64(this.secret);
            abstractSerializedData.writeByteArray(this.key);
            abstractSerializedData.writeByteArray(this.iv);
        }
    }

    public static class TL_fileLocation extends FileLocation {
        public static int constructor;

        static {
            constructor = 1406570614;
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.dc_id = abstractSerializedData.readInt32(z);
            this.volume_id = abstractSerializedData.readInt64(z);
            this.local_id = abstractSerializedData.readInt32(z);
            this.secret = abstractSerializedData.readInt64(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.dc_id);
            abstractSerializedData.writeInt64(this.volume_id);
            abstractSerializedData.writeInt32(this.local_id);
            abstractSerializedData.writeInt64(this.secret);
        }
    }

    public static class TL_fileLocationUnavailable extends FileLocation {
        public static int constructor;

        static {
            constructor = 2086234950;
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.volume_id = abstractSerializedData.readInt64(z);
            this.local_id = abstractSerializedData.readInt32(z);
            this.secret = abstractSerializedData.readInt64(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt64(this.volume_id);
            abstractSerializedData.writeInt32(this.local_id);
            abstractSerializedData.writeInt64(this.secret);
        }
    }

    public static class TL_foundGif extends FoundGif {
        public static int constructor;

        static {
            constructor = 372165663;
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.url = abstractSerializedData.readString(z);
            this.thumb_url = abstractSerializedData.readString(z);
            this.content_url = abstractSerializedData.readString(z);
            this.content_type = abstractSerializedData.readString(z);
            this.w = abstractSerializedData.readInt32(z);
            this.h = abstractSerializedData.readInt32(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeString(this.url);
            abstractSerializedData.writeString(this.thumb_url);
            abstractSerializedData.writeString(this.content_url);
            abstractSerializedData.writeString(this.content_type);
            abstractSerializedData.writeInt32(this.w);
            abstractSerializedData.writeInt32(this.h);
        }
    }

    public static class TL_foundGifCached extends FoundGif {
        public static int constructor;

        static {
            constructor = -1670052855;
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.url = abstractSerializedData.readString(z);
            this.photo = Photo.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
            this.document = Document.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeString(this.url);
            this.photo.serializeToStream(abstractSerializedData);
            this.document.serializeToStream(abstractSerializedData);
        }
    }

    public static class TL_game extends TLObject {
        public static int constructor;
        public long access_hash;
        public String description;
        public Document document;
        public int flags;
        public long id;
        public Photo photo;
        public String short_name;
        public String title;

        static {
            constructor = -1107729093;
        }

        public static TL_game TLdeserialize(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            if (constructor == i) {
                TL_game tL_game = new TL_game();
                tL_game.readParams(abstractSerializedData, z);
                return tL_game;
            } else if (!z) {
                return null;
            } else {
                Object[] objArr = new Object[TLRPC.USER_FLAG_ACCESS_HASH];
                objArr[0] = Integer.valueOf(i);
                throw new RuntimeException(String.format("can't parse magic %x in TL_game", objArr));
            }
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.flags = abstractSerializedData.readInt32(z);
            this.id = abstractSerializedData.readInt64(z);
            this.access_hash = abstractSerializedData.readInt64(z);
            this.short_name = abstractSerializedData.readString(z);
            this.title = abstractSerializedData.readString(z);
            this.description = abstractSerializedData.readString(z);
            this.photo = Photo.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
            if ((this.flags & TLRPC.USER_FLAG_ACCESS_HASH) != 0) {
                this.document = Document.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
            }
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.flags);
            abstractSerializedData.writeInt64(this.id);
            abstractSerializedData.writeInt64(this.access_hash);
            abstractSerializedData.writeString(this.short_name);
            abstractSerializedData.writeString(this.title);
            abstractSerializedData.writeString(this.description);
            this.photo.serializeToStream(abstractSerializedData);
            if ((this.flags & TLRPC.USER_FLAG_ACCESS_HASH) != 0) {
                this.document.serializeToStream(abstractSerializedData);
            }
        }
    }

    public static class TL_geoChat extends Chat {
        public static int constructor;

        static {
            constructor = 1978329690;
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.id = abstractSerializedData.readInt32(z);
            this.access_hash = abstractSerializedData.readInt64(z);
            this.title = abstractSerializedData.readString(z);
            this.address = abstractSerializedData.readString(z);
            this.venue = abstractSerializedData.readString(z);
            this.geo = GeoPoint.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
            this.photo = ChatPhoto.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
            this.participants_count = abstractSerializedData.readInt32(z);
            this.date = abstractSerializedData.readInt32(z);
            this.checked_in = abstractSerializedData.readBool(z);
            this.version = abstractSerializedData.readInt32(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.id);
            abstractSerializedData.writeInt64(this.access_hash);
            abstractSerializedData.writeString(this.title);
            abstractSerializedData.writeString(this.address);
            abstractSerializedData.writeString(this.venue);
            this.geo.serializeToStream(abstractSerializedData);
            this.photo.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeInt32(this.participants_count);
            abstractSerializedData.writeInt32(this.date);
            abstractSerializedData.writeBool(this.checked_in);
            abstractSerializedData.writeInt32(this.version);
        }
    }

    public static class TL_geoChatMessage extends GeoChatMessage {
        public static int constructor;

        static {
            constructor = 1158019297;
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.chat_id = abstractSerializedData.readInt32(z);
            this.id = abstractSerializedData.readInt32(z);
            this.from_id = abstractSerializedData.readInt32(z);
            this.date = abstractSerializedData.readInt32(z);
            this.message = abstractSerializedData.readString(z);
            this.media = MessageMedia.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.chat_id);
            abstractSerializedData.writeInt32(this.id);
            abstractSerializedData.writeInt32(this.from_id);
            abstractSerializedData.writeInt32(this.date);
            abstractSerializedData.writeString(this.message);
            this.media.serializeToStream(abstractSerializedData);
        }
    }

    public static class TL_geoChatMessageEmpty extends GeoChatMessage {
        public static int constructor;

        static {
            constructor = 1613830811;
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.chat_id = abstractSerializedData.readInt32(z);
            this.id = abstractSerializedData.readInt32(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.chat_id);
            abstractSerializedData.writeInt32(this.id);
        }
    }

    public static class TL_geoChatMessageService extends GeoChatMessage {
        public static int constructor;

        static {
            constructor = -749755826;
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.chat_id = abstractSerializedData.readInt32(z);
            this.id = abstractSerializedData.readInt32(z);
            this.from_id = abstractSerializedData.readInt32(z);
            this.date = abstractSerializedData.readInt32(z);
            this.action = MessageAction.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.chat_id);
            abstractSerializedData.writeInt32(this.id);
            abstractSerializedData.writeInt32(this.from_id);
            abstractSerializedData.writeInt32(this.date);
            this.action.serializeToStream(abstractSerializedData);
        }
    }

    public static class TL_geoPoint extends GeoPoint {
        public static int constructor;

        static {
            constructor = 541710092;
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this._long = abstractSerializedData.readDouble(z);
            this.lat = abstractSerializedData.readDouble(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeDouble(this._long);
            abstractSerializedData.writeDouble(this.lat);
        }
    }

    public static class TL_geoPointEmpty extends GeoPoint {
        public static int constructor;

        static {
            constructor = 286776671;
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
        }
    }

    public static class TL_geochats_checkin extends TLObject {
        public static int constructor;
        public TL_inputGeoChat peer;

        static {
            constructor = 1437853947;
        }

        public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            return TL_geochats_statedMessage.TLdeserialize(abstractSerializedData, i, z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.peer.serializeToStream(abstractSerializedData);
        }
    }

    public static class TL_geochats_createGeoChat extends TLObject {
        public static int constructor;
        public String address;
        public InputGeoPoint geo_point;
        public String title;
        public String venue;

        static {
            constructor = 235482646;
        }

        public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            return TL_geochats_statedMessage.TLdeserialize(abstractSerializedData, i, z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeString(this.title);
            this.geo_point.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeString(this.address);
            abstractSerializedData.writeString(this.venue);
        }
    }

    public static class TL_geochats_editChatPhoto extends TLObject {
        public static int constructor;
        public TL_inputGeoChat peer;
        public InputChatPhoto photo;

        static {
            constructor = 903355029;
        }

        public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            return TL_geochats_statedMessage.TLdeserialize(abstractSerializedData, i, z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.peer.serializeToStream(abstractSerializedData);
            this.photo.serializeToStream(abstractSerializedData);
        }
    }

    public static class TL_geochats_editChatTitle extends TLObject {
        public static int constructor;
        public String address;
        public TL_inputGeoChat peer;
        public String title;

        static {
            constructor = 1284383347;
        }

        public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            return TL_geochats_statedMessage.TLdeserialize(abstractSerializedData, i, z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.peer.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeString(this.title);
            abstractSerializedData.writeString(this.address);
        }
    }

    public static class TL_geochats_getFullChat extends TLObject {
        public static int constructor;
        public TL_inputGeoChat peer;

        static {
            constructor = 1730338159;
        }

        public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            return TL_messages_chatFull.TLdeserialize(abstractSerializedData, i, z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.peer.serializeToStream(abstractSerializedData);
        }
    }

    public static class TL_geochats_getHistory extends TLObject {
        public static int constructor;
        public int limit;
        public int max_id;
        public int offset;
        public TL_inputGeoChat peer;

        static {
            constructor = -1254131096;
        }

        public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            return geochats_Messages.TLdeserialize(abstractSerializedData, i, z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.peer.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeInt32(this.offset);
            abstractSerializedData.writeInt32(this.max_id);
            abstractSerializedData.writeInt32(this.limit);
        }
    }

    public static class TL_geochats_getLocated extends TLObject {
        public static int constructor;
        public InputGeoPoint geo_point;
        public int limit;
        public int radius;

        static {
            constructor = 2132356495;
        }

        public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            return TL_geochats_located.TLdeserialize(abstractSerializedData, i, z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.geo_point.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeInt32(this.radius);
            abstractSerializedData.writeInt32(this.limit);
        }
    }

    public static class TL_geochats_getRecents extends TLObject {
        public static int constructor;
        public int limit;
        public int offset;

        static {
            constructor = -515735953;
        }

        public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            return geochats_Messages.TLdeserialize(abstractSerializedData, i, z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.offset);
            abstractSerializedData.writeInt32(this.limit);
        }
    }

    public static class TL_geochats_located extends TLObject {
        public static int constructor;
        public ArrayList<Chat> chats;
        public ArrayList<GeoChatMessage> messages;
        public ArrayList<TL_chatLocated> results;
        public ArrayList<User> users;

        static {
            constructor = 1224651367;
        }

        public TL_geochats_located() {
            this.results = new ArrayList();
            this.messages = new ArrayList();
            this.chats = new ArrayList();
            this.users = new ArrayList();
        }

        public static TL_geochats_located TLdeserialize(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            if (constructor == i) {
                TL_geochats_located tL_geochats_located = new TL_geochats_located();
                tL_geochats_located.readParams(abstractSerializedData, z);
                return tL_geochats_located;
            } else if (!z) {
                return null;
            } else {
                Object[] objArr = new Object[TLRPC.USER_FLAG_ACCESS_HASH];
                objArr[0] = Integer.valueOf(i);
                throw new RuntimeException(String.format("can't parse magic %x in TL_geochats_located", objArr));
            }
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            int i = 0;
            int readInt32 = abstractSerializedData.readInt32(z);
            Object[] objArr;
            if (readInt32 == 481674261) {
                int readInt322 = abstractSerializedData.readInt32(z);
                readInt32 = 0;
                while (readInt32 < readInt322) {
                    TL_chatLocated TLdeserialize = TL_chatLocated.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
                    if (TLdeserialize != null) {
                        this.results.add(TLdeserialize);
                        readInt32 += TLRPC.USER_FLAG_ACCESS_HASH;
                    } else {
                        return;
                    }
                }
                readInt32 = abstractSerializedData.readInt32(z);
                if (readInt32 == 481674261) {
                    readInt322 = abstractSerializedData.readInt32(z);
                    readInt32 = 0;
                    while (readInt32 < readInt322) {
                        GeoChatMessage TLdeserialize2 = GeoChatMessage.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
                        if (TLdeserialize2 != null) {
                            this.messages.add(TLdeserialize2);
                            readInt32 += TLRPC.USER_FLAG_ACCESS_HASH;
                        } else {
                            return;
                        }
                    }
                    readInt32 = abstractSerializedData.readInt32(z);
                    if (readInt32 == 481674261) {
                        readInt322 = abstractSerializedData.readInt32(z);
                        readInt32 = 0;
                        while (readInt32 < readInt322) {
                            Chat TLdeserialize3 = Chat.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
                            if (TLdeserialize3 != null) {
                                this.chats.add(TLdeserialize3);
                                readInt32 += TLRPC.USER_FLAG_ACCESS_HASH;
                            } else {
                                return;
                            }
                        }
                        readInt32 = abstractSerializedData.readInt32(z);
                        if (readInt32 == 481674261) {
                            readInt32 = abstractSerializedData.readInt32(z);
                            while (i < readInt32) {
                                User TLdeserialize4 = User.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
                                if (TLdeserialize4 != null) {
                                    this.users.add(TLdeserialize4);
                                    i += TLRPC.USER_FLAG_ACCESS_HASH;
                                } else {
                                    return;
                                }
                            }
                        } else if (z) {
                            objArr = new Object[TLRPC.USER_FLAG_ACCESS_HASH];
                            objArr[0] = Integer.valueOf(readInt32);
                            throw new RuntimeException(String.format("wrong Vector magic, got %x", objArr));
                        }
                    } else if (z) {
                        objArr = new Object[TLRPC.USER_FLAG_ACCESS_HASH];
                        objArr[0] = Integer.valueOf(readInt32);
                        throw new RuntimeException(String.format("wrong Vector magic, got %x", objArr));
                    }
                } else if (z) {
                    objArr = new Object[TLRPC.USER_FLAG_ACCESS_HASH];
                    objArr[0] = Integer.valueOf(readInt32);
                    throw new RuntimeException(String.format("wrong Vector magic, got %x", objArr));
                }
            } else if (z) {
                objArr = new Object[TLRPC.USER_FLAG_ACCESS_HASH];
                objArr[0] = Integer.valueOf(readInt32);
                throw new RuntimeException(String.format("wrong Vector magic, got %x", objArr));
            }
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            int i;
            int i2 = 0;
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(481674261);
            int size = this.results.size();
            abstractSerializedData.writeInt32(size);
            for (i = 0; i < size; i += TLRPC.USER_FLAG_ACCESS_HASH) {
                ((TL_chatLocated) this.results.get(i)).serializeToStream(abstractSerializedData);
            }
            abstractSerializedData.writeInt32(481674261);
            size = this.messages.size();
            abstractSerializedData.writeInt32(size);
            for (i = 0; i < size; i += TLRPC.USER_FLAG_ACCESS_HASH) {
                ((GeoChatMessage) this.messages.get(i)).serializeToStream(abstractSerializedData);
            }
            abstractSerializedData.writeInt32(481674261);
            size = this.chats.size();
            abstractSerializedData.writeInt32(size);
            for (i = 0; i < size; i += TLRPC.USER_FLAG_ACCESS_HASH) {
                ((Chat) this.chats.get(i)).serializeToStream(abstractSerializedData);
            }
            abstractSerializedData.writeInt32(481674261);
            i = this.users.size();
            abstractSerializedData.writeInt32(i);
            while (i2 < i) {
                ((User) this.users.get(i2)).serializeToStream(abstractSerializedData);
                i2 += TLRPC.USER_FLAG_ACCESS_HASH;
            }
        }
    }

    public static class geochats_Messages extends TLObject {
        public ArrayList<Chat> chats;
        public int count;
        public ArrayList<GeoChatMessage> messages;
        public ArrayList<User> users;

        public geochats_Messages() {
            this.messages = new ArrayList();
            this.chats = new ArrayList();
            this.users = new ArrayList();
        }

        public static geochats_Messages TLdeserialize(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            geochats_Messages com_hanista_mobogram_tgnet_TLRPC_geochats_Messages = null;
            switch (i) {
                case -1135057944:
                    com_hanista_mobogram_tgnet_TLRPC_geochats_Messages = new TL_geochats_messagesSlice();
                    break;
                case -783127119:
                    com_hanista_mobogram_tgnet_TLRPC_geochats_Messages = new TL_geochats_messages();
                    break;
            }
            if (com_hanista_mobogram_tgnet_TLRPC_geochats_Messages == null && z) {
                Object[] objArr = new Object[TLRPC.USER_FLAG_ACCESS_HASH];
                objArr[0] = Integer.valueOf(i);
                throw new RuntimeException(String.format("can't parse magic %x in geochats_Messages", objArr));
            }
            if (com_hanista_mobogram_tgnet_TLRPC_geochats_Messages != null) {
                com_hanista_mobogram_tgnet_TLRPC_geochats_Messages.readParams(abstractSerializedData, z);
            }
            return com_hanista_mobogram_tgnet_TLRPC_geochats_Messages;
        }
    }

    public static class TL_geochats_messages extends geochats_Messages {
        public static int constructor;

        static {
            constructor = -783127119;
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            int i = 0;
            int readInt32 = abstractSerializedData.readInt32(z);
            Object[] objArr;
            if (readInt32 == 481674261) {
                int readInt322 = abstractSerializedData.readInt32(z);
                readInt32 = 0;
                while (readInt32 < readInt322) {
                    GeoChatMessage TLdeserialize = GeoChatMessage.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
                    if (TLdeserialize != null) {
                        this.messages.add(TLdeserialize);
                        readInt32 += TLRPC.USER_FLAG_ACCESS_HASH;
                    } else {
                        return;
                    }
                }
                readInt32 = abstractSerializedData.readInt32(z);
                if (readInt32 == 481674261) {
                    readInt322 = abstractSerializedData.readInt32(z);
                    readInt32 = 0;
                    while (readInt32 < readInt322) {
                        Chat TLdeserialize2 = Chat.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
                        if (TLdeserialize2 != null) {
                            this.chats.add(TLdeserialize2);
                            readInt32 += TLRPC.USER_FLAG_ACCESS_HASH;
                        } else {
                            return;
                        }
                    }
                    readInt32 = abstractSerializedData.readInt32(z);
                    if (readInt32 == 481674261) {
                        readInt32 = abstractSerializedData.readInt32(z);
                        while (i < readInt32) {
                            User TLdeserialize3 = User.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
                            if (TLdeserialize3 != null) {
                                this.users.add(TLdeserialize3);
                                i += TLRPC.USER_FLAG_ACCESS_HASH;
                            } else {
                                return;
                            }
                        }
                    } else if (z) {
                        objArr = new Object[TLRPC.USER_FLAG_ACCESS_HASH];
                        objArr[0] = Integer.valueOf(readInt32);
                        throw new RuntimeException(String.format("wrong Vector magic, got %x", objArr));
                    }
                } else if (z) {
                    objArr = new Object[TLRPC.USER_FLAG_ACCESS_HASH];
                    objArr[0] = Integer.valueOf(readInt32);
                    throw new RuntimeException(String.format("wrong Vector magic, got %x", objArr));
                }
            } else if (z) {
                objArr = new Object[TLRPC.USER_FLAG_ACCESS_HASH];
                objArr[0] = Integer.valueOf(readInt32);
                throw new RuntimeException(String.format("wrong Vector magic, got %x", objArr));
            }
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            int i;
            int i2 = 0;
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(481674261);
            int size = this.messages.size();
            abstractSerializedData.writeInt32(size);
            for (i = 0; i < size; i += TLRPC.USER_FLAG_ACCESS_HASH) {
                ((GeoChatMessage) this.messages.get(i)).serializeToStream(abstractSerializedData);
            }
            abstractSerializedData.writeInt32(481674261);
            size = this.chats.size();
            abstractSerializedData.writeInt32(size);
            for (i = 0; i < size; i += TLRPC.USER_FLAG_ACCESS_HASH) {
                ((Chat) this.chats.get(i)).serializeToStream(abstractSerializedData);
            }
            abstractSerializedData.writeInt32(481674261);
            i = this.users.size();
            abstractSerializedData.writeInt32(i);
            while (i2 < i) {
                ((User) this.users.get(i2)).serializeToStream(abstractSerializedData);
                i2 += TLRPC.USER_FLAG_ACCESS_HASH;
            }
        }
    }

    public static class TL_geochats_messagesSlice extends geochats_Messages {
        public static int constructor;

        static {
            constructor = -1135057944;
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            int i = 0;
            this.count = abstractSerializedData.readInt32(z);
            int readInt32 = abstractSerializedData.readInt32(z);
            Object[] objArr;
            if (readInt32 == 481674261) {
                int readInt322 = abstractSerializedData.readInt32(z);
                readInt32 = 0;
                while (readInt32 < readInt322) {
                    GeoChatMessage TLdeserialize = GeoChatMessage.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
                    if (TLdeserialize != null) {
                        this.messages.add(TLdeserialize);
                        readInt32 += TLRPC.USER_FLAG_ACCESS_HASH;
                    } else {
                        return;
                    }
                }
                readInt32 = abstractSerializedData.readInt32(z);
                if (readInt32 == 481674261) {
                    readInt322 = abstractSerializedData.readInt32(z);
                    readInt32 = 0;
                    while (readInt32 < readInt322) {
                        Chat TLdeserialize2 = Chat.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
                        if (TLdeserialize2 != null) {
                            this.chats.add(TLdeserialize2);
                            readInt32 += TLRPC.USER_FLAG_ACCESS_HASH;
                        } else {
                            return;
                        }
                    }
                    readInt32 = abstractSerializedData.readInt32(z);
                    if (readInt32 == 481674261) {
                        readInt32 = abstractSerializedData.readInt32(z);
                        while (i < readInt32) {
                            User TLdeserialize3 = User.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
                            if (TLdeserialize3 != null) {
                                this.users.add(TLdeserialize3);
                                i += TLRPC.USER_FLAG_ACCESS_HASH;
                            } else {
                                return;
                            }
                        }
                    } else if (z) {
                        objArr = new Object[TLRPC.USER_FLAG_ACCESS_HASH];
                        objArr[0] = Integer.valueOf(readInt32);
                        throw new RuntimeException(String.format("wrong Vector magic, got %x", objArr));
                    }
                } else if (z) {
                    objArr = new Object[TLRPC.USER_FLAG_ACCESS_HASH];
                    objArr[0] = Integer.valueOf(readInt32);
                    throw new RuntimeException(String.format("wrong Vector magic, got %x", objArr));
                }
            } else if (z) {
                objArr = new Object[TLRPC.USER_FLAG_ACCESS_HASH];
                objArr[0] = Integer.valueOf(readInt32);
                throw new RuntimeException(String.format("wrong Vector magic, got %x", objArr));
            }
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            int i;
            int i2 = 0;
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.count);
            abstractSerializedData.writeInt32(481674261);
            int size = this.messages.size();
            abstractSerializedData.writeInt32(size);
            for (i = 0; i < size; i += TLRPC.USER_FLAG_ACCESS_HASH) {
                ((GeoChatMessage) this.messages.get(i)).serializeToStream(abstractSerializedData);
            }
            abstractSerializedData.writeInt32(481674261);
            size = this.chats.size();
            abstractSerializedData.writeInt32(size);
            for (i = 0; i < size; i += TLRPC.USER_FLAG_ACCESS_HASH) {
                ((Chat) this.chats.get(i)).serializeToStream(abstractSerializedData);
            }
            abstractSerializedData.writeInt32(481674261);
            i = this.users.size();
            abstractSerializedData.writeInt32(i);
            while (i2 < i) {
                ((User) this.users.get(i2)).serializeToStream(abstractSerializedData);
                i2 += TLRPC.USER_FLAG_ACCESS_HASH;
            }
        }
    }

    public static class TL_geochats_search extends TLObject {
        public static int constructor;
        public MessagesFilter filter;
        public int limit;
        public int max_date;
        public int max_id;
        public int min_date;
        public int offset;
        public TL_inputGeoChat peer;
        public String f2666q;

        static {
            constructor = -808598451;
        }

        public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            return geochats_Messages.TLdeserialize(abstractSerializedData, i, z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.peer.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeString(this.f2666q);
            this.filter.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeInt32(this.min_date);
            abstractSerializedData.writeInt32(this.max_date);
            abstractSerializedData.writeInt32(this.offset);
            abstractSerializedData.writeInt32(this.max_id);
            abstractSerializedData.writeInt32(this.limit);
        }
    }

    public static class TL_geochats_sendMedia extends TLObject {
        public static int constructor;
        public InputMedia media;
        public TL_inputGeoChat peer;
        public long random_id;

        static {
            constructor = -1192173825;
        }

        public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            return TL_geochats_statedMessage.TLdeserialize(abstractSerializedData, i, z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.peer.serializeToStream(abstractSerializedData);
            this.media.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeInt64(this.random_id);
        }
    }

    public static class TL_geochats_sendMessage extends TLObject {
        public static int constructor;
        public String message;
        public TL_inputGeoChat peer;
        public long random_id;

        static {
            constructor = 102432836;
        }

        public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            return TL_geochats_statedMessage.TLdeserialize(abstractSerializedData, i, z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.peer.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeString(this.message);
            abstractSerializedData.writeInt64(this.random_id);
        }
    }

    public static class TL_geochats_setTyping extends TLObject {
        public static int constructor;
        public TL_inputGeoChat peer;
        public boolean typing;

        static {
            constructor = 146319145;
        }

        public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            return Bool.TLdeserialize(abstractSerializedData, i, z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.peer.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeBool(this.typing);
        }
    }

    public static class TL_geochats_statedMessage extends TLObject {
        public static int constructor;
        public ArrayList<Chat> chats;
        public GeoChatMessage message;
        public int seq;
        public ArrayList<User> users;

        static {
            constructor = 397498251;
        }

        public TL_geochats_statedMessage() {
            this.chats = new ArrayList();
            this.users = new ArrayList();
        }

        public static TL_geochats_statedMessage TLdeserialize(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            if (constructor == i) {
                TL_geochats_statedMessage tL_geochats_statedMessage = new TL_geochats_statedMessage();
                tL_geochats_statedMessage.readParams(abstractSerializedData, z);
                return tL_geochats_statedMessage;
            } else if (!z) {
                return null;
            } else {
                Object[] objArr = new Object[TLRPC.USER_FLAG_ACCESS_HASH];
                objArr[0] = Integer.valueOf(i);
                throw new RuntimeException(String.format("can't parse magic %x in TL_geochats_statedMessage", objArr));
            }
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            int i = 0;
            this.message = GeoChatMessage.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
            int readInt32 = abstractSerializedData.readInt32(z);
            Object[] objArr;
            if (readInt32 == 481674261) {
                int readInt322 = abstractSerializedData.readInt32(z);
                readInt32 = 0;
                while (readInt32 < readInt322) {
                    Chat TLdeserialize = Chat.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
                    if (TLdeserialize != null) {
                        this.chats.add(TLdeserialize);
                        readInt32 += TLRPC.USER_FLAG_ACCESS_HASH;
                    } else {
                        return;
                    }
                }
                readInt32 = abstractSerializedData.readInt32(z);
                if (readInt32 == 481674261) {
                    readInt32 = abstractSerializedData.readInt32(z);
                    while (i < readInt32) {
                        User TLdeserialize2 = User.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
                        if (TLdeserialize2 != null) {
                            this.users.add(TLdeserialize2);
                            i += TLRPC.USER_FLAG_ACCESS_HASH;
                        } else {
                            return;
                        }
                    }
                    this.seq = abstractSerializedData.readInt32(z);
                } else if (z) {
                    objArr = new Object[TLRPC.USER_FLAG_ACCESS_HASH];
                    objArr[0] = Integer.valueOf(readInt32);
                    throw new RuntimeException(String.format("wrong Vector magic, got %x", objArr));
                }
            } else if (z) {
                objArr = new Object[TLRPC.USER_FLAG_ACCESS_HASH];
                objArr[0] = Integer.valueOf(readInt32);
                throw new RuntimeException(String.format("wrong Vector magic, got %x", objArr));
            }
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            int i;
            int i2 = 0;
            abstractSerializedData.writeInt32(constructor);
            this.message.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeInt32(481674261);
            int size = this.chats.size();
            abstractSerializedData.writeInt32(size);
            for (i = 0; i < size; i += TLRPC.USER_FLAG_ACCESS_HASH) {
                ((Chat) this.chats.get(i)).serializeToStream(abstractSerializedData);
            }
            abstractSerializedData.writeInt32(481674261);
            i = this.users.size();
            abstractSerializedData.writeInt32(i);
            while (i2 < i) {
                ((User) this.users.get(i2)).serializeToStream(abstractSerializedData);
                i2 += TLRPC.USER_FLAG_ACCESS_HASH;
            }
            abstractSerializedData.writeInt32(this.seq);
        }
    }

    public static class help_AppChangelog extends TLObject {
        public String text;

        public static help_AppChangelog TLdeserialize(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            help_AppChangelog com_hanista_mobogram_tgnet_TLRPC_help_AppChangelog = null;
            switch (i) {
                case -1350696044:
                    com_hanista_mobogram_tgnet_TLRPC_help_AppChangelog = new TL_help_appChangelogEmpty();
                    break;
                case 1181279933:
                    com_hanista_mobogram_tgnet_TLRPC_help_AppChangelog = new TL_help_appChangelog();
                    break;
            }
            if (com_hanista_mobogram_tgnet_TLRPC_help_AppChangelog == null && z) {
                Object[] objArr = new Object[TLRPC.USER_FLAG_ACCESS_HASH];
                objArr[0] = Integer.valueOf(i);
                throw new RuntimeException(String.format("can't parse magic %x in help_AppChangelog", objArr));
            }
            if (com_hanista_mobogram_tgnet_TLRPC_help_AppChangelog != null) {
                com_hanista_mobogram_tgnet_TLRPC_help_AppChangelog.readParams(abstractSerializedData, z);
            }
            return com_hanista_mobogram_tgnet_TLRPC_help_AppChangelog;
        }
    }

    public static class TL_help_appChangelog extends help_AppChangelog {
        public static int constructor;

        static {
            constructor = 1181279933;
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.text = abstractSerializedData.readString(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeString(this.text);
        }
    }

    public static class TL_help_appChangelogEmpty extends help_AppChangelog {
        public static int constructor;

        static {
            constructor = -1350696044;
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
        }
    }

    public static class help_AppUpdate extends TLObject {
        public boolean critical;
        public int id;
        public String text;
        public String url;

        public static help_AppUpdate TLdeserialize(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            help_AppUpdate com_hanista_mobogram_tgnet_TLRPC_help_AppUpdate = null;
            switch (i) {
                case -1987579119:
                    com_hanista_mobogram_tgnet_TLRPC_help_AppUpdate = new TL_help_appUpdate();
                    break;
                case -1000708810:
                    com_hanista_mobogram_tgnet_TLRPC_help_AppUpdate = new TL_help_noAppUpdate();
                    break;
            }
            if (com_hanista_mobogram_tgnet_TLRPC_help_AppUpdate == null && z) {
                Object[] objArr = new Object[TLRPC.USER_FLAG_ACCESS_HASH];
                objArr[0] = Integer.valueOf(i);
                throw new RuntimeException(String.format("can't parse magic %x in help_AppUpdate", objArr));
            }
            if (com_hanista_mobogram_tgnet_TLRPC_help_AppUpdate != null) {
                com_hanista_mobogram_tgnet_TLRPC_help_AppUpdate.readParams(abstractSerializedData, z);
            }
            return com_hanista_mobogram_tgnet_TLRPC_help_AppUpdate;
        }
    }

    public static class TL_help_appUpdate extends help_AppUpdate {
        public static int constructor;

        static {
            constructor = -1987579119;
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.id = abstractSerializedData.readInt32(z);
            this.critical = abstractSerializedData.readBool(z);
            this.url = abstractSerializedData.readString(z);
            this.text = abstractSerializedData.readString(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.id);
            abstractSerializedData.writeBool(this.critical);
            abstractSerializedData.writeString(this.url);
            abstractSerializedData.writeString(this.text);
        }
    }

    public static class TL_help_getAppChangelog extends TLObject {
        public static int constructor;

        static {
            constructor = -1189013126;
        }

        public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            return help_AppChangelog.TLdeserialize(abstractSerializedData, i, z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
        }
    }

    public static class TL_help_getAppUpdate extends TLObject {
        public static int constructor;

        static {
            constructor = -1372724842;
        }

        public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            return help_AppUpdate.TLdeserialize(abstractSerializedData, i, z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
        }
    }

    public static class TL_help_getConfig extends TLObject {
        public static int constructor;

        static {
            constructor = -990308245;
        }

        public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            return TL_config.TLdeserialize(abstractSerializedData, i, z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
        }
    }

    public static class TL_help_getInviteText extends TLObject {
        public static int constructor;

        static {
            constructor = 1295590211;
        }

        public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            return TL_help_inviteText.TLdeserialize(abstractSerializedData, i, z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
        }
    }

    public static class TL_help_getNearestDc extends TLObject {
        public static int constructor;

        static {
            constructor = 531836966;
        }

        public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            return TL_nearestDc.TLdeserialize(abstractSerializedData, i, z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
        }
    }

    public static class TL_help_getSupport extends TLObject {
        public static int constructor;

        static {
            constructor = -1663104819;
        }

        public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            return TL_help_support.TLdeserialize(abstractSerializedData, i, z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
        }
    }

    public static class TL_help_getTermsOfService extends TLObject {
        public static int constructor;

        static {
            constructor = 889286899;
        }

        public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            return TL_help_termsOfService.TLdeserialize(abstractSerializedData, i, z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
        }
    }

    public static class TL_help_inviteText extends TLObject {
        public static int constructor;
        public String message;

        static {
            constructor = 415997816;
        }

        public static TL_help_inviteText TLdeserialize(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            if (constructor == i) {
                TL_help_inviteText tL_help_inviteText = new TL_help_inviteText();
                tL_help_inviteText.readParams(abstractSerializedData, z);
                return tL_help_inviteText;
            } else if (!z) {
                return null;
            } else {
                Object[] objArr = new Object[TLRPC.USER_FLAG_ACCESS_HASH];
                objArr[0] = Integer.valueOf(i);
                throw new RuntimeException(String.format("can't parse magic %x in TL_help_inviteText", objArr));
            }
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.message = abstractSerializedData.readString(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeString(this.message);
        }
    }

    public static class TL_help_noAppUpdate extends help_AppUpdate {
        public static int constructor;

        static {
            constructor = -1000708810;
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
        }
    }

    public static class TL_help_saveAppLog extends TLObject {
        public static int constructor;
        public ArrayList<TL_inputAppEvent> events;

        static {
            constructor = 1862465352;
        }

        public TL_help_saveAppLog() {
            this.events = new ArrayList();
        }

        public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            return Bool.TLdeserialize(abstractSerializedData, i, z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(481674261);
            int size = this.events.size();
            abstractSerializedData.writeInt32(size);
            for (int i = 0; i < size; i += TLRPC.USER_FLAG_ACCESS_HASH) {
                ((TL_inputAppEvent) this.events.get(i)).serializeToStream(abstractSerializedData);
            }
        }
    }

    public static class TL_help_support extends TLObject {
        public static int constructor;
        public String phone_number;
        public User user;

        static {
            constructor = 398898678;
        }

        public static TL_help_support TLdeserialize(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            if (constructor == i) {
                TL_help_support tL_help_support = new TL_help_support();
                tL_help_support.readParams(abstractSerializedData, z);
                return tL_help_support;
            } else if (!z) {
                return null;
            } else {
                Object[] objArr = new Object[TLRPC.USER_FLAG_ACCESS_HASH];
                objArr[0] = Integer.valueOf(i);
                throw new RuntimeException(String.format("can't parse magic %x in TL_help_support", objArr));
            }
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.phone_number = abstractSerializedData.readString(z);
            this.user = User.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeString(this.phone_number);
            this.user.serializeToStream(abstractSerializedData);
        }
    }

    public static class TL_help_termsOfService extends TLObject {
        public static int constructor;
        public String text;

        static {
            constructor = -236044656;
        }

        public static TL_help_termsOfService TLdeserialize(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            if (constructor == i) {
                TL_help_termsOfService tL_help_termsOfService = new TL_help_termsOfService();
                tL_help_termsOfService.readParams(abstractSerializedData, z);
                return tL_help_termsOfService;
            } else if (!z) {
                return null;
            } else {
                Object[] objArr = new Object[TLRPC.USER_FLAG_ACCESS_HASH];
                objArr[0] = Integer.valueOf(i);
                throw new RuntimeException(String.format("can't parse magic %x in TL_help_termsOfService", objArr));
            }
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.text = abstractSerializedData.readString(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeString(this.text);
        }
    }

    public static class TL_highScore extends TLObject {
        public static int constructor;
        public int pos;
        public int score;
        public int user_id;

        static {
            constructor = 1493171408;
        }

        public static TL_highScore TLdeserialize(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            if (constructor == i) {
                TL_highScore tL_highScore = new TL_highScore();
                tL_highScore.readParams(abstractSerializedData, z);
                return tL_highScore;
            } else if (!z) {
                return null;
            } else {
                Object[] objArr = new Object[TLRPC.USER_FLAG_ACCESS_HASH];
                objArr[0] = Integer.valueOf(i);
                throw new RuntimeException(String.format("can't parse magic %x in TL_highScore", objArr));
            }
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.pos = abstractSerializedData.readInt32(z);
            this.user_id = abstractSerializedData.readInt32(z);
            this.score = abstractSerializedData.readInt32(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.pos);
            abstractSerializedData.writeInt32(this.user_id);
            abstractSerializedData.writeInt32(this.score);
        }
    }

    public static class TL_importedContact extends TLObject {
        public static int constructor;
        public long client_id;
        public int user_id;

        static {
            constructor = -805141448;
        }

        public static TL_importedContact TLdeserialize(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            if (constructor == i) {
                TL_importedContact tL_importedContact = new TL_importedContact();
                tL_importedContact.readParams(abstractSerializedData, z);
                return tL_importedContact;
            } else if (!z) {
                return null;
            } else {
                Object[] objArr = new Object[TLRPC.USER_FLAG_ACCESS_HASH];
                objArr[0] = Integer.valueOf(i);
                throw new RuntimeException(String.format("can't parse magic %x in TL_importedContact", objArr));
            }
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.user_id = abstractSerializedData.readInt32(z);
            this.client_id = abstractSerializedData.readInt64(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.user_id);
            abstractSerializedData.writeInt64(this.client_id);
        }
    }

    public static class TL_inlineBotSwitchPM extends TLObject {
        public static int constructor;
        public String start_param;
        public String text;

        static {
            constructor = 1008755359;
        }

        public static TL_inlineBotSwitchPM TLdeserialize(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            if (constructor == i) {
                TL_inlineBotSwitchPM tL_inlineBotSwitchPM = new TL_inlineBotSwitchPM();
                tL_inlineBotSwitchPM.readParams(abstractSerializedData, z);
                return tL_inlineBotSwitchPM;
            } else if (!z) {
                return null;
            } else {
                Object[] objArr = new Object[TLRPC.USER_FLAG_ACCESS_HASH];
                objArr[0] = Integer.valueOf(i);
                throw new RuntimeException(String.format("can't parse magic %x in TL_inlineBotSwitchPM", objArr));
            }
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.text = abstractSerializedData.readString(z);
            this.start_param = abstractSerializedData.readString(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeString(this.text);
            abstractSerializedData.writeString(this.start_param);
        }
    }

    public static class TL_inputAppEvent extends TLObject {
        public static int constructor;
        public String data;
        public long peer;
        public double time;
        public String type;

        static {
            constructor = 1996904104;
        }

        public static TL_inputAppEvent TLdeserialize(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            if (constructor == i) {
                TL_inputAppEvent tL_inputAppEvent = new TL_inputAppEvent();
                tL_inputAppEvent.readParams(abstractSerializedData, z);
                return tL_inputAppEvent;
            } else if (!z) {
                return null;
            } else {
                Object[] objArr = new Object[TLRPC.USER_FLAG_ACCESS_HASH];
                objArr[0] = Integer.valueOf(i);
                throw new RuntimeException(String.format("can't parse magic %x in TL_inputAppEvent", objArr));
            }
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.time = abstractSerializedData.readDouble(z);
            this.type = abstractSerializedData.readString(z);
            this.peer = abstractSerializedData.readInt64(z);
            this.data = abstractSerializedData.readString(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeDouble(this.time);
            abstractSerializedData.writeString(this.type);
            abstractSerializedData.writeInt64(this.peer);
            abstractSerializedData.writeString(this.data);
        }
    }

    public static class TL_inputBotInlineMessageID extends TLObject {
        public static int constructor;
        public long access_hash;
        public int dc_id;
        public long id;

        static {
            constructor = -1995686519;
        }

        public static TL_inputBotInlineMessageID TLdeserialize(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            if (constructor == i) {
                TL_inputBotInlineMessageID tL_inputBotInlineMessageID = new TL_inputBotInlineMessageID();
                tL_inputBotInlineMessageID.readParams(abstractSerializedData, z);
                return tL_inputBotInlineMessageID;
            } else if (!z) {
                return null;
            } else {
                Object[] objArr = new Object[TLRPC.USER_FLAG_ACCESS_HASH];
                objArr[0] = Integer.valueOf(i);
                throw new RuntimeException(String.format("can't parse magic %x in TL_inputBotInlineMessageID", objArr));
            }
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.dc_id = abstractSerializedData.readInt32(z);
            this.id = abstractSerializedData.readInt64(z);
            this.access_hash = abstractSerializedData.readInt64(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.dc_id);
            abstractSerializedData.writeInt64(this.id);
            abstractSerializedData.writeInt64(this.access_hash);
        }
    }

    public static class TL_inputChannel extends InputChannel {
        public static int constructor;

        static {
            constructor = -1343524562;
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.channel_id = abstractSerializedData.readInt32(z);
            this.access_hash = abstractSerializedData.readInt64(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.channel_id);
            abstractSerializedData.writeInt64(this.access_hash);
        }
    }

    public static class TL_inputChannelEmpty extends InputChannel {
        public static int constructor;

        static {
            constructor = -292807034;
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
        }
    }

    public static class TL_inputChatPhoto extends InputChatPhoto {
        public static int constructor;

        static {
            constructor = -1991004873;
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.id = InputPhoto.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.id.serializeToStream(abstractSerializedData);
        }
    }

    public static class TL_inputChatPhotoEmpty extends InputChatPhoto {
        public static int constructor;

        static {
            constructor = 480546647;
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
        }
    }

    public static class TL_inputChatUploadedPhoto extends InputChatPhoto {
        public static int constructor;

        static {
            constructor = -1837345356;
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.file = InputFile.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.file.serializeToStream(abstractSerializedData);
        }
    }

    public static class TL_inputDocument extends InputDocument {
        public static int constructor;

        static {
            constructor = 410618194;
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.id = abstractSerializedData.readInt64(z);
            this.access_hash = abstractSerializedData.readInt64(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt64(this.id);
            abstractSerializedData.writeInt64(this.access_hash);
        }
    }

    public static class TL_inputDocumentEmpty extends InputDocument {
        public static int constructor;

        static {
            constructor = 1928391342;
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
        }
    }

    public static class TL_inputDocumentFileLocation extends InputFileLocation {
        public static int constructor;

        static {
            constructor = 1313188841;
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.id = abstractSerializedData.readInt64(z);
            this.access_hash = abstractSerializedData.readInt64(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt64(this.id);
            abstractSerializedData.writeInt64(this.access_hash);
        }
    }

    public static class TL_inputEncryptedChat extends TLObject {
        public static int constructor;
        public long access_hash;
        public int chat_id;

        static {
            constructor = -247351839;
        }

        public static TL_inputEncryptedChat TLdeserialize(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            if (constructor == i) {
                TL_inputEncryptedChat tL_inputEncryptedChat = new TL_inputEncryptedChat();
                tL_inputEncryptedChat.readParams(abstractSerializedData, z);
                return tL_inputEncryptedChat;
            } else if (!z) {
                return null;
            } else {
                Object[] objArr = new Object[TLRPC.USER_FLAG_ACCESS_HASH];
                objArr[0] = Integer.valueOf(i);
                throw new RuntimeException(String.format("can't parse magic %x in TL_inputEncryptedChat", objArr));
            }
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.chat_id = abstractSerializedData.readInt32(z);
            this.access_hash = abstractSerializedData.readInt64(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.chat_id);
            abstractSerializedData.writeInt64(this.access_hash);
        }
    }

    public static class TL_inputEncryptedFile extends InputEncryptedFile {
        public static int constructor;

        static {
            constructor = 1511503333;
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.id = abstractSerializedData.readInt64(z);
            this.access_hash = abstractSerializedData.readInt64(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt64(this.id);
            abstractSerializedData.writeInt64(this.access_hash);
        }
    }

    public static class TL_inputEncryptedFileBigUploaded extends InputEncryptedFile {
        public static int constructor;

        static {
            constructor = 767652808;
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.id = abstractSerializedData.readInt64(z);
            this.parts = abstractSerializedData.readInt32(z);
            this.key_fingerprint = abstractSerializedData.readInt32(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt64(this.id);
            abstractSerializedData.writeInt32(this.parts);
            abstractSerializedData.writeInt32(this.key_fingerprint);
        }
    }

    public static class TL_inputEncryptedFileEmpty extends InputEncryptedFile {
        public static int constructor;

        static {
            constructor = 406307684;
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
        }
    }

    public static class TL_inputEncryptedFileLocation extends InputFileLocation {
        public static int constructor;

        static {
            constructor = -182231723;
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.id = abstractSerializedData.readInt64(z);
            this.access_hash = abstractSerializedData.readInt64(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt64(this.id);
            abstractSerializedData.writeInt64(this.access_hash);
        }
    }

    public static class TL_inputEncryptedFileUploaded extends InputEncryptedFile {
        public static int constructor;

        static {
            constructor = 1690108678;
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.id = abstractSerializedData.readInt64(z);
            this.parts = abstractSerializedData.readInt32(z);
            this.md5_checksum = abstractSerializedData.readString(z);
            this.key_fingerprint = abstractSerializedData.readInt32(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt64(this.id);
            abstractSerializedData.writeInt32(this.parts);
            abstractSerializedData.writeString(this.md5_checksum);
            abstractSerializedData.writeInt32(this.key_fingerprint);
        }
    }

    public static class TL_inputFile extends InputFile {
        public static int constructor;

        static {
            constructor = -181407105;
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.id = abstractSerializedData.readInt64(z);
            this.parts = abstractSerializedData.readInt32(z);
            this.name = abstractSerializedData.readString(z);
            this.md5_checksum = abstractSerializedData.readString(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt64(this.id);
            abstractSerializedData.writeInt32(this.parts);
            abstractSerializedData.writeString(this.name);
            abstractSerializedData.writeString(this.md5_checksum);
        }
    }

    public static class TL_inputFileBig extends InputFile {
        public static int constructor;

        static {
            constructor = -95482955;
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.id = abstractSerializedData.readInt64(z);
            this.parts = abstractSerializedData.readInt32(z);
            this.name = abstractSerializedData.readString(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt64(this.id);
            abstractSerializedData.writeInt32(this.parts);
            abstractSerializedData.writeString(this.name);
        }
    }

    public static class TL_inputFileLocation extends InputFileLocation {
        public static int constructor;

        static {
            constructor = 342061462;
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.volume_id = abstractSerializedData.readInt64(z);
            this.local_id = abstractSerializedData.readInt32(z);
            this.secret = abstractSerializedData.readInt64(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt64(this.volume_id);
            abstractSerializedData.writeInt32(this.local_id);
            abstractSerializedData.writeInt64(this.secret);
        }
    }

    public static class TL_inputGameID extends InputGame {
        public static int constructor;

        static {
            constructor = 53231223;
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.id = abstractSerializedData.readInt64(z);
            this.access_hash = abstractSerializedData.readInt64(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt64(this.id);
            abstractSerializedData.writeInt64(this.access_hash);
        }
    }

    public static class TL_inputGameShortName extends InputGame {
        public static int constructor;

        static {
            constructor = -1020139510;
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.bot_id = InputUser.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
            this.short_name = abstractSerializedData.readString(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.bot_id.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeString(this.short_name);
        }
    }

    public static class TL_inputGeoChat extends TLObject {
        public static int constructor;
        public long access_hash;
        public int chat_id;

        static {
            constructor = 1960072954;
        }

        public static TL_inputGeoChat TLdeserialize(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            if (constructor == i) {
                TL_inputGeoChat tL_inputGeoChat = new TL_inputGeoChat();
                tL_inputGeoChat.readParams(abstractSerializedData, z);
                return tL_inputGeoChat;
            } else if (!z) {
                return null;
            } else {
                Object[] objArr = new Object[TLRPC.USER_FLAG_ACCESS_HASH];
                objArr[0] = Integer.valueOf(i);
                throw new RuntimeException(String.format("can't parse magic %x in TL_inputGeoChat", objArr));
            }
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.chat_id = abstractSerializedData.readInt32(z);
            this.access_hash = abstractSerializedData.readInt64(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.chat_id);
            abstractSerializedData.writeInt64(this.access_hash);
        }
    }

    public static class TL_inputGeoPoint extends InputGeoPoint {
        public static int constructor;

        static {
            constructor = -206066487;
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.lat = abstractSerializedData.readDouble(z);
            this._long = abstractSerializedData.readDouble(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeDouble(this.lat);
            abstractSerializedData.writeDouble(this._long);
        }
    }

    public static class TL_inputGeoPointEmpty extends InputGeoPoint {
        public static int constructor;

        static {
            constructor = -457104426;
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
        }
    }

    public static class TL_inputMediaContact extends InputMedia {
        public static int constructor;

        static {
            constructor = -1494984313;
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.phone_number = abstractSerializedData.readString(z);
            this.first_name = abstractSerializedData.readString(z);
            this.last_name = abstractSerializedData.readString(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeString(this.phone_number);
            abstractSerializedData.writeString(this.first_name);
            abstractSerializedData.writeString(this.last_name);
        }
    }

    public static class TL_inputMediaDocument extends InputMedia {
        public static int constructor;
        public InputDocument id;

        static {
            constructor = 444068508;
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.id = InputDocument.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
            this.caption = abstractSerializedData.readString(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.id.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeString(this.caption);
        }
    }

    public static class TL_inputMediaDocumentExternal extends InputMedia {
        public static int constructor;
        public InputFile url;

        static {
            constructor = 1954019628;
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.url = InputFile.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.url.serializeToStream(abstractSerializedData);
        }
    }

    public static class TL_inputMediaEmpty extends InputMedia {
        public static int constructor;

        static {
            constructor = -1771768449;
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
        }
    }

    public static class TL_inputMediaGame extends InputMedia {
        public static int constructor;
        public InputGame id;

        static {
            constructor = -750828557;
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.id = InputGame.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.id.serializeToStream(abstractSerializedData);
        }
    }

    public static class TL_inputMediaGeoPoint extends InputMedia {
        public static int constructor;

        static {
            constructor = -104578748;
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.geo_point = InputGeoPoint.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.geo_point.serializeToStream(abstractSerializedData);
        }
    }

    public static class TL_inputMediaGifExternal extends InputMedia {
        public static int constructor;
        public String url;

        static {
            constructor = 1212395773;
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.url = abstractSerializedData.readString(z);
            this.q = abstractSerializedData.readString(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeString(this.url);
            abstractSerializedData.writeString(this.q);
        }
    }

    public static class TL_inputMediaPhoto extends InputMedia {
        public static int constructor;
        public InputPhoto id;

        static {
            constructor = -373312269;
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.id = InputPhoto.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
            this.caption = abstractSerializedData.readString(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.id.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeString(this.caption);
        }
    }

    public static class TL_inputMediaPhotoExternal extends InputMedia {
        public static int constructor;
        public String url;

        static {
            constructor = 998007486;
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.url = abstractSerializedData.readString(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeString(this.url);
        }
    }

    public static class TL_inputMediaUploadedDocument extends InputMedia {
        public static int constructor;

        static {
            constructor = -797904407;
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            int i = 0;
            this.flags = abstractSerializedData.readInt32(z);
            this.file = InputFile.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
            this.mime_type = abstractSerializedData.readString(z);
            int readInt32 = abstractSerializedData.readInt32(z);
            Object[] objArr;
            if (readInt32 == 481674261) {
                int readInt322 = abstractSerializedData.readInt32(z);
                readInt32 = 0;
                while (readInt32 < readInt322) {
                    DocumentAttribute TLdeserialize = DocumentAttribute.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
                    if (TLdeserialize != null) {
                        this.attributes.add(TLdeserialize);
                        readInt32 += TLRPC.USER_FLAG_ACCESS_HASH;
                    } else {
                        return;
                    }
                }
                this.caption = abstractSerializedData.readString(z);
                if ((this.flags & TLRPC.USER_FLAG_ACCESS_HASH) != 0) {
                    readInt32 = abstractSerializedData.readInt32(z);
                    if (readInt32 == 481674261) {
                        readInt32 = abstractSerializedData.readInt32(z);
                        while (i < readInt32) {
                            InputDocument TLdeserialize2 = InputDocument.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
                            if (TLdeserialize2 != null) {
                                this.stickers.add(TLdeserialize2);
                                i += TLRPC.USER_FLAG_ACCESS_HASH;
                            } else {
                                return;
                            }
                        }
                    } else if (z) {
                        objArr = new Object[TLRPC.USER_FLAG_ACCESS_HASH];
                        objArr[0] = Integer.valueOf(readInt32);
                        throw new RuntimeException(String.format("wrong Vector magic, got %x", objArr));
                    }
                }
            } else if (z) {
                objArr = new Object[TLRPC.USER_FLAG_ACCESS_HASH];
                objArr[0] = Integer.valueOf(readInt32);
                throw new RuntimeException(String.format("wrong Vector magic, got %x", objArr));
            }
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            int i;
            int i2 = 0;
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.flags);
            this.file.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeString(this.mime_type);
            abstractSerializedData.writeInt32(481674261);
            int size = this.attributes.size();
            abstractSerializedData.writeInt32(size);
            for (i = 0; i < size; i += TLRPC.USER_FLAG_ACCESS_HASH) {
                ((DocumentAttribute) this.attributes.get(i)).serializeToStream(abstractSerializedData);
            }
            abstractSerializedData.writeString(this.caption);
            if ((this.flags & TLRPC.USER_FLAG_ACCESS_HASH) != 0) {
                abstractSerializedData.writeInt32(481674261);
                i = this.stickers.size();
                abstractSerializedData.writeInt32(i);
                while (i2 < i) {
                    ((InputDocument) this.stickers.get(i2)).serializeToStream(abstractSerializedData);
                    i2 += TLRPC.USER_FLAG_ACCESS_HASH;
                }
            }
        }
    }

    public static class TL_inputMediaUploadedPhoto extends InputMedia {
        public static int constructor;

        static {
            constructor = 1661770481;
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            int i = 0;
            this.flags = abstractSerializedData.readInt32(z);
            this.file = InputFile.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
            this.caption = abstractSerializedData.readString(z);
            if ((this.flags & TLRPC.USER_FLAG_ACCESS_HASH) != 0) {
                int readInt32 = abstractSerializedData.readInt32(z);
                if (readInt32 == 481674261) {
                    readInt32 = abstractSerializedData.readInt32(z);
                    while (i < readInt32) {
                        InputDocument TLdeserialize = InputDocument.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
                        if (TLdeserialize != null) {
                            this.stickers.add(TLdeserialize);
                            i += TLRPC.USER_FLAG_ACCESS_HASH;
                        } else {
                            return;
                        }
                    }
                } else if (z) {
                    Object[] objArr = new Object[TLRPC.USER_FLAG_ACCESS_HASH];
                    objArr[0] = Integer.valueOf(readInt32);
                    throw new RuntimeException(String.format("wrong Vector magic, got %x", objArr));
                }
            }
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.flags);
            this.file.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeString(this.caption);
            if ((this.flags & TLRPC.USER_FLAG_ACCESS_HASH) != 0) {
                abstractSerializedData.writeInt32(481674261);
                int size = this.stickers.size();
                abstractSerializedData.writeInt32(size);
                for (int i = 0; i < size; i += TLRPC.USER_FLAG_ACCESS_HASH) {
                    ((InputDocument) this.stickers.get(i)).serializeToStream(abstractSerializedData);
                }
            }
        }
    }

    public static class TL_inputMediaUploadedThumbDocument extends InputMedia {
        public static int constructor;

        static {
            constructor = 1356369070;
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            int i = 0;
            this.flags = abstractSerializedData.readInt32(z);
            this.file = InputFile.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
            this.thumb = InputFile.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
            this.mime_type = abstractSerializedData.readString(z);
            int readInt32 = abstractSerializedData.readInt32(z);
            Object[] objArr;
            if (readInt32 == 481674261) {
                int readInt322 = abstractSerializedData.readInt32(z);
                readInt32 = 0;
                while (readInt32 < readInt322) {
                    DocumentAttribute TLdeserialize = DocumentAttribute.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
                    if (TLdeserialize != null) {
                        this.attributes.add(TLdeserialize);
                        readInt32 += TLRPC.USER_FLAG_ACCESS_HASH;
                    } else {
                        return;
                    }
                }
                this.caption = abstractSerializedData.readString(z);
                if ((this.flags & TLRPC.USER_FLAG_ACCESS_HASH) != 0) {
                    readInt32 = abstractSerializedData.readInt32(z);
                    if (readInt32 == 481674261) {
                        readInt32 = abstractSerializedData.readInt32(z);
                        while (i < readInt32) {
                            InputDocument TLdeserialize2 = InputDocument.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
                            if (TLdeserialize2 != null) {
                                this.stickers.add(TLdeserialize2);
                                i += TLRPC.USER_FLAG_ACCESS_HASH;
                            } else {
                                return;
                            }
                        }
                    } else if (z) {
                        objArr = new Object[TLRPC.USER_FLAG_ACCESS_HASH];
                        objArr[0] = Integer.valueOf(readInt32);
                        throw new RuntimeException(String.format("wrong Vector magic, got %x", objArr));
                    }
                }
            } else if (z) {
                objArr = new Object[TLRPC.USER_FLAG_ACCESS_HASH];
                objArr[0] = Integer.valueOf(readInt32);
                throw new RuntimeException(String.format("wrong Vector magic, got %x", objArr));
            }
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            int i;
            int i2 = 0;
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.flags);
            this.file.serializeToStream(abstractSerializedData);
            this.thumb.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeString(this.mime_type);
            abstractSerializedData.writeInt32(481674261);
            int size = this.attributes.size();
            abstractSerializedData.writeInt32(size);
            for (i = 0; i < size; i += TLRPC.USER_FLAG_ACCESS_HASH) {
                ((DocumentAttribute) this.attributes.get(i)).serializeToStream(abstractSerializedData);
            }
            abstractSerializedData.writeString(this.caption);
            if ((this.flags & TLRPC.USER_FLAG_ACCESS_HASH) != 0) {
                abstractSerializedData.writeInt32(481674261);
                i = this.stickers.size();
                abstractSerializedData.writeInt32(i);
                while (i2 < i) {
                    ((InputDocument) this.stickers.get(i2)).serializeToStream(abstractSerializedData);
                    i2 += TLRPC.USER_FLAG_ACCESS_HASH;
                }
            }
        }
    }

    public static class TL_inputMediaVenue extends InputMedia {
        public static int constructor;

        static {
            constructor = 673687578;
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.geo_point = InputGeoPoint.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
            this.title = abstractSerializedData.readString(z);
            this.address = abstractSerializedData.readString(z);
            this.provider = abstractSerializedData.readString(z);
            this.venue_id = abstractSerializedData.readString(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.geo_point.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeString(this.title);
            abstractSerializedData.writeString(this.address);
            abstractSerializedData.writeString(this.provider);
            abstractSerializedData.writeString(this.venue_id);
        }
    }

    public static class TL_inputMessageEntityMentionName extends MessageEntity {
        public static int constructor;
        public InputUser user_id;

        static {
            constructor = 546203849;
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.offset = abstractSerializedData.readInt32(z);
            this.length = abstractSerializedData.readInt32(z);
            this.user_id = InputUser.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.offset);
            abstractSerializedData.writeInt32(this.length);
            this.user_id.serializeToStream(abstractSerializedData);
        }
    }

    public static class TL_inputMessagesFilterChatPhotos extends MessagesFilter {
        public static int constructor;

        static {
            constructor = 975236280;
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
        }
    }

    public static class TL_inputMessagesFilterDocument extends MessagesFilter {
        public static int constructor;

        static {
            constructor = -1629621880;
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
        }
    }

    public static class TL_inputMessagesFilterEmpty extends MessagesFilter {
        public static int constructor;

        static {
            constructor = 1474492012;
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
        }
    }

    public static class TL_inputMessagesFilterGif extends MessagesFilter {
        public static int constructor;

        static {
            constructor = -3644025;
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
        }
    }

    public static class TL_inputMessagesFilterMusic extends MessagesFilter {
        public static int constructor;

        static {
            constructor = 928101534;
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
        }
    }

    public static class TL_inputMessagesFilterPhotoVideo extends MessagesFilter {
        public static int constructor;

        static {
            constructor = 1458172132;
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
        }
    }

    public static class TL_inputMessagesFilterPhotoVideoDocuments extends MessagesFilter {
        public static int constructor;

        static {
            constructor = -648121413;
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
        }
    }

    public static class TL_inputMessagesFilterPhotos extends MessagesFilter {
        public static int constructor;

        static {
            constructor = -1777752804;
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
        }
    }

    public static class TL_inputMessagesFilterUrl extends MessagesFilter {
        public static int constructor;

        static {
            constructor = 2129714567;
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
        }
    }

    public static class TL_inputMessagesFilterVideo extends MessagesFilter {
        public static int constructor;

        static {
            constructor = -1614803355;
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
        }
    }

    public static class TL_inputMessagesFilterVoice extends MessagesFilter {
        public static int constructor;

        static {
            constructor = 1358283666;
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
        }
    }

    public static class TL_inputNotifyAll extends InputNotifyPeer {
        public static int constructor;

        static {
            constructor = -1540769658;
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
        }
    }

    public static class TL_inputNotifyChats extends InputNotifyPeer {
        public static int constructor;

        static {
            constructor = 1251338318;
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
        }
    }

    public static class TL_inputNotifyGeoChatPeer extends InputNotifyPeer {
        public static int constructor;
        public TL_inputGeoChat peer;

        static {
            constructor = 1301143240;
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.peer = TL_inputGeoChat.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.peer.serializeToStream(abstractSerializedData);
        }
    }

    public static class TL_inputNotifyPeer extends InputNotifyPeer {
        public static int constructor;
        public InputPeer peer;

        static {
            constructor = -1195615476;
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.peer = InputPeer.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.peer.serializeToStream(abstractSerializedData);
        }
    }

    public static class TL_inputNotifyUsers extends InputNotifyPeer {
        public static int constructor;

        static {
            constructor = 423314455;
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
        }
    }

    public static class TL_inputPeerChannel extends InputPeer {
        public static int constructor;

        static {
            constructor = 548253432;
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.channel_id = abstractSerializedData.readInt32(z);
            this.access_hash = abstractSerializedData.readInt64(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.channel_id);
            abstractSerializedData.writeInt64(this.access_hash);
        }
    }

    public static class TL_inputPeerChat extends InputPeer {
        public static int constructor;

        static {
            constructor = 396093539;
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.chat_id = abstractSerializedData.readInt32(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.chat_id);
        }
    }

    public static class TL_inputPeerEmpty extends InputPeer {
        public static int constructor;

        static {
            constructor = 2134579434;
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
        }
    }

    public static class TL_inputPeerNotifyEventsAll extends InputPeerNotifyEvents {
        public static int constructor;

        static {
            constructor = -395694988;
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
        }
    }

    public static class TL_inputPeerNotifyEventsEmpty extends InputPeerNotifyEvents {
        public static int constructor;

        static {
            constructor = -265263912;
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
        }
    }

    public static class TL_inputPeerNotifySettings extends TLObject {
        public static int constructor;
        public int flags;
        public int mute_until;
        public boolean show_previews;
        public boolean silent;
        public String sound;

        static {
            constructor = 949182130;
        }

        public static TL_inputPeerNotifySettings TLdeserialize(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            if (constructor == i) {
                TL_inputPeerNotifySettings tL_inputPeerNotifySettings = new TL_inputPeerNotifySettings();
                tL_inputPeerNotifySettings.readParams(abstractSerializedData, z);
                return tL_inputPeerNotifySettings;
            } else if (!z) {
                return null;
            } else {
                Object[] objArr = new Object[TLRPC.USER_FLAG_ACCESS_HASH];
                objArr[0] = Integer.valueOf(i);
                throw new RuntimeException(String.format("can't parse magic %x in TL_inputPeerNotifySettings", objArr));
            }
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            boolean z2 = true;
            this.flags = abstractSerializedData.readInt32(z);
            this.show_previews = (this.flags & TLRPC.USER_FLAG_ACCESS_HASH) != 0;
            if ((this.flags & TLRPC.USER_FLAG_FIRST_NAME) == 0) {
                z2 = false;
            }
            this.silent = z2;
            this.mute_until = abstractSerializedData.readInt32(z);
            this.sound = abstractSerializedData.readString(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.flags = this.show_previews ? this.flags | TLRPC.USER_FLAG_ACCESS_HASH : this.flags & -2;
            this.flags = this.silent ? this.flags | TLRPC.USER_FLAG_FIRST_NAME : this.flags & -3;
            abstractSerializedData.writeInt32(this.flags);
            abstractSerializedData.writeInt32(this.mute_until);
            abstractSerializedData.writeString(this.sound);
        }
    }

    public static class TL_inputPeerSelf extends InputPeer {
        public static int constructor;

        static {
            constructor = 2107670217;
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
        }
    }

    public static class TL_inputPeerUser extends InputPeer {
        public static int constructor;

        static {
            constructor = 2072935910;
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.user_id = abstractSerializedData.readInt32(z);
            this.access_hash = abstractSerializedData.readInt64(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.user_id);
            abstractSerializedData.writeInt64(this.access_hash);
        }
    }

    public static class TL_inputPhoneContact extends TLObject {
        public static int constructor;
        public long client_id;
        public String first_name;
        public String last_name;
        public String phone;

        static {
            constructor = -208488460;
        }

        public static TL_inputPhoneContact TLdeserialize(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            if (constructor == i) {
                TL_inputPhoneContact tL_inputPhoneContact = new TL_inputPhoneContact();
                tL_inputPhoneContact.readParams(abstractSerializedData, z);
                return tL_inputPhoneContact;
            } else if (!z) {
                return null;
            } else {
                Object[] objArr = new Object[TLRPC.USER_FLAG_ACCESS_HASH];
                objArr[0] = Integer.valueOf(i);
                throw new RuntimeException(String.format("can't parse magic %x in TL_inputPhoneContact", objArr));
            }
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.client_id = abstractSerializedData.readInt64(z);
            this.phone = abstractSerializedData.readString(z);
            this.first_name = abstractSerializedData.readString(z);
            this.last_name = abstractSerializedData.readString(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt64(this.client_id);
            abstractSerializedData.writeString(this.phone);
            abstractSerializedData.writeString(this.first_name);
            abstractSerializedData.writeString(this.last_name);
        }
    }

    public static class TL_inputPhoto extends InputPhoto {
        public static int constructor;

        static {
            constructor = -74070332;
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.id = abstractSerializedData.readInt64(z);
            this.access_hash = abstractSerializedData.readInt64(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt64(this.id);
            abstractSerializedData.writeInt64(this.access_hash);
        }
    }

    public static class TL_inputPhotoEmpty extends InputPhoto {
        public static int constructor;

        static {
            constructor = 483901197;
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
        }
    }

    public static class TL_inputPrivacyKeyChatInvite extends InputPrivacyKey {
        public static int constructor;

        static {
            constructor = -1107622874;
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
        }
    }

    public static class TL_inputPrivacyKeyStatusTimestamp extends InputPrivacyKey {
        public static int constructor;

        static {
            constructor = 1335282456;
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
        }
    }

    public static class TL_inputPrivacyValueAllowAll extends InputPrivacyRule {
        public static int constructor;

        static {
            constructor = 407582158;
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
        }
    }

    public static class TL_inputPrivacyValueAllowContacts extends InputPrivacyRule {
        public static int constructor;

        static {
            constructor = 218751099;
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
        }
    }

    public static class TL_inputPrivacyValueAllowUsers extends InputPrivacyRule {
        public static int constructor;

        static {
            constructor = 320652927;
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            int i = 0;
            int readInt32 = abstractSerializedData.readInt32(z);
            if (readInt32 == 481674261) {
                readInt32 = abstractSerializedData.readInt32(z);
                while (i < readInt32) {
                    InputUser TLdeserialize = InputUser.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
                    if (TLdeserialize != null) {
                        this.users.add(TLdeserialize);
                        i += TLRPC.USER_FLAG_ACCESS_HASH;
                    } else {
                        return;
                    }
                }
            } else if (z) {
                Object[] objArr = new Object[TLRPC.USER_FLAG_ACCESS_HASH];
                objArr[0] = Integer.valueOf(readInt32);
                throw new RuntimeException(String.format("wrong Vector magic, got %x", objArr));
            }
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(481674261);
            int size = this.users.size();
            abstractSerializedData.writeInt32(size);
            for (int i = 0; i < size; i += TLRPC.USER_FLAG_ACCESS_HASH) {
                ((InputUser) this.users.get(i)).serializeToStream(abstractSerializedData);
            }
        }
    }

    public static class TL_inputPrivacyValueDisallowAll extends InputPrivacyRule {
        public static int constructor;

        static {
            constructor = -697604407;
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
        }
    }

    public static class TL_inputPrivacyValueDisallowContacts extends InputPrivacyRule {
        public static int constructor;

        static {
            constructor = 195371015;
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
        }
    }

    public static class TL_inputPrivacyValueDisallowUsers extends InputPrivacyRule {
        public static int constructor;

        static {
            constructor = -1877932953;
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            int i = 0;
            int readInt32 = abstractSerializedData.readInt32(z);
            if (readInt32 == 481674261) {
                readInt32 = abstractSerializedData.readInt32(z);
                while (i < readInt32) {
                    InputUser TLdeserialize = InputUser.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
                    if (TLdeserialize != null) {
                        this.users.add(TLdeserialize);
                        i += TLRPC.USER_FLAG_ACCESS_HASH;
                    } else {
                        return;
                    }
                }
            } else if (z) {
                Object[] objArr = new Object[TLRPC.USER_FLAG_ACCESS_HASH];
                objArr[0] = Integer.valueOf(readInt32);
                throw new RuntimeException(String.format("wrong Vector magic, got %x", objArr));
            }
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(481674261);
            int size = this.users.size();
            abstractSerializedData.writeInt32(size);
            for (int i = 0; i < size; i += TLRPC.USER_FLAG_ACCESS_HASH) {
                ((InputUser) this.users.get(i)).serializeToStream(abstractSerializedData);
            }
        }
    }

    public static class TL_inputReportReasonOther extends ReportReason {
        public static int constructor;

        static {
            constructor = -512463606;
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.text = abstractSerializedData.readString(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeString(this.text);
        }
    }

    public static class TL_inputReportReasonPornography extends ReportReason {
        public static int constructor;

        static {
            constructor = 777640226;
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
        }
    }

    public static class TL_inputReportReasonSpam extends ReportReason {
        public static int constructor;

        static {
            constructor = 1490799288;
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
        }
    }

    public static class TL_inputReportReasonViolence extends ReportReason {
        public static int constructor;

        static {
            constructor = 505595789;
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
        }
    }

    public static class TL_inputStickerSetEmpty extends InputStickerSet {
        public static int constructor;

        static {
            constructor = -4838507;
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
        }
    }

    public static class TL_inputStickerSetID extends InputStickerSet {
        public static int constructor;

        static {
            constructor = -1645763991;
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.id = abstractSerializedData.readInt64(z);
            this.access_hash = abstractSerializedData.readInt64(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt64(this.id);
            abstractSerializedData.writeInt64(this.access_hash);
        }
    }

    public static class TL_inputStickerSetShortName extends InputStickerSet {
        public static int constructor;

        static {
            constructor = -2044933984;
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.short_name = abstractSerializedData.readString(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeString(this.short_name);
        }
    }

    public static class TL_inputStickeredMediaDocument extends InputStickeredMedia {
        public static int constructor;
        public InputDocument id;

        static {
            constructor = 70813275;
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.id = InputDocument.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.id.serializeToStream(abstractSerializedData);
        }
    }

    public static class TL_inputStickeredMediaPhoto extends InputStickeredMedia {
        public static int constructor;
        public InputPhoto id;

        static {
            constructor = 1251549527;
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.id = InputPhoto.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.id.serializeToStream(abstractSerializedData);
        }
    }

    public static class TL_inputUser extends InputUser {
        public static int constructor;

        static {
            constructor = -668391402;
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.user_id = abstractSerializedData.readInt32(z);
            this.access_hash = abstractSerializedData.readInt64(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.user_id);
            abstractSerializedData.writeInt64(this.access_hash);
        }
    }

    public static class TL_inputUserEmpty extends InputUser {
        public static int constructor;

        static {
            constructor = -1182234929;
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
        }
    }

    public static class TL_inputUserSelf extends InputUser {
        public static int constructor;

        static {
            constructor = -138301121;
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
        }
    }

    public static class TL_keyboardButton extends KeyboardButton {
        public static int constructor;

        static {
            constructor = -1560655744;
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.text = abstractSerializedData.readString(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeString(this.text);
        }
    }

    public static class TL_keyboardButtonCallback extends KeyboardButton {
        public static int constructor;

        static {
            constructor = 1748655686;
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.text = abstractSerializedData.readString(z);
            this.data = abstractSerializedData.readByteArray(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeString(this.text);
            abstractSerializedData.writeByteArray(this.data);
        }
    }

    public static class TL_keyboardButtonGame extends KeyboardButton {
        public static int constructor;

        static {
            constructor = 1358175439;
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.text = abstractSerializedData.readString(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeString(this.text);
        }
    }

    public static class TL_keyboardButtonRequestGeoLocation extends KeyboardButton {
        public static int constructor;

        static {
            constructor = -59151553;
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.text = abstractSerializedData.readString(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeString(this.text);
        }
    }

    public static class TL_keyboardButtonRequestPhone extends KeyboardButton {
        public static int constructor;

        static {
            constructor = -1318425559;
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.text = abstractSerializedData.readString(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeString(this.text);
        }
    }

    public static class TL_keyboardButtonRow extends TLObject {
        public static int constructor;
        public ArrayList<KeyboardButton> buttons;

        static {
            constructor = 2002815875;
        }

        public TL_keyboardButtonRow() {
            this.buttons = new ArrayList();
        }

        public static TL_keyboardButtonRow TLdeserialize(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            if (constructor == i) {
                TL_keyboardButtonRow tL_keyboardButtonRow = new TL_keyboardButtonRow();
                tL_keyboardButtonRow.readParams(abstractSerializedData, z);
                return tL_keyboardButtonRow;
            } else if (!z) {
                return null;
            } else {
                Object[] objArr = new Object[TLRPC.USER_FLAG_ACCESS_HASH];
                objArr[0] = Integer.valueOf(i);
                throw new RuntimeException(String.format("can't parse magic %x in TL_keyboardButtonRow", objArr));
            }
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            int i = 0;
            int readInt32 = abstractSerializedData.readInt32(z);
            if (readInt32 == 481674261) {
                readInt32 = abstractSerializedData.readInt32(z);
                while (i < readInt32) {
                    KeyboardButton TLdeserialize = KeyboardButton.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
                    if (TLdeserialize != null) {
                        this.buttons.add(TLdeserialize);
                        i += TLRPC.USER_FLAG_ACCESS_HASH;
                    } else {
                        return;
                    }
                }
            } else if (z) {
                Object[] objArr = new Object[TLRPC.USER_FLAG_ACCESS_HASH];
                objArr[0] = Integer.valueOf(readInt32);
                throw new RuntimeException(String.format("wrong Vector magic, got %x", objArr));
            }
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(481674261);
            int size = this.buttons.size();
            abstractSerializedData.writeInt32(size);
            for (int i = 0; i < size; i += TLRPC.USER_FLAG_ACCESS_HASH) {
                ((KeyboardButton) this.buttons.get(i)).serializeToStream(abstractSerializedData);
            }
        }
    }

    public static class TL_keyboardButtonSwitchInline extends KeyboardButton {
        public static int constructor;

        static {
            constructor = 90744648;
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.flags = abstractSerializedData.readInt32(z);
            this.same_peer = (this.flags & TLRPC.USER_FLAG_ACCESS_HASH) != 0;
            this.text = abstractSerializedData.readString(z);
            this.query = abstractSerializedData.readString(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.flags = this.same_peer ? this.flags | TLRPC.USER_FLAG_ACCESS_HASH : this.flags & -2;
            abstractSerializedData.writeInt32(this.flags);
            abstractSerializedData.writeString(this.text);
            abstractSerializedData.writeString(this.query);
        }
    }

    public static class TL_keyboardButtonUrl extends KeyboardButton {
        public static int constructor;

        static {
            constructor = 629866245;
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.text = abstractSerializedData.readString(z);
            this.url = abstractSerializedData.readString(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeString(this.text);
            abstractSerializedData.writeString(this.url);
        }
    }

    public static class TL_maskCoords extends TLObject {
        public static int constructor;
        public int f2667n;
        public double f2668x;
        public double f2669y;
        public double zoom;

        static {
            constructor = -1361650766;
        }

        public static TL_maskCoords TLdeserialize(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            if (constructor == i) {
                TL_maskCoords tL_maskCoords = new TL_maskCoords();
                tL_maskCoords.readParams(abstractSerializedData, z);
                return tL_maskCoords;
            } else if (!z) {
                return null;
            } else {
                Object[] objArr = new Object[TLRPC.USER_FLAG_ACCESS_HASH];
                objArr[0] = Integer.valueOf(i);
                throw new RuntimeException(String.format("can't parse magic %x in TL_maskCoords", objArr));
            }
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.f2667n = abstractSerializedData.readInt32(z);
            this.f2668x = abstractSerializedData.readDouble(z);
            this.f2669y = abstractSerializedData.readDouble(z);
            this.zoom = abstractSerializedData.readDouble(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.f2667n);
            abstractSerializedData.writeDouble(this.f2668x);
            abstractSerializedData.writeDouble(this.f2669y);
            abstractSerializedData.writeDouble(this.zoom);
        }
    }

    public static class TL_message extends Message {
        public static int constructor;

        static {
            constructor = -1063525281;
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            int readInt32;
            this.flags = abstractSerializedData.readInt32(z);
            this.unread = (this.flags & TLRPC.USER_FLAG_ACCESS_HASH) != 0;
            this.out = (this.flags & TLRPC.USER_FLAG_FIRST_NAME) != 0;
            this.mentioned = (this.flags & TLRPC.USER_FLAG_PHONE) != 0;
            this.media_unread = (this.flags & TLRPC.USER_FLAG_PHOTO) != 0;
            this.silent = (this.flags & MessagesController.UPDATE_MASK_CHANNEL) != 0;
            this.post = (this.flags & MessagesController.UPDATE_MASK_CHAT_ADMINS) != 0;
            this.with_my_score = (this.flags & C0700C.ENCODING_PCM_32BIT) != 0;
            this.id = abstractSerializedData.readInt32(z);
            if ((this.flags & TLRPC.USER_FLAG_UNUSED2) != 0) {
                this.from_id = abstractSerializedData.readInt32(z);
            }
            this.to_id = Peer.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
            if (this.from_id == 0) {
                if (this.to_id.user_id != 0) {
                    this.from_id = this.to_id.user_id;
                } else {
                    this.from_id = -this.to_id.channel_id;
                }
            }
            if ((this.flags & TLRPC.USER_FLAG_LAST_NAME) != 0) {
                this.fwd_from = TL_messageFwdHeader.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
            }
            if ((this.flags & TLRPC.MESSAGE_FLAG_HAS_BOT_ID) != 0) {
                this.via_bot_id = abstractSerializedData.readInt32(z);
            }
            if ((this.flags & TLRPC.USER_FLAG_USERNAME) != 0) {
                this.reply_to_msg_id = abstractSerializedData.readInt32(z);
            }
            this.date = abstractSerializedData.readInt32(z);
            this.message = abstractSerializedData.readString(z);
            if ((this.flags & TLRPC.USER_FLAG_UNUSED3) != 0) {
                this.media = MessageMedia.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
            } else {
                this.media = new TL_messageMediaEmpty();
            }
            if ((this.flags & TLRPC.USER_FLAG_STATUS) != 0) {
                this.reply_markup = ReplyMarkup.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
            }
            if ((this.flags & TLRPC.USER_FLAG_UNUSED) != 0) {
                readInt32 = abstractSerializedData.readInt32(z);
                if (readInt32 == 481674261) {
                    int readInt322 = abstractSerializedData.readInt32(z);
                    readInt32 = 0;
                    while (readInt32 < readInt322) {
                        MessageEntity TLdeserialize = MessageEntity.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
                        if (TLdeserialize != null) {
                            this.entities.add(TLdeserialize);
                            readInt32 += TLRPC.USER_FLAG_ACCESS_HASH;
                        } else {
                            return;
                        }
                    }
                } else if (z) {
                    Object[] objArr = new Object[TLRPC.USER_FLAG_ACCESS_HASH];
                    objArr[0] = Integer.valueOf(readInt32);
                    throw new RuntimeException(String.format("wrong Vector magic, got %x", objArr));
                } else {
                    return;
                }
            }
            if ((this.flags & TLRPC.MESSAGE_FLAG_HAS_VIEWS) != 0) {
                this.views = abstractSerializedData.readInt32(z);
            }
            if ((this.flags & TLRPC.MESSAGE_FLAG_EDITED) != 0) {
                this.edit_date = abstractSerializedData.readInt32(z);
            }
            if (this.id < 0 || !(this.media == null || (this.media instanceof TL_messageMediaEmpty) || (this.media instanceof TL_messageMediaWebPage) || this.message == null || this.message.length() == 0 || !this.message.startsWith("-1"))) {
                this.attachPath = abstractSerializedData.readString(z);
                if (this.id < 0 && this.attachPath.startsWith("||")) {
                    String[] split = this.attachPath.split("\\|\\|");
                    if (split.length > 0) {
                        this.params = new HashMap();
                        for (readInt32 = TLRPC.USER_FLAG_ACCESS_HASH; readInt32 < split.length - 1; readInt32 += TLRPC.USER_FLAG_ACCESS_HASH) {
                            String[] split2 = split[readInt32].split("\\|=\\|");
                            if (split2.length == TLRPC.USER_FLAG_FIRST_NAME) {
                                this.params.put(split2[0], split2[TLRPC.USER_FLAG_ACCESS_HASH]);
                            }
                        }
                        this.attachPath = split[split.length - 1];
                    }
                }
            }
            if ((this.flags & TLRPC.USER_FLAG_LAST_NAME) != 0 && this.id < 0) {
                this.fwd_msg_id = abstractSerializedData.readInt32(z);
            }
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.flags = this.unread ? this.flags | TLRPC.USER_FLAG_ACCESS_HASH : this.flags & -2;
            this.flags = this.out ? this.flags | TLRPC.USER_FLAG_FIRST_NAME : this.flags & -3;
            this.flags = this.mentioned ? this.flags | TLRPC.USER_FLAG_PHONE : this.flags & -17;
            this.flags = this.media_unread ? this.flags | TLRPC.USER_FLAG_PHOTO : this.flags & -33;
            this.flags = this.silent ? this.flags | MessagesController.UPDATE_MASK_CHANNEL : this.flags & -8193;
            this.flags = this.post ? this.flags | MessagesController.UPDATE_MASK_CHAT_ADMINS : this.flags & -16385;
            this.flags = this.with_my_score ? this.flags | C0700C.ENCODING_PCM_32BIT : this.flags & -1073741825;
            abstractSerializedData.writeInt32(this.flags);
            abstractSerializedData.writeInt32(this.id);
            if ((this.flags & TLRPC.USER_FLAG_UNUSED2) != 0) {
                abstractSerializedData.writeInt32(this.from_id);
            }
            this.to_id.serializeToStream(abstractSerializedData);
            if ((this.flags & TLRPC.USER_FLAG_LAST_NAME) != 0) {
                this.fwd_from.serializeToStream(abstractSerializedData);
            }
            if ((this.flags & TLRPC.MESSAGE_FLAG_HAS_BOT_ID) != 0) {
                abstractSerializedData.writeInt32(this.via_bot_id);
            }
            if ((this.flags & TLRPC.USER_FLAG_USERNAME) != 0) {
                abstractSerializedData.writeInt32(this.reply_to_msg_id);
            }
            abstractSerializedData.writeInt32(this.date);
            abstractSerializedData.writeString(this.message);
            if ((this.flags & TLRPC.USER_FLAG_UNUSED3) != 0) {
                this.media.serializeToStream(abstractSerializedData);
            }
            if ((this.flags & TLRPC.USER_FLAG_STATUS) != 0) {
                this.reply_markup.serializeToStream(abstractSerializedData);
            }
            if ((this.flags & TLRPC.USER_FLAG_UNUSED) != 0) {
                abstractSerializedData.writeInt32(481674261);
                int size = this.entities.size();
                abstractSerializedData.writeInt32(size);
                for (int i = 0; i < size; i += TLRPC.USER_FLAG_ACCESS_HASH) {
                    ((MessageEntity) this.entities.get(i)).serializeToStream(abstractSerializedData);
                }
            }
            if ((this.flags & TLRPC.MESSAGE_FLAG_HAS_VIEWS) != 0) {
                abstractSerializedData.writeInt32(this.views);
            }
            if ((this.flags & TLRPC.MESSAGE_FLAG_EDITED) != 0) {
                abstractSerializedData.writeInt32(this.edit_date);
            }
            String str = this.attachPath;
            if (this.id < 0 && this.params != null && this.params.size() > 0) {
                String str2 = str;
                for (Entry entry : this.params.entrySet()) {
                    str2 = ((String) entry.getKey()) + "|=|" + ((String) entry.getValue()) + "||" + str2;
                }
                str = "||" + str2;
            }
            abstractSerializedData.writeString(str);
            if ((this.flags & TLRPC.USER_FLAG_LAST_NAME) != 0 && this.id < 0) {
                abstractSerializedData.writeInt32(this.fwd_msg_id);
            }
        }
    }

    public static class TL_messageActionChannelCreate extends MessageAction {
        public static int constructor;

        static {
            constructor = -1781355374;
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.title = abstractSerializedData.readString(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeString(this.title);
        }
    }

    public static class TL_messageActionChannelMigrateFrom extends MessageAction {
        public static int constructor;

        static {
            constructor = -1336546578;
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.title = abstractSerializedData.readString(z);
            this.chat_id = abstractSerializedData.readInt32(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeString(this.title);
            abstractSerializedData.writeInt32(this.chat_id);
        }
    }

    public static class TL_messageActionChatAddUser extends MessageAction {
        public static int constructor;

        static {
            constructor = 1217033015;
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            int i = 0;
            int readInt32 = abstractSerializedData.readInt32(z);
            if (readInt32 == 481674261) {
                readInt32 = abstractSerializedData.readInt32(z);
                while (i < readInt32) {
                    this.users.add(Integer.valueOf(abstractSerializedData.readInt32(z)));
                    i += TLRPC.USER_FLAG_ACCESS_HASH;
                }
            } else if (z) {
                Object[] objArr = new Object[TLRPC.USER_FLAG_ACCESS_HASH];
                objArr[0] = Integer.valueOf(readInt32);
                throw new RuntimeException(String.format("wrong Vector magic, got %x", objArr));
            }
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(481674261);
            int size = this.users.size();
            abstractSerializedData.writeInt32(size);
            for (int i = 0; i < size; i += TLRPC.USER_FLAG_ACCESS_HASH) {
                abstractSerializedData.writeInt32(((Integer) this.users.get(i)).intValue());
            }
        }
    }

    public static class TL_messageActionChatAddUser_old extends TL_messageActionChatAddUser {
        public static int constructor;

        static {
            constructor = 1581055051;
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.user_id = abstractSerializedData.readInt32(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.user_id);
        }
    }

    public static class TL_messageActionChatCreate extends MessageAction {
        public static int constructor;

        static {
            constructor = -1503425638;
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            int i = 0;
            this.title = abstractSerializedData.readString(z);
            int readInt32 = abstractSerializedData.readInt32(z);
            if (readInt32 == 481674261) {
                readInt32 = abstractSerializedData.readInt32(z);
                while (i < readInt32) {
                    this.users.add(Integer.valueOf(abstractSerializedData.readInt32(z)));
                    i += TLRPC.USER_FLAG_ACCESS_HASH;
                }
            } else if (z) {
                Object[] objArr = new Object[TLRPC.USER_FLAG_ACCESS_HASH];
                objArr[0] = Integer.valueOf(readInt32);
                throw new RuntimeException(String.format("wrong Vector magic, got %x", objArr));
            }
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeString(this.title);
            abstractSerializedData.writeInt32(481674261);
            int size = this.users.size();
            abstractSerializedData.writeInt32(size);
            for (int i = 0; i < size; i += TLRPC.USER_FLAG_ACCESS_HASH) {
                abstractSerializedData.writeInt32(((Integer) this.users.get(i)).intValue());
            }
        }
    }

    public static class TL_messageActionChatDeletePhoto extends MessageAction {
        public static int constructor;

        static {
            constructor = -1780220945;
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
        }
    }

    public static class TL_messageActionChatDeleteUser extends MessageAction {
        public static int constructor;

        static {
            constructor = -1297179892;
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.user_id = abstractSerializedData.readInt32(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.user_id);
        }
    }

    public static class TL_messageActionChatEditPhoto extends MessageAction {
        public static int constructor;

        static {
            constructor = 2144015272;
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.photo = Photo.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.photo.serializeToStream(abstractSerializedData);
        }
    }

    public static class TL_messageActionChatEditTitle extends MessageAction {
        public static int constructor;

        static {
            constructor = -1247687078;
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.title = abstractSerializedData.readString(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeString(this.title);
        }
    }

    public static class TL_messageActionChatJoinedByLink extends MessageAction {
        public static int constructor;

        static {
            constructor = -123931160;
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.inviter_id = abstractSerializedData.readInt32(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.inviter_id);
        }
    }

    public static class TL_messageActionChatMigrateTo extends MessageAction {
        public static int constructor;

        static {
            constructor = 1371385889;
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.channel_id = abstractSerializedData.readInt32(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.channel_id);
        }
    }

    public static class TL_messageActionCreatedBroadcastList extends MessageAction {
        public static int constructor;

        static {
            constructor = 1431655767;
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
        }
    }

    public static class TL_messageActionEmpty extends MessageAction {
        public static int constructor;

        static {
            constructor = -1230047312;
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
        }
    }

    public static class TL_messageActionGameScore extends MessageAction {
        public static int constructor;

        static {
            constructor = -1834538890;
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.game_id = abstractSerializedData.readInt64(z);
            this.score = abstractSerializedData.readInt32(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt64(this.game_id);
            abstractSerializedData.writeInt32(this.score);
        }
    }

    public static class TL_messageActionGeoChatCheckin extends MessageAction {
        public static int constructor;

        static {
            constructor = 209540062;
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
        }
    }

    public static class TL_messageActionGeoChatCreate extends MessageAction {
        public static int constructor;

        static {
            constructor = 1862504124;
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.title = abstractSerializedData.readString(z);
            this.address = abstractSerializedData.readString(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeString(this.title);
            abstractSerializedData.writeString(this.address);
        }
    }

    public static class TL_messageActionHistoryClear extends MessageAction {
        public static int constructor;

        static {
            constructor = -1615153660;
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
        }
    }

    public static class TL_messageActionLoginUnknownLocation extends MessageAction {
        public static int constructor;

        static {
            constructor = 1431655925;
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.title = abstractSerializedData.readString(z);
            this.address = abstractSerializedData.readString(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeString(this.title);
            abstractSerializedData.writeString(this.address);
        }
    }

    public static class TL_messageActionPinMessage extends MessageAction {
        public static int constructor;

        static {
            constructor = -1799538451;
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
        }
    }

    public static class TL_messageActionTTLChange extends MessageAction {
        public static int constructor;

        static {
            constructor = 1431655762;
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.ttl = abstractSerializedData.readInt32(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.ttl);
        }
    }

    public static class TL_messageActionUserJoined extends MessageAction {
        public static int constructor;

        static {
            constructor = 1431655760;
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
        }
    }

    public static class TL_messageActionUserUpdatedPhoto extends MessageAction {
        public static int constructor;

        static {
            constructor = 1431655761;
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.newUserPhoto = UserProfilePhoto.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.newUserPhoto.serializeToStream(abstractSerializedData);
        }
    }

    public static class TL_messageEmpty extends Message {
        public static int constructor;

        static {
            constructor = -2082087340;
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.id = abstractSerializedData.readInt32(z);
            this.to_id = new TL_peerUser();
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.id);
        }
    }

    public static class TL_messageEncryptedAction extends MessageAction {
        public static int constructor;

        static {
            constructor = 1431655927;
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.encryptedAction = DecryptedMessageAction.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.encryptedAction.serializeToStream(abstractSerializedData);
        }
    }

    public static class TL_messageEntityBold extends MessageEntity {
        public static int constructor;

        static {
            constructor = -1117713463;
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.offset = abstractSerializedData.readInt32(z);
            this.length = abstractSerializedData.readInt32(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.offset);
            abstractSerializedData.writeInt32(this.length);
        }
    }

    public static class TL_messageEntityBotCommand extends MessageEntity {
        public static int constructor;

        static {
            constructor = 1827637959;
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.offset = abstractSerializedData.readInt32(z);
            this.length = abstractSerializedData.readInt32(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.offset);
            abstractSerializedData.writeInt32(this.length);
        }
    }

    public static class TL_messageEntityCode extends MessageEntity {
        public static int constructor;

        static {
            constructor = 681706865;
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.offset = abstractSerializedData.readInt32(z);
            this.length = abstractSerializedData.readInt32(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.offset);
            abstractSerializedData.writeInt32(this.length);
        }
    }

    public static class TL_messageEntityEmail extends MessageEntity {
        public static int constructor;

        static {
            constructor = 1692693954;
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.offset = abstractSerializedData.readInt32(z);
            this.length = abstractSerializedData.readInt32(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.offset);
            abstractSerializedData.writeInt32(this.length);
        }
    }

    public static class TL_messageEntityHashtag extends MessageEntity {
        public static int constructor;

        static {
            constructor = 1868782349;
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.offset = abstractSerializedData.readInt32(z);
            this.length = abstractSerializedData.readInt32(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.offset);
            abstractSerializedData.writeInt32(this.length);
        }
    }

    public static class TL_messageEntityItalic extends MessageEntity {
        public static int constructor;

        static {
            constructor = -2106619040;
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.offset = abstractSerializedData.readInt32(z);
            this.length = abstractSerializedData.readInt32(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.offset);
            abstractSerializedData.writeInt32(this.length);
        }
    }

    public static class TL_messageEntityMention extends MessageEntity {
        public static int constructor;

        static {
            constructor = -100378723;
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.offset = abstractSerializedData.readInt32(z);
            this.length = abstractSerializedData.readInt32(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.offset);
            abstractSerializedData.writeInt32(this.length);
        }
    }

    public static class TL_messageEntityMentionName extends MessageEntity {
        public static int constructor;
        public int user_id;

        static {
            constructor = 892193368;
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.offset = abstractSerializedData.readInt32(z);
            this.length = abstractSerializedData.readInt32(z);
            this.user_id = abstractSerializedData.readInt32(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.offset);
            abstractSerializedData.writeInt32(this.length);
            abstractSerializedData.writeInt32(this.user_id);
        }
    }

    public static class TL_messageEntityPre extends MessageEntity {
        public static int constructor;

        static {
            constructor = 1938967520;
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.offset = abstractSerializedData.readInt32(z);
            this.length = abstractSerializedData.readInt32(z);
            this.language = abstractSerializedData.readString(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.offset);
            abstractSerializedData.writeInt32(this.length);
            abstractSerializedData.writeString(this.language);
        }
    }

    public static class TL_messageEntityTextUrl extends MessageEntity {
        public static int constructor;

        static {
            constructor = 1990644519;
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.offset = abstractSerializedData.readInt32(z);
            this.length = abstractSerializedData.readInt32(z);
            this.url = abstractSerializedData.readString(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.offset);
            abstractSerializedData.writeInt32(this.length);
            abstractSerializedData.writeString(this.url);
        }
    }

    public static class TL_messageEntityUnknown extends MessageEntity {
        public static int constructor;

        static {
            constructor = -1148011883;
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.offset = abstractSerializedData.readInt32(z);
            this.length = abstractSerializedData.readInt32(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.offset);
            abstractSerializedData.writeInt32(this.length);
        }
    }

    public static class TL_messageEntityUrl extends MessageEntity {
        public static int constructor;

        static {
            constructor = 1859134776;
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.offset = abstractSerializedData.readInt32(z);
            this.length = abstractSerializedData.readInt32(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.offset);
            abstractSerializedData.writeInt32(this.length);
        }
    }

    public static class TL_messageForwarded_old2 extends Message {
        public static int constructor;

        static {
            constructor = -1553471722;
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            boolean z2 = true;
            this.flags = abstractSerializedData.readInt32(z);
            this.unread = (this.flags & TLRPC.USER_FLAG_ACCESS_HASH) != 0;
            this.out = (this.flags & TLRPC.USER_FLAG_FIRST_NAME) != 0;
            this.mentioned = (this.flags & TLRPC.USER_FLAG_PHONE) != 0;
            if ((this.flags & TLRPC.USER_FLAG_PHOTO) == 0) {
                z2 = false;
            }
            this.media_unread = z2;
            this.id = abstractSerializedData.readInt32(z);
            this.fwd_from = new TL_messageFwdHeader();
            this.fwd_from.from_id = abstractSerializedData.readInt32(z);
            TL_messageFwdHeader tL_messageFwdHeader = this.fwd_from;
            tL_messageFwdHeader.flags |= TLRPC.USER_FLAG_ACCESS_HASH;
            this.fwd_from.date = abstractSerializedData.readInt32(z);
            this.from_id = abstractSerializedData.readInt32(z);
            this.to_id = Peer.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
            this.date = abstractSerializedData.readInt32(z);
            this.message = abstractSerializedData.readString(z);
            this.flags |= 772;
            this.media = MessageMedia.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
            if (this.id < 0) {
                this.fwd_msg_id = abstractSerializedData.readInt32(z);
            }
            if (this.id < 0 || !(this.media == null || (this.media instanceof TL_messageMediaEmpty) || this.message == null || this.message.length() == 0 || !this.message.startsWith("-1"))) {
                this.attachPath = abstractSerializedData.readString(z);
            }
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.flags = this.unread ? this.flags | TLRPC.USER_FLAG_ACCESS_HASH : this.flags & -2;
            this.flags = this.out ? this.flags | TLRPC.USER_FLAG_FIRST_NAME : this.flags & -3;
            this.flags = this.mentioned ? this.flags | TLRPC.USER_FLAG_PHONE : this.flags & -17;
            this.flags = this.media_unread ? this.flags | TLRPC.USER_FLAG_PHOTO : this.flags & -33;
            abstractSerializedData.writeInt32(this.flags);
            abstractSerializedData.writeInt32(this.id);
            abstractSerializedData.writeInt32(this.fwd_from.from_id);
            abstractSerializedData.writeInt32(this.fwd_from.date);
            abstractSerializedData.writeInt32(this.from_id);
            this.to_id.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeInt32(this.date);
            abstractSerializedData.writeString(this.message);
            this.media.serializeToStream(abstractSerializedData);
            if (this.id < 0) {
                abstractSerializedData.writeInt32(this.fwd_msg_id);
            }
            abstractSerializedData.writeString(this.attachPath);
        }
    }

    public static class TL_messageForwarded_old extends TL_messageForwarded_old2 {
        public static int constructor;

        static {
            constructor = 99903492;
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.id = abstractSerializedData.readInt32(z);
            this.fwd_from = new TL_messageFwdHeader();
            this.fwd_from.from_id = abstractSerializedData.readInt32(z);
            TL_messageFwdHeader tL_messageFwdHeader = this.fwd_from;
            tL_messageFwdHeader.flags |= TLRPC.USER_FLAG_ACCESS_HASH;
            this.fwd_from.date = abstractSerializedData.readInt32(z);
            this.from_id = abstractSerializedData.readInt32(z);
            this.to_id = Peer.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
            this.out = abstractSerializedData.readBool(z);
            this.unread = abstractSerializedData.readBool(z);
            this.flags |= 772;
            this.date = abstractSerializedData.readInt32(z);
            this.message = abstractSerializedData.readString(z);
            this.media = MessageMedia.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
            if (this.id < 0) {
                this.fwd_msg_id = abstractSerializedData.readInt32(z);
            }
            if (this.id < 0 || !(this.media == null || (this.media instanceof TL_messageMediaEmpty) || (this.media instanceof TL_messageMediaWebPage) || this.message == null || this.message.length() == 0 || !this.message.startsWith("-1"))) {
                this.attachPath = abstractSerializedData.readString(z);
            }
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.id);
            abstractSerializedData.writeInt32(this.fwd_from.from_id);
            abstractSerializedData.writeInt32(this.fwd_from.date);
            abstractSerializedData.writeInt32(this.from_id);
            this.to_id.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeBool(this.out);
            abstractSerializedData.writeBool(this.unread);
            abstractSerializedData.writeInt32(this.date);
            abstractSerializedData.writeString(this.message);
            this.media.serializeToStream(abstractSerializedData);
            if (this.id < 0) {
                abstractSerializedData.writeInt32(this.fwd_msg_id);
            }
            abstractSerializedData.writeString(this.attachPath);
        }
    }

    public static class TL_messageFwdHeader extends TLObject {
        public static int constructor;
        public int channel_id;
        public int channel_post;
        public int date;
        public int flags;
        public int from_id;

        static {
            constructor = -947462709;
        }

        public static TL_messageFwdHeader TLdeserialize(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            if (constructor == i) {
                TL_messageFwdHeader tL_messageFwdHeader = new TL_messageFwdHeader();
                tL_messageFwdHeader.readParams(abstractSerializedData, z);
                return tL_messageFwdHeader;
            } else if (!z) {
                return null;
            } else {
                Object[] objArr = new Object[TLRPC.USER_FLAG_ACCESS_HASH];
                objArr[0] = Integer.valueOf(i);
                throw new RuntimeException(String.format("can't parse magic %x in TL_messageFwdHeader", objArr));
            }
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.flags = abstractSerializedData.readInt32(z);
            if ((this.flags & TLRPC.USER_FLAG_ACCESS_HASH) != 0) {
                this.from_id = abstractSerializedData.readInt32(z);
            }
            this.date = abstractSerializedData.readInt32(z);
            if ((this.flags & TLRPC.USER_FLAG_FIRST_NAME) != 0) {
                this.channel_id = abstractSerializedData.readInt32(z);
            }
            if ((this.flags & TLRPC.USER_FLAG_LAST_NAME) != 0) {
                this.channel_post = abstractSerializedData.readInt32(z);
            }
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.flags);
            if ((this.flags & TLRPC.USER_FLAG_ACCESS_HASH) != 0) {
                abstractSerializedData.writeInt32(this.from_id);
            }
            abstractSerializedData.writeInt32(this.date);
            if ((this.flags & TLRPC.USER_FLAG_FIRST_NAME) != 0) {
                abstractSerializedData.writeInt32(this.channel_id);
            }
            if ((this.flags & TLRPC.USER_FLAG_LAST_NAME) != 0) {
                abstractSerializedData.writeInt32(this.channel_post);
            }
        }
    }

    public static class TL_messageMediaAudio_layer45 extends MessageMedia {
        public static int constructor;

        static {
            constructor = -961117440;
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.audio_unused = Audio.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.audio_unused.serializeToStream(abstractSerializedData);
        }
    }

    public static class TL_messageMediaContact extends MessageMedia {
        public static int constructor;

        static {
            constructor = 1585262393;
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.phone_number = abstractSerializedData.readString(z);
            this.first_name = abstractSerializedData.readString(z);
            this.last_name = abstractSerializedData.readString(z);
            this.user_id = abstractSerializedData.readInt32(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeString(this.phone_number);
            abstractSerializedData.writeString(this.first_name);
            abstractSerializedData.writeString(this.last_name);
            abstractSerializedData.writeInt32(this.user_id);
        }
    }

    public static class TL_messageMediaDocument extends MessageMedia {
        public static int constructor;

        static {
            constructor = -203411800;
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.document = Document.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
            this.caption = abstractSerializedData.readString(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.document.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeString(this.caption);
        }
    }

    public static class TL_messageMediaDocument_old extends TL_messageMediaDocument {
        public static int constructor;

        static {
            constructor = 802824708;
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.document = Document.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.document.serializeToStream(abstractSerializedData);
        }
    }

    public static class TL_messageMediaEmpty extends MessageMedia {
        public static int constructor;

        static {
            constructor = 1038967584;
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
        }
    }

    public static class TL_messageMediaGame extends MessageMedia {
        public static int constructor;

        static {
            constructor = -38694904;
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.game = TL_game.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.game.serializeToStream(abstractSerializedData);
        }
    }

    public static class TL_messageMediaGeo extends MessageMedia {
        public static int constructor;

        static {
            constructor = 1457575028;
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.geo = GeoPoint.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.geo.serializeToStream(abstractSerializedData);
        }
    }

    public static class TL_messageMediaPhoto extends MessageMedia {
        public static int constructor;

        static {
            constructor = 1032643901;
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.photo = Photo.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
            this.caption = abstractSerializedData.readString(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.photo.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeString(this.caption);
        }
    }

    public static class TL_messageMediaPhoto_old extends TL_messageMediaPhoto {
        public static int constructor;

        static {
            constructor = -926655958;
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.photo = Photo.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.photo.serializeToStream(abstractSerializedData);
        }
    }

    public static class TL_messageMediaUnsupported extends MessageMedia {
        public static int constructor;

        static {
            constructor = -1618676578;
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
        }
    }

    public static class TL_messageMediaUnsupported_old extends TL_messageMediaUnsupported {
        public static int constructor;

        static {
            constructor = 694364726;
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.bytes = abstractSerializedData.readByteArray(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeByteArray(this.bytes);
        }
    }

    public static class TL_messageMediaVenue extends MessageMedia {
        public static int constructor;

        static {
            constructor = 2031269663;
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.geo = GeoPoint.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
            this.title = abstractSerializedData.readString(z);
            this.address = abstractSerializedData.readString(z);
            this.provider = abstractSerializedData.readString(z);
            this.venue_id = abstractSerializedData.readString(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.geo.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeString(this.title);
            abstractSerializedData.writeString(this.address);
            abstractSerializedData.writeString(this.provider);
            abstractSerializedData.writeString(this.venue_id);
        }
    }

    public static class TL_messageMediaVideo_layer45 extends MessageMedia {
        public static int constructor;

        static {
            constructor = 1540298357;
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.video_unused = Video.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
            this.caption = abstractSerializedData.readString(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.video_unused.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeString(this.caption);
        }
    }

    public static class TL_messageMediaVideo_old extends TL_messageMediaVideo_layer45 {
        public static int constructor;

        static {
            constructor = -1563278704;
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.video_unused = Video.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.video_unused.serializeToStream(abstractSerializedData);
        }
    }

    public static class TL_messageMediaWebPage extends MessageMedia {
        public static int constructor;

        static {
            constructor = -1557277184;
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.webpage = WebPage.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.webpage.serializeToStream(abstractSerializedData);
        }
    }

    public static class TL_messageRange extends TLObject {
        public static int constructor;
        public int max_id;
        public int min_id;

        static {
            constructor = 182649427;
        }

        public static TL_messageRange TLdeserialize(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            if (constructor == i) {
                TL_messageRange tL_messageRange = new TL_messageRange();
                tL_messageRange.readParams(abstractSerializedData, z);
                return tL_messageRange;
            } else if (!z) {
                return null;
            } else {
                Object[] objArr = new Object[TLRPC.USER_FLAG_ACCESS_HASH];
                objArr[0] = Integer.valueOf(i);
                throw new RuntimeException(String.format("can't parse magic %x in TL_messageRange", objArr));
            }
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.min_id = abstractSerializedData.readInt32(z);
            this.max_id = abstractSerializedData.readInt32(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.min_id);
            abstractSerializedData.writeInt32(this.max_id);
        }
    }

    public static class TL_messageService extends Message {
        public static int constructor;

        static {
            constructor = -1642487306;
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            boolean z2 = true;
            this.flags = abstractSerializedData.readInt32(z);
            this.unread = (this.flags & TLRPC.USER_FLAG_ACCESS_HASH) != 0;
            this.out = (this.flags & TLRPC.USER_FLAG_FIRST_NAME) != 0;
            this.mentioned = (this.flags & TLRPC.USER_FLAG_PHONE) != 0;
            this.media_unread = (this.flags & TLRPC.USER_FLAG_PHOTO) != 0;
            this.silent = (this.flags & MessagesController.UPDATE_MASK_CHANNEL) != 0;
            if ((this.flags & MessagesController.UPDATE_MASK_CHAT_ADMINS) == 0) {
                z2 = false;
            }
            this.post = z2;
            this.id = abstractSerializedData.readInt32(z);
            if ((this.flags & TLRPC.USER_FLAG_UNUSED2) != 0) {
                this.from_id = abstractSerializedData.readInt32(z);
            }
            this.to_id = Peer.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
            if ((this.flags & TLRPC.USER_FLAG_USERNAME) != 0) {
                this.reply_to_msg_id = abstractSerializedData.readInt32(z);
            }
            this.date = abstractSerializedData.readInt32(z);
            this.action = MessageAction.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.flags = this.unread ? this.flags | TLRPC.USER_FLAG_ACCESS_HASH : this.flags & -2;
            this.flags = this.out ? this.flags | TLRPC.USER_FLAG_FIRST_NAME : this.flags & -3;
            this.flags = this.mentioned ? this.flags | TLRPC.USER_FLAG_PHONE : this.flags & -17;
            this.flags = this.media_unread ? this.flags | TLRPC.USER_FLAG_PHOTO : this.flags & -33;
            this.flags = this.silent ? this.flags | MessagesController.UPDATE_MASK_CHANNEL : this.flags & -8193;
            this.flags = this.post ? this.flags | MessagesController.UPDATE_MASK_CHAT_ADMINS : this.flags & -16385;
            abstractSerializedData.writeInt32(this.flags);
            abstractSerializedData.writeInt32(this.id);
            if ((this.flags & TLRPC.USER_FLAG_UNUSED2) != 0) {
                abstractSerializedData.writeInt32(this.from_id);
            }
            this.to_id.serializeToStream(abstractSerializedData);
            if ((this.flags & TLRPC.USER_FLAG_USERNAME) != 0) {
                abstractSerializedData.writeInt32(this.reply_to_msg_id);
            }
            abstractSerializedData.writeInt32(this.date);
            this.action.serializeToStream(abstractSerializedData);
        }
    }

    public static class TL_messageService_layer48 extends TL_messageService {
        public static int constructor;

        static {
            constructor = -1066691065;
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            boolean z2 = true;
            this.flags = abstractSerializedData.readInt32(z);
            this.unread = (this.flags & TLRPC.USER_FLAG_ACCESS_HASH) != 0;
            this.out = (this.flags & TLRPC.USER_FLAG_FIRST_NAME) != 0;
            this.mentioned = (this.flags & TLRPC.USER_FLAG_PHONE) != 0;
            this.media_unread = (this.flags & TLRPC.USER_FLAG_PHOTO) != 0;
            this.silent = (this.flags & MessagesController.UPDATE_MASK_CHANNEL) != 0;
            if ((this.flags & MessagesController.UPDATE_MASK_CHAT_ADMINS) == 0) {
                z2 = false;
            }
            this.post = z2;
            this.id = abstractSerializedData.readInt32(z);
            if ((this.flags & TLRPC.USER_FLAG_UNUSED2) != 0) {
                this.from_id = abstractSerializedData.readInt32(z);
            }
            this.to_id = Peer.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
            if (this.from_id == 0) {
                if (this.to_id.user_id != 0) {
                    this.from_id = this.to_id.user_id;
                } else {
                    this.from_id = -this.to_id.channel_id;
                }
            }
            this.date = abstractSerializedData.readInt32(z);
            this.action = MessageAction.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.flags = this.unread ? this.flags | TLRPC.USER_FLAG_ACCESS_HASH : this.flags & -2;
            this.flags = this.out ? this.flags | TLRPC.USER_FLAG_FIRST_NAME : this.flags & -3;
            this.flags = this.mentioned ? this.flags | TLRPC.USER_FLAG_PHONE : this.flags & -17;
            this.flags = this.media_unread ? this.flags | TLRPC.USER_FLAG_PHOTO : this.flags & -33;
            this.flags = this.silent ? this.flags | MessagesController.UPDATE_MASK_CHANNEL : this.flags & -8193;
            this.flags = this.post ? this.flags | MessagesController.UPDATE_MASK_CHAT_ADMINS : this.flags & -16385;
            abstractSerializedData.writeInt32(this.flags);
            abstractSerializedData.writeInt32(this.id);
            if ((this.flags & TLRPC.USER_FLAG_UNUSED2) != 0) {
                abstractSerializedData.writeInt32(this.from_id);
            }
            this.to_id.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeInt32(this.date);
            this.action.serializeToStream(abstractSerializedData);
        }
    }

    public static class TL_messageService_old2 extends TL_messageService {
        public static int constructor;

        static {
            constructor = 495384334;
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            boolean z2 = true;
            this.flags = abstractSerializedData.readInt32(z);
            this.unread = (this.flags & TLRPC.USER_FLAG_ACCESS_HASH) != 0;
            this.out = (this.flags & TLRPC.USER_FLAG_FIRST_NAME) != 0;
            this.mentioned = (this.flags & TLRPC.USER_FLAG_PHONE) != 0;
            if ((this.flags & TLRPC.USER_FLAG_PHOTO) == 0) {
                z2 = false;
            }
            this.media_unread = z2;
            this.id = abstractSerializedData.readInt32(z);
            this.from_id = abstractSerializedData.readInt32(z);
            this.to_id = Peer.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
            this.date = abstractSerializedData.readInt32(z);
            this.action = MessageAction.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
            this.flags |= TLRPC.USER_FLAG_UNUSED2;
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.flags = this.unread ? this.flags | TLRPC.USER_FLAG_ACCESS_HASH : this.flags & -2;
            this.flags = this.out ? this.flags | TLRPC.USER_FLAG_FIRST_NAME : this.flags & -3;
            this.flags = this.mentioned ? this.flags | TLRPC.USER_FLAG_PHONE : this.flags & -17;
            this.flags = this.media_unread ? this.flags | TLRPC.USER_FLAG_PHOTO : this.flags & -33;
            abstractSerializedData.writeInt32(this.flags);
            abstractSerializedData.writeInt32(this.id);
            abstractSerializedData.writeInt32(this.from_id);
            this.to_id.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeInt32(this.date);
            this.action.serializeToStream(abstractSerializedData);
        }
    }

    public static class TL_messageService_old extends TL_messageService {
        public static int constructor;

        static {
            constructor = -1618124613;
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.id = abstractSerializedData.readInt32(z);
            this.from_id = abstractSerializedData.readInt32(z);
            this.to_id = Peer.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
            this.out = abstractSerializedData.readBool(z);
            this.unread = abstractSerializedData.readBool(z);
            this.flags |= TLRPC.USER_FLAG_UNUSED2;
            this.date = abstractSerializedData.readInt32(z);
            this.action = MessageAction.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.id);
            abstractSerializedData.writeInt32(this.from_id);
            this.to_id.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeBool(this.out);
            abstractSerializedData.writeBool(this.unread);
            abstractSerializedData.writeInt32(this.date);
            this.action.serializeToStream(abstractSerializedData);
        }
    }

    public static class TL_message_layer47 extends TL_message {
        public static int constructor;

        static {
            constructor = -913120932;
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            int readInt32;
            this.flags = abstractSerializedData.readInt32(z);
            this.unread = (this.flags & TLRPC.USER_FLAG_ACCESS_HASH) != 0;
            this.out = (this.flags & TLRPC.USER_FLAG_FIRST_NAME) != 0;
            this.mentioned = (this.flags & TLRPC.USER_FLAG_PHONE) != 0;
            this.media_unread = (this.flags & TLRPC.USER_FLAG_PHOTO) != 0;
            this.id = abstractSerializedData.readInt32(z);
            if ((this.flags & TLRPC.USER_FLAG_UNUSED2) != 0) {
                this.from_id = abstractSerializedData.readInt32(z);
            }
            this.to_id = Peer.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
            if (this.from_id == 0) {
                if (this.to_id.user_id != 0) {
                    this.from_id = this.to_id.user_id;
                } else {
                    this.from_id = -this.to_id.channel_id;
                }
            }
            if ((this.flags & TLRPC.USER_FLAG_LAST_NAME) != 0) {
                this.fwd_from = new TL_messageFwdHeader();
                Peer TLdeserialize = Peer.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
                TL_messageFwdHeader tL_messageFwdHeader;
                if (TLdeserialize instanceof TL_peerChannel) {
                    this.fwd_from.channel_id = TLdeserialize.channel_id;
                    tL_messageFwdHeader = this.fwd_from;
                    tL_messageFwdHeader.flags |= TLRPC.USER_FLAG_FIRST_NAME;
                } else if (TLdeserialize instanceof TL_peerUser) {
                    this.fwd_from.from_id = TLdeserialize.user_id;
                    tL_messageFwdHeader = this.fwd_from;
                    tL_messageFwdHeader.flags |= TLRPC.USER_FLAG_ACCESS_HASH;
                }
                this.fwd_from.date = abstractSerializedData.readInt32(z);
            }
            if ((this.flags & TLRPC.MESSAGE_FLAG_HAS_BOT_ID) != 0) {
                this.via_bot_id = abstractSerializedData.readInt32(z);
            }
            if ((this.flags & TLRPC.USER_FLAG_USERNAME) != 0) {
                this.reply_to_msg_id = abstractSerializedData.readInt32(z);
            }
            this.date = abstractSerializedData.readInt32(z);
            this.message = abstractSerializedData.readString(z);
            if ((this.flags & TLRPC.USER_FLAG_UNUSED3) != 0) {
                this.media = MessageMedia.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
            } else {
                this.media = new TL_messageMediaEmpty();
            }
            if ((this.flags & TLRPC.USER_FLAG_STATUS) != 0) {
                this.reply_markup = ReplyMarkup.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
            }
            if ((this.flags & TLRPC.USER_FLAG_UNUSED) != 0) {
                readInt32 = abstractSerializedData.readInt32(z);
                if (readInt32 == 481674261) {
                    int readInt322 = abstractSerializedData.readInt32(z);
                    readInt32 = 0;
                    while (readInt32 < readInt322) {
                        MessageEntity TLdeserialize2 = MessageEntity.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
                        if (TLdeserialize2 != null) {
                            this.entities.add(TLdeserialize2);
                            readInt32 += TLRPC.USER_FLAG_ACCESS_HASH;
                        } else {
                            return;
                        }
                    }
                } else if (z) {
                    Object[] objArr = new Object[TLRPC.USER_FLAG_ACCESS_HASH];
                    objArr[0] = Integer.valueOf(readInt32);
                    throw new RuntimeException(String.format("wrong Vector magic, got %x", objArr));
                } else {
                    return;
                }
            }
            if ((this.flags & TLRPC.MESSAGE_FLAG_HAS_VIEWS) != 0) {
                this.views = abstractSerializedData.readInt32(z);
            }
            if (this.id < 0 || !(this.media == null || (this.media instanceof TL_messageMediaEmpty) || (this.media instanceof TL_messageMediaWebPage) || this.message == null || this.message.length() == 0 || !this.message.startsWith("-1"))) {
                this.attachPath = abstractSerializedData.readString(z);
                if (this.id < 0 && this.attachPath.startsWith("||")) {
                    String[] split = this.attachPath.split("\\|\\|");
                    if (split.length > 0) {
                        this.params = new HashMap();
                        for (readInt32 = TLRPC.USER_FLAG_ACCESS_HASH; readInt32 < split.length - 1; readInt32 += TLRPC.USER_FLAG_ACCESS_HASH) {
                            String[] split2 = split[readInt32].split("\\|=\\|");
                            if (split2.length == TLRPC.USER_FLAG_FIRST_NAME) {
                                this.params.put(split2[0], split2[TLRPC.USER_FLAG_ACCESS_HASH]);
                            }
                        }
                        this.attachPath = split[split.length - 1];
                    }
                }
            }
            if ((this.flags & TLRPC.USER_FLAG_LAST_NAME) != 0 && this.id < 0) {
                this.fwd_msg_id = abstractSerializedData.readInt32(z);
            }
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.flags = this.unread ? this.flags | TLRPC.USER_FLAG_ACCESS_HASH : this.flags & -2;
            this.flags = this.out ? this.flags | TLRPC.USER_FLAG_FIRST_NAME : this.flags & -3;
            this.flags = this.mentioned ? this.flags | TLRPC.USER_FLAG_PHONE : this.flags & -17;
            this.flags = this.media_unread ? this.flags | TLRPC.USER_FLAG_PHOTO : this.flags & -33;
            abstractSerializedData.writeInt32(this.flags);
            abstractSerializedData.writeInt32(this.id);
            if ((this.flags & TLRPC.USER_FLAG_UNUSED2) != 0) {
                abstractSerializedData.writeInt32(this.from_id);
            }
            this.to_id.serializeToStream(abstractSerializedData);
            if ((this.flags & TLRPC.USER_FLAG_LAST_NAME) != 0) {
                if (this.fwd_from.from_id != 0) {
                    TL_peerUser tL_peerUser = new TL_peerUser();
                    tL_peerUser.user_id = this.fwd_from.from_id;
                    tL_peerUser.serializeToStream(abstractSerializedData);
                } else {
                    TL_peerChannel tL_peerChannel = new TL_peerChannel();
                    tL_peerChannel.channel_id = this.fwd_from.channel_id;
                    tL_peerChannel.serializeToStream(abstractSerializedData);
                }
                abstractSerializedData.writeInt32(this.fwd_from.date);
            }
            if ((this.flags & TLRPC.MESSAGE_FLAG_HAS_BOT_ID) != 0) {
                abstractSerializedData.writeInt32(this.via_bot_id);
            }
            if ((this.flags & TLRPC.USER_FLAG_USERNAME) != 0) {
                abstractSerializedData.writeInt32(this.reply_to_msg_id);
            }
            abstractSerializedData.writeInt32(this.date);
            abstractSerializedData.writeString(this.message);
            if ((this.flags & TLRPC.USER_FLAG_UNUSED3) != 0) {
                this.media.serializeToStream(abstractSerializedData);
            }
            if ((this.flags & TLRPC.USER_FLAG_STATUS) != 0) {
                this.reply_markup.serializeToStream(abstractSerializedData);
            }
            if ((this.flags & TLRPC.USER_FLAG_UNUSED) != 0) {
                abstractSerializedData.writeInt32(481674261);
                int size = this.entities.size();
                abstractSerializedData.writeInt32(size);
                for (int i = 0; i < size; i += TLRPC.USER_FLAG_ACCESS_HASH) {
                    ((MessageEntity) this.entities.get(i)).serializeToStream(abstractSerializedData);
                }
            }
            if ((this.flags & TLRPC.MESSAGE_FLAG_HAS_VIEWS) != 0) {
                abstractSerializedData.writeInt32(this.views);
            }
            String str = this.attachPath;
            if (this.id < 0 && this.params != null && this.params.size() > 0) {
                String str2 = str;
                for (Entry entry : this.params.entrySet()) {
                    str2 = ((String) entry.getKey()) + "|=|" + ((String) entry.getValue()) + "||" + str2;
                }
                str = "||" + str2;
            }
            abstractSerializedData.writeString(str);
            if ((this.flags & TLRPC.USER_FLAG_LAST_NAME) != 0 && this.id < 0) {
                abstractSerializedData.writeInt32(this.fwd_msg_id);
            }
        }
    }

    public static class TL_message_old2 extends TL_message {
        public static int constructor;

        static {
            constructor = 1450613171;
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            boolean z2 = true;
            this.flags = (abstractSerializedData.readInt32(z) | TLRPC.USER_FLAG_UNUSED2) | TLRPC.USER_FLAG_UNUSED3;
            this.unread = (this.flags & TLRPC.USER_FLAG_ACCESS_HASH) != 0;
            this.out = (this.flags & TLRPC.USER_FLAG_FIRST_NAME) != 0;
            this.mentioned = (this.flags & TLRPC.USER_FLAG_PHONE) != 0;
            if ((this.flags & TLRPC.USER_FLAG_PHOTO) == 0) {
                z2 = false;
            }
            this.media_unread = z2;
            this.id = abstractSerializedData.readInt32(z);
            this.from_id = abstractSerializedData.readInt32(z);
            this.to_id = Peer.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
            this.date = abstractSerializedData.readInt32(z);
            this.message = abstractSerializedData.readString(z);
            this.media = MessageMedia.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
            if (this.id < 0 || !(this.media == null || (this.media instanceof TL_messageMediaEmpty) || (this.media instanceof TL_messageMediaWebPage) || this.message == null || this.message.length() == 0 || !this.message.startsWith("-1"))) {
                this.attachPath = abstractSerializedData.readString(z);
            }
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.flags = this.unread ? this.flags | TLRPC.USER_FLAG_ACCESS_HASH : this.flags & -2;
            this.flags = this.out ? this.flags | TLRPC.USER_FLAG_FIRST_NAME : this.flags & -3;
            this.flags = this.mentioned ? this.flags | TLRPC.USER_FLAG_PHONE : this.flags & -17;
            this.flags = this.media_unread ? this.flags | TLRPC.USER_FLAG_PHOTO : this.flags & -33;
            abstractSerializedData.writeInt32(this.flags);
            abstractSerializedData.writeInt32(this.id);
            abstractSerializedData.writeInt32(this.from_id);
            this.to_id.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeInt32(this.date);
            abstractSerializedData.writeString(this.message);
            this.media.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeString(this.attachPath);
        }
    }

    public static class TL_message_old3 extends TL_message {
        public static int constructor;

        static {
            constructor = -1481959023;
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            boolean z2 = true;
            this.flags = (abstractSerializedData.readInt32(z) | TLRPC.USER_FLAG_UNUSED2) | TLRPC.USER_FLAG_UNUSED3;
            this.unread = (this.flags & TLRPC.USER_FLAG_ACCESS_HASH) != 0;
            this.out = (this.flags & TLRPC.USER_FLAG_FIRST_NAME) != 0;
            this.mentioned = (this.flags & TLRPC.USER_FLAG_PHONE) != 0;
            if ((this.flags & TLRPC.USER_FLAG_PHOTO) == 0) {
                z2 = false;
            }
            this.media_unread = z2;
            this.id = abstractSerializedData.readInt32(z);
            this.from_id = abstractSerializedData.readInt32(z);
            this.to_id = Peer.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
            if ((this.flags & TLRPC.USER_FLAG_LAST_NAME) != 0) {
                this.fwd_from = new TL_messageFwdHeader();
                this.fwd_from.from_id = abstractSerializedData.readInt32(z);
                TL_messageFwdHeader tL_messageFwdHeader = this.fwd_from;
                tL_messageFwdHeader.flags |= TLRPC.USER_FLAG_ACCESS_HASH;
                this.fwd_from.date = abstractSerializedData.readInt32(z);
            }
            if ((this.flags & TLRPC.USER_FLAG_USERNAME) != 0) {
                this.reply_to_msg_id = abstractSerializedData.readInt32(z);
            }
            this.date = abstractSerializedData.readInt32(z);
            this.message = abstractSerializedData.readString(z);
            this.media = MessageMedia.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
            if (this.id < 0 || !(this.media == null || (this.media instanceof TL_messageMediaEmpty) || (this.media instanceof TL_messageMediaWebPage) || this.message == null || this.message.length() == 0 || !this.message.startsWith("-1"))) {
                this.attachPath = abstractSerializedData.readString(z);
            }
            if ((this.flags & TLRPC.USER_FLAG_LAST_NAME) != 0 && this.id < 0) {
                this.fwd_msg_id = abstractSerializedData.readInt32(z);
            }
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.flags = this.unread ? this.flags | TLRPC.USER_FLAG_ACCESS_HASH : this.flags & -2;
            this.flags = this.out ? this.flags | TLRPC.USER_FLAG_FIRST_NAME : this.flags & -3;
            this.flags = this.mentioned ? this.flags | TLRPC.USER_FLAG_PHONE : this.flags & -17;
            this.flags = this.media_unread ? this.flags | TLRPC.USER_FLAG_PHOTO : this.flags & -33;
            abstractSerializedData.writeInt32(this.flags);
            abstractSerializedData.writeInt32(this.id);
            abstractSerializedData.writeInt32(this.from_id);
            this.to_id.serializeToStream(abstractSerializedData);
            if ((this.flags & TLRPC.USER_FLAG_LAST_NAME) != 0) {
                abstractSerializedData.writeInt32(this.fwd_from.from_id);
                abstractSerializedData.writeInt32(this.fwd_from.date);
            }
            if ((this.flags & TLRPC.USER_FLAG_USERNAME) != 0) {
                abstractSerializedData.writeInt32(this.reply_to_msg_id);
            }
            abstractSerializedData.writeInt32(this.date);
            abstractSerializedData.writeString(this.message);
            this.media.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeString(this.attachPath);
            if ((this.flags & TLRPC.USER_FLAG_LAST_NAME) != 0 && this.id < 0) {
                abstractSerializedData.writeInt32(this.fwd_msg_id);
            }
        }
    }

    public static class TL_message_old4 extends TL_message {
        public static int constructor;

        static {
            constructor = -1023016155;
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            boolean z2 = true;
            this.flags = (abstractSerializedData.readInt32(z) | TLRPC.USER_FLAG_UNUSED2) | TLRPC.USER_FLAG_UNUSED3;
            this.unread = (this.flags & TLRPC.USER_FLAG_ACCESS_HASH) != 0;
            this.out = (this.flags & TLRPC.USER_FLAG_FIRST_NAME) != 0;
            this.mentioned = (this.flags & TLRPC.USER_FLAG_PHONE) != 0;
            if ((this.flags & TLRPC.USER_FLAG_PHOTO) == 0) {
                z2 = false;
            }
            this.media_unread = z2;
            this.id = abstractSerializedData.readInt32(z);
            this.from_id = abstractSerializedData.readInt32(z);
            this.to_id = Peer.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
            if ((this.flags & TLRPC.USER_FLAG_LAST_NAME) != 0) {
                this.fwd_from = new TL_messageFwdHeader();
                this.fwd_from.from_id = abstractSerializedData.readInt32(z);
                TL_messageFwdHeader tL_messageFwdHeader = this.fwd_from;
                tL_messageFwdHeader.flags |= TLRPC.USER_FLAG_ACCESS_HASH;
                this.fwd_from.date = abstractSerializedData.readInt32(z);
            }
            if ((this.flags & TLRPC.USER_FLAG_USERNAME) != 0) {
                this.reply_to_msg_id = abstractSerializedData.readInt32(z);
            }
            this.date = abstractSerializedData.readInt32(z);
            this.message = abstractSerializedData.readString(z);
            this.media = MessageMedia.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
            if ((this.flags & TLRPC.USER_FLAG_STATUS) != 0) {
                this.reply_markup = ReplyMarkup.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
            }
            if (this.id < 0 || !(this.media == null || (this.media instanceof TL_messageMediaEmpty) || (this.media instanceof TL_messageMediaWebPage) || this.message == null || this.message.length() == 0 || !this.message.startsWith("-1"))) {
                this.attachPath = abstractSerializedData.readString(z);
            }
            if ((this.flags & TLRPC.USER_FLAG_LAST_NAME) != 0 && this.id < 0) {
                this.fwd_msg_id = abstractSerializedData.readInt32(z);
            }
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.flags = this.unread ? this.flags | TLRPC.USER_FLAG_ACCESS_HASH : this.flags & -2;
            this.flags = this.out ? this.flags | TLRPC.USER_FLAG_FIRST_NAME : this.flags & -3;
            this.flags = this.mentioned ? this.flags | TLRPC.USER_FLAG_PHONE : this.flags & -17;
            this.flags = this.media_unread ? this.flags | TLRPC.USER_FLAG_PHOTO : this.flags & -33;
            abstractSerializedData.writeInt32(this.flags);
            abstractSerializedData.writeInt32(this.id);
            abstractSerializedData.writeInt32(this.from_id);
            this.to_id.serializeToStream(abstractSerializedData);
            if ((this.flags & TLRPC.USER_FLAG_LAST_NAME) != 0) {
                abstractSerializedData.writeInt32(this.fwd_from.from_id);
                abstractSerializedData.writeInt32(this.fwd_from.date);
            }
            if ((this.flags & TLRPC.USER_FLAG_USERNAME) != 0) {
                abstractSerializedData.writeInt32(this.reply_to_msg_id);
            }
            abstractSerializedData.writeInt32(this.date);
            abstractSerializedData.writeString(this.message);
            this.media.serializeToStream(abstractSerializedData);
            if ((this.flags & TLRPC.USER_FLAG_STATUS) != 0) {
                this.reply_markup.serializeToStream(abstractSerializedData);
            }
            abstractSerializedData.writeString(this.attachPath);
            if ((this.flags & TLRPC.USER_FLAG_LAST_NAME) != 0 && this.id < 0) {
                abstractSerializedData.writeInt32(this.fwd_msg_id);
            }
        }
    }

    public static class TL_message_old5 extends TL_message {
        public static int constructor;

        static {
            constructor = -260565816;
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            int i = 0;
            this.flags = (abstractSerializedData.readInt32(z) | TLRPC.USER_FLAG_UNUSED2) | TLRPC.USER_FLAG_UNUSED3;
            this.unread = (this.flags & TLRPC.USER_FLAG_ACCESS_HASH) != 0;
            this.out = (this.flags & TLRPC.USER_FLAG_FIRST_NAME) != 0;
            this.mentioned = (this.flags & TLRPC.USER_FLAG_PHONE) != 0;
            this.media_unread = (this.flags & TLRPC.USER_FLAG_PHOTO) != 0;
            this.id = abstractSerializedData.readInt32(z);
            this.from_id = abstractSerializedData.readInt32(z);
            this.to_id = Peer.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
            if ((this.flags & TLRPC.USER_FLAG_LAST_NAME) != 0) {
                this.fwd_from = new TL_messageFwdHeader();
                this.fwd_from.from_id = abstractSerializedData.readInt32(z);
                TL_messageFwdHeader tL_messageFwdHeader = this.fwd_from;
                tL_messageFwdHeader.flags |= TLRPC.USER_FLAG_ACCESS_HASH;
                this.fwd_from.date = abstractSerializedData.readInt32(z);
            }
            if ((this.flags & TLRPC.USER_FLAG_USERNAME) != 0) {
                this.reply_to_msg_id = abstractSerializedData.readInt32(z);
            }
            this.date = abstractSerializedData.readInt32(z);
            this.message = abstractSerializedData.readString(z);
            this.media = MessageMedia.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
            if ((this.flags & TLRPC.USER_FLAG_STATUS) != 0) {
                this.reply_markup = ReplyMarkup.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
            }
            if ((this.flags & TLRPC.USER_FLAG_UNUSED) != 0) {
                int readInt32 = abstractSerializedData.readInt32(z);
                if (readInt32 == 481674261) {
                    readInt32 = abstractSerializedData.readInt32(z);
                    while (i < readInt32) {
                        MessageEntity TLdeserialize = MessageEntity.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
                        if (TLdeserialize != null) {
                            this.entities.add(TLdeserialize);
                            i += TLRPC.USER_FLAG_ACCESS_HASH;
                        } else {
                            return;
                        }
                    }
                } else if (z) {
                    Object[] objArr = new Object[TLRPC.USER_FLAG_ACCESS_HASH];
                    objArr[0] = Integer.valueOf(readInt32);
                    throw new RuntimeException(String.format("wrong Vector magic, got %x", objArr));
                } else {
                    return;
                }
            }
            if (this.id < 0 || !(this.media == null || (this.media instanceof TL_messageMediaEmpty) || (this.media instanceof TL_messageMediaWebPage) || this.message == null || this.message.length() == 0 || !this.message.startsWith("-1"))) {
                this.attachPath = abstractSerializedData.readString(z);
            }
            if ((this.flags & TLRPC.USER_FLAG_LAST_NAME) != 0 && this.id < 0) {
                this.fwd_msg_id = abstractSerializedData.readInt32(z);
            }
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.flags = this.unread ? this.flags | TLRPC.USER_FLAG_ACCESS_HASH : this.flags & -2;
            this.flags = this.out ? this.flags | TLRPC.USER_FLAG_FIRST_NAME : this.flags & -3;
            this.flags = this.mentioned ? this.flags | TLRPC.USER_FLAG_PHONE : this.flags & -17;
            this.flags = this.media_unread ? this.flags | TLRPC.USER_FLAG_PHOTO : this.flags & -33;
            abstractSerializedData.writeInt32(this.flags);
            abstractSerializedData.writeInt32(this.id);
            abstractSerializedData.writeInt32(this.from_id);
            this.to_id.serializeToStream(abstractSerializedData);
            if ((this.flags & TLRPC.USER_FLAG_LAST_NAME) != 0) {
                abstractSerializedData.writeInt32(this.fwd_from.from_id);
                abstractSerializedData.writeInt32(this.fwd_from.date);
            }
            if ((this.flags & TLRPC.USER_FLAG_USERNAME) != 0) {
                abstractSerializedData.writeInt32(this.reply_to_msg_id);
            }
            abstractSerializedData.writeInt32(this.date);
            abstractSerializedData.writeString(this.message);
            this.media.serializeToStream(abstractSerializedData);
            if ((this.flags & TLRPC.USER_FLAG_STATUS) != 0) {
                this.reply_markup.serializeToStream(abstractSerializedData);
            }
            if ((this.flags & TLRPC.USER_FLAG_UNUSED) != 0) {
                abstractSerializedData.writeInt32(481674261);
                int size = this.entities.size();
                abstractSerializedData.writeInt32(size);
                for (int i = 0; i < size; i += TLRPC.USER_FLAG_ACCESS_HASH) {
                    ((MessageEntity) this.entities.get(i)).serializeToStream(abstractSerializedData);
                }
            }
            abstractSerializedData.writeString(this.attachPath);
            if ((this.flags & TLRPC.USER_FLAG_LAST_NAME) != 0 && this.id < 0) {
                abstractSerializedData.writeInt32(this.fwd_msg_id);
            }
        }
    }

    public static class TL_message_old6 extends TL_message {
        public static int constructor;

        static {
            constructor = 736885382;
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            int i = 0;
            this.flags = abstractSerializedData.readInt32(z) | TLRPC.USER_FLAG_UNUSED2;
            this.unread = (this.flags & TLRPC.USER_FLAG_ACCESS_HASH) != 0;
            this.out = (this.flags & TLRPC.USER_FLAG_FIRST_NAME) != 0;
            this.mentioned = (this.flags & TLRPC.USER_FLAG_PHONE) != 0;
            this.media_unread = (this.flags & TLRPC.USER_FLAG_PHOTO) != 0;
            this.id = abstractSerializedData.readInt32(z);
            this.from_id = abstractSerializedData.readInt32(z);
            this.to_id = Peer.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
            if ((this.flags & TLRPC.USER_FLAG_LAST_NAME) != 0) {
                this.fwd_from = new TL_messageFwdHeader();
                this.fwd_from.from_id = abstractSerializedData.readInt32(z);
                TL_messageFwdHeader tL_messageFwdHeader = this.fwd_from;
                tL_messageFwdHeader.flags |= TLRPC.USER_FLAG_ACCESS_HASH;
                this.fwd_from.date = abstractSerializedData.readInt32(z);
            }
            if ((this.flags & TLRPC.USER_FLAG_USERNAME) != 0) {
                this.reply_to_msg_id = abstractSerializedData.readInt32(z);
            }
            this.date = abstractSerializedData.readInt32(z);
            this.message = abstractSerializedData.readString(z);
            if ((this.flags & TLRPC.USER_FLAG_UNUSED3) != 0) {
                this.media = MessageMedia.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
            } else {
                this.media = new TL_messageMediaEmpty();
            }
            if ((this.flags & TLRPC.USER_FLAG_STATUS) != 0) {
                this.reply_markup = ReplyMarkup.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
            }
            if ((this.flags & TLRPC.USER_FLAG_UNUSED) != 0) {
                int readInt32 = abstractSerializedData.readInt32(z);
                if (readInt32 == 481674261) {
                    readInt32 = abstractSerializedData.readInt32(z);
                    while (i < readInt32) {
                        MessageEntity TLdeserialize = MessageEntity.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
                        if (TLdeserialize != null) {
                            this.entities.add(TLdeserialize);
                            i += TLRPC.USER_FLAG_ACCESS_HASH;
                        } else {
                            return;
                        }
                    }
                } else if (z) {
                    Object[] objArr = new Object[TLRPC.USER_FLAG_ACCESS_HASH];
                    objArr[0] = Integer.valueOf(readInt32);
                    throw new RuntimeException(String.format("wrong Vector magic, got %x", objArr));
                } else {
                    return;
                }
            }
            if (this.id < 0 || !(this.media == null || (this.media instanceof TL_messageMediaEmpty) || (this.media instanceof TL_messageMediaWebPage) || this.message == null || this.message.length() == 0 || !this.message.startsWith("-1"))) {
                this.attachPath = abstractSerializedData.readString(z);
            }
            if ((this.flags & TLRPC.USER_FLAG_LAST_NAME) != 0 && this.id < 0) {
                this.fwd_msg_id = abstractSerializedData.readInt32(z);
            }
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.flags = this.unread ? this.flags | TLRPC.USER_FLAG_ACCESS_HASH : this.flags & -2;
            this.flags = this.out ? this.flags | TLRPC.USER_FLAG_FIRST_NAME : this.flags & -3;
            this.flags = this.mentioned ? this.flags | TLRPC.USER_FLAG_PHONE : this.flags & -17;
            this.flags = this.media_unread ? this.flags | TLRPC.USER_FLAG_PHOTO : this.flags & -33;
            abstractSerializedData.writeInt32(this.flags);
            abstractSerializedData.writeInt32(this.id);
            abstractSerializedData.writeInt32(this.from_id);
            this.to_id.serializeToStream(abstractSerializedData);
            if ((this.flags & TLRPC.USER_FLAG_LAST_NAME) != 0) {
                abstractSerializedData.writeInt32(this.fwd_from.from_id);
                abstractSerializedData.writeInt32(this.fwd_from.date);
            }
            if ((this.flags & TLRPC.USER_FLAG_USERNAME) != 0) {
                abstractSerializedData.writeInt32(this.reply_to_msg_id);
            }
            abstractSerializedData.writeInt32(this.date);
            abstractSerializedData.writeString(this.message);
            if ((this.flags & TLRPC.USER_FLAG_UNUSED3) != 0) {
                this.media.serializeToStream(abstractSerializedData);
            }
            if ((this.flags & TLRPC.USER_FLAG_STATUS) != 0) {
                this.reply_markup.serializeToStream(abstractSerializedData);
            }
            if ((this.flags & TLRPC.USER_FLAG_UNUSED) != 0) {
                abstractSerializedData.writeInt32(481674261);
                int size = this.entities.size();
                abstractSerializedData.writeInt32(size);
                for (int i = 0; i < size; i += TLRPC.USER_FLAG_ACCESS_HASH) {
                    ((MessageEntity) this.entities.get(i)).serializeToStream(abstractSerializedData);
                }
            }
            abstractSerializedData.writeString(this.attachPath);
            if ((this.flags & TLRPC.USER_FLAG_LAST_NAME) != 0 && this.id < 0) {
                abstractSerializedData.writeInt32(this.fwd_msg_id);
            }
        }
    }

    public static class TL_message_old7 extends TL_message {
        public static int constructor;

        static {
            constructor = 1537633299;
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            int i = 0;
            this.flags = abstractSerializedData.readInt32(z);
            this.unread = (this.flags & TLRPC.USER_FLAG_ACCESS_HASH) != 0;
            this.out = (this.flags & TLRPC.USER_FLAG_FIRST_NAME) != 0;
            this.mentioned = (this.flags & TLRPC.USER_FLAG_PHONE) != 0;
            this.media_unread = (this.flags & TLRPC.USER_FLAG_PHOTO) != 0;
            this.id = abstractSerializedData.readInt32(z);
            if ((this.flags & TLRPC.USER_FLAG_UNUSED2) != 0) {
                this.from_id = abstractSerializedData.readInt32(z);
            }
            this.to_id = Peer.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
            if (this.from_id == 0) {
                if (this.to_id.user_id != 0) {
                    this.from_id = this.to_id.user_id;
                } else {
                    this.from_id = -this.to_id.channel_id;
                }
            }
            if ((this.flags & TLRPC.USER_FLAG_LAST_NAME) != 0) {
                this.fwd_from = new TL_messageFwdHeader();
                Peer TLdeserialize = Peer.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
                TL_messageFwdHeader tL_messageFwdHeader;
                if (TLdeserialize instanceof TL_peerChannel) {
                    this.fwd_from.channel_id = TLdeserialize.channel_id;
                    tL_messageFwdHeader = this.fwd_from;
                    tL_messageFwdHeader.flags |= TLRPC.USER_FLAG_FIRST_NAME;
                } else if (TLdeserialize instanceof TL_peerUser) {
                    this.fwd_from.from_id = TLdeserialize.user_id;
                    tL_messageFwdHeader = this.fwd_from;
                    tL_messageFwdHeader.flags |= TLRPC.USER_FLAG_ACCESS_HASH;
                }
                this.fwd_from.date = abstractSerializedData.readInt32(z);
            }
            if ((this.flags & TLRPC.USER_FLAG_USERNAME) != 0) {
                this.reply_to_msg_id = abstractSerializedData.readInt32(z);
            }
            this.date = abstractSerializedData.readInt32(z);
            this.message = abstractSerializedData.readString(z);
            if ((this.flags & TLRPC.USER_FLAG_UNUSED3) != 0) {
                this.media = MessageMedia.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
            } else {
                this.media = new TL_messageMediaEmpty();
            }
            if ((this.flags & TLRPC.USER_FLAG_STATUS) != 0) {
                this.reply_markup = ReplyMarkup.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
            }
            if ((this.flags & TLRPC.USER_FLAG_UNUSED) != 0) {
                int readInt32 = abstractSerializedData.readInt32(z);
                if (readInt32 == 481674261) {
                    readInt32 = abstractSerializedData.readInt32(z);
                    while (i < readInt32) {
                        MessageEntity TLdeserialize2 = MessageEntity.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
                        if (TLdeserialize2 != null) {
                            this.entities.add(TLdeserialize2);
                            i += TLRPC.USER_FLAG_ACCESS_HASH;
                        } else {
                            return;
                        }
                    }
                } else if (z) {
                    Object[] objArr = new Object[TLRPC.USER_FLAG_ACCESS_HASH];
                    objArr[0] = Integer.valueOf(readInt32);
                    throw new RuntimeException(String.format("wrong Vector magic, got %x", objArr));
                } else {
                    return;
                }
            }
            if ((this.flags & TLRPC.MESSAGE_FLAG_HAS_VIEWS) != 0) {
                this.views = abstractSerializedData.readInt32(z);
            }
            if (this.id < 0 || !(this.media == null || (this.media instanceof TL_messageMediaEmpty) || (this.media instanceof TL_messageMediaWebPage) || this.message == null || this.message.length() == 0 || !this.message.startsWith("-1"))) {
                this.attachPath = abstractSerializedData.readString(z);
            }
            if ((this.flags & TLRPC.USER_FLAG_LAST_NAME) != 0 && this.id < 0) {
                this.fwd_msg_id = abstractSerializedData.readInt32(z);
            }
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.flags = this.unread ? this.flags | TLRPC.USER_FLAG_ACCESS_HASH : this.flags & -2;
            this.flags = this.out ? this.flags | TLRPC.USER_FLAG_FIRST_NAME : this.flags & -3;
            this.flags = this.mentioned ? this.flags | TLRPC.USER_FLAG_PHONE : this.flags & -17;
            this.flags = this.media_unread ? this.flags | TLRPC.USER_FLAG_PHOTO : this.flags & -33;
            abstractSerializedData.writeInt32(this.flags);
            abstractSerializedData.writeInt32(this.id);
            if ((this.flags & TLRPC.USER_FLAG_UNUSED2) != 0) {
                abstractSerializedData.writeInt32(this.from_id);
            }
            this.to_id.serializeToStream(abstractSerializedData);
            if ((this.flags & TLRPC.USER_FLAG_LAST_NAME) != 0) {
                if (this.fwd_from.from_id != 0) {
                    TL_peerUser tL_peerUser = new TL_peerUser();
                    tL_peerUser.user_id = this.fwd_from.from_id;
                    tL_peerUser.serializeToStream(abstractSerializedData);
                } else {
                    TL_peerChannel tL_peerChannel = new TL_peerChannel();
                    tL_peerChannel.channel_id = this.fwd_from.channel_id;
                    tL_peerChannel.serializeToStream(abstractSerializedData);
                }
                abstractSerializedData.writeInt32(this.fwd_from.date);
            }
            if ((this.flags & TLRPC.USER_FLAG_USERNAME) != 0) {
                abstractSerializedData.writeInt32(this.reply_to_msg_id);
            }
            abstractSerializedData.writeInt32(this.date);
            abstractSerializedData.writeString(this.message);
            if ((this.flags & TLRPC.USER_FLAG_UNUSED3) != 0) {
                this.media.serializeToStream(abstractSerializedData);
            }
            if ((this.flags & TLRPC.USER_FLAG_STATUS) != 0) {
                this.reply_markup.serializeToStream(abstractSerializedData);
            }
            if ((this.flags & TLRPC.USER_FLAG_UNUSED) != 0) {
                abstractSerializedData.writeInt32(481674261);
                int size = this.entities.size();
                abstractSerializedData.writeInt32(size);
                for (int i = 0; i < size; i += TLRPC.USER_FLAG_ACCESS_HASH) {
                    ((MessageEntity) this.entities.get(i)).serializeToStream(abstractSerializedData);
                }
            }
            if ((this.flags & TLRPC.MESSAGE_FLAG_HAS_VIEWS) != 0) {
                abstractSerializedData.writeInt32(this.views);
            }
            abstractSerializedData.writeString(this.attachPath);
            if ((this.flags & TLRPC.USER_FLAG_LAST_NAME) != 0 && this.id < 0) {
                abstractSerializedData.writeInt32(this.fwd_msg_id);
            }
        }
    }

    public static class TL_message_old extends TL_message {
        public static int constructor;

        static {
            constructor = 585853626;
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.id = abstractSerializedData.readInt32(z);
            this.from_id = abstractSerializedData.readInt32(z);
            this.to_id = Peer.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
            this.out = abstractSerializedData.readBool(z);
            this.unread = abstractSerializedData.readBool(z);
            this.flags |= 768;
            this.date = abstractSerializedData.readInt32(z);
            this.message = abstractSerializedData.readString(z);
            this.media = MessageMedia.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
            if (this.id < 0 || !(this.media == null || (this.media instanceof TL_messageMediaEmpty) || (this.media instanceof TL_messageMediaWebPage) || this.message == null || this.message.length() == 0 || !this.message.startsWith("-1"))) {
                this.attachPath = abstractSerializedData.readString(z);
            }
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.id);
            abstractSerializedData.writeInt32(this.from_id);
            this.to_id.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeBool(this.out);
            abstractSerializedData.writeBool(this.unread);
            abstractSerializedData.writeInt32(this.date);
            abstractSerializedData.writeString(this.message);
            this.media.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeString(this.attachPath);
        }
    }

    public static class TL_message_secret extends TL_message {
        public static int constructor;

        static {
            constructor = 1431655929;
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            int i = 0;
            this.flags = abstractSerializedData.readInt32(z);
            this.unread = (this.flags & TLRPC.USER_FLAG_ACCESS_HASH) != 0;
            this.out = (this.flags & TLRPC.USER_FLAG_FIRST_NAME) != 0;
            this.mentioned = (this.flags & TLRPC.USER_FLAG_PHONE) != 0;
            this.media_unread = (this.flags & TLRPC.USER_FLAG_PHOTO) != 0;
            this.id = abstractSerializedData.readInt32(z);
            this.ttl = abstractSerializedData.readInt32(z);
            this.from_id = abstractSerializedData.readInt32(z);
            this.to_id = Peer.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
            this.date = abstractSerializedData.readInt32(z);
            this.message = abstractSerializedData.readString(z);
            this.media = MessageMedia.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
            int readInt32 = abstractSerializedData.readInt32(z);
            if (readInt32 == 481674261) {
                readInt32 = abstractSerializedData.readInt32(z);
                while (i < readInt32) {
                    MessageEntity TLdeserialize = MessageEntity.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
                    if (TLdeserialize != null) {
                        this.entities.add(TLdeserialize);
                        i += TLRPC.USER_FLAG_ACCESS_HASH;
                    } else {
                        return;
                    }
                }
                if ((this.flags & TLRPC.MESSAGE_FLAG_HAS_BOT_ID) != 0) {
                    this.via_bot_name = abstractSerializedData.readString(z);
                }
                if ((this.flags & TLRPC.USER_FLAG_USERNAME) != 0) {
                    this.reply_to_random_id = abstractSerializedData.readInt64(z);
                }
                if (this.id < 0 || !(this.media == null || (this.media instanceof TL_messageMediaEmpty) || (this.media instanceof TL_messageMediaWebPage) || this.message == null || this.message.length() == 0 || !this.message.startsWith("-1"))) {
                    this.attachPath = abstractSerializedData.readString(z);
                }
            } else if (z) {
                Object[] objArr = new Object[TLRPC.USER_FLAG_ACCESS_HASH];
                objArr[0] = Integer.valueOf(readInt32);
                throw new RuntimeException(String.format("wrong Vector magic, got %x", objArr));
            }
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.flags = this.unread ? this.flags | TLRPC.USER_FLAG_ACCESS_HASH : this.flags & -2;
            this.flags = this.out ? this.flags | TLRPC.USER_FLAG_FIRST_NAME : this.flags & -3;
            this.flags = this.mentioned ? this.flags | TLRPC.USER_FLAG_PHONE : this.flags & -17;
            this.flags = this.media_unread ? this.flags | TLRPC.USER_FLAG_PHOTO : this.flags & -33;
            abstractSerializedData.writeInt32(this.flags);
            abstractSerializedData.writeInt32(this.id);
            abstractSerializedData.writeInt32(this.ttl);
            abstractSerializedData.writeInt32(this.from_id);
            this.to_id.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeInt32(this.date);
            abstractSerializedData.writeString(this.message);
            this.media.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeInt32(481674261);
            int size = this.entities.size();
            abstractSerializedData.writeInt32(size);
            for (int i = 0; i < size; i += TLRPC.USER_FLAG_ACCESS_HASH) {
                ((MessageEntity) this.entities.get(i)).serializeToStream(abstractSerializedData);
            }
            if ((this.flags & TLRPC.MESSAGE_FLAG_HAS_BOT_ID) != 0) {
                abstractSerializedData.writeString(this.via_bot_name);
            }
            if ((this.flags & TLRPC.USER_FLAG_USERNAME) != 0) {
                abstractSerializedData.writeInt64(this.reply_to_random_id);
            }
            abstractSerializedData.writeString(this.attachPath);
        }
    }

    public static class TL_message_secret_old extends TL_message_secret {
        public static int constructor;

        static {
            constructor = 1431655928;
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            boolean z2 = true;
            this.flags = (abstractSerializedData.readInt32(z) | TLRPC.USER_FLAG_UNUSED2) | TLRPC.USER_FLAG_UNUSED3;
            this.unread = (this.flags & TLRPC.USER_FLAG_ACCESS_HASH) != 0;
            this.out = (this.flags & TLRPC.USER_FLAG_FIRST_NAME) != 0;
            this.mentioned = (this.flags & TLRPC.USER_FLAG_PHONE) != 0;
            if ((this.flags & TLRPC.USER_FLAG_PHOTO) == 0) {
                z2 = false;
            }
            this.media_unread = z2;
            this.id = abstractSerializedData.readInt32(z);
            this.ttl = abstractSerializedData.readInt32(z);
            this.from_id = abstractSerializedData.readInt32(z);
            this.to_id = Peer.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
            this.date = abstractSerializedData.readInt32(z);
            this.message = abstractSerializedData.readString(z);
            this.media = MessageMedia.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
            if (this.id < 0 || !(this.media == null || (this.media instanceof TL_messageMediaEmpty) || (this.media instanceof TL_messageMediaWebPage) || this.message == null || this.message.length() == 0 || !this.message.startsWith("-1"))) {
                this.attachPath = abstractSerializedData.readString(z);
            }
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.flags = this.unread ? this.flags | TLRPC.USER_FLAG_ACCESS_HASH : this.flags & -2;
            this.flags = this.out ? this.flags | TLRPC.USER_FLAG_FIRST_NAME : this.flags & -3;
            this.flags = this.mentioned ? this.flags | TLRPC.USER_FLAG_PHONE : this.flags & -17;
            this.flags = this.media_unread ? this.flags | TLRPC.USER_FLAG_PHOTO : this.flags & -33;
            abstractSerializedData.writeInt32(this.flags);
            abstractSerializedData.writeInt32(this.id);
            abstractSerializedData.writeInt32(this.ttl);
            abstractSerializedData.writeInt32(this.from_id);
            this.to_id.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeInt32(this.date);
            abstractSerializedData.writeString(this.message);
            this.media.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeString(this.attachPath);
        }
    }

    public static class TL_messages_acceptEncryption extends TLObject {
        public static int constructor;
        public byte[] g_b;
        public long key_fingerprint;
        public TL_inputEncryptedChat peer;

        static {
            constructor = 1035731989;
        }

        public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            return EncryptedChat.TLdeserialize(abstractSerializedData, i, z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.peer.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeByteArray(this.g_b);
            abstractSerializedData.writeInt64(this.key_fingerprint);
        }
    }

    public static class TL_messages_addChatUser extends TLObject {
        public static int constructor;
        public int chat_id;
        public int fwd_limit;
        public InputUser user_id;

        static {
            constructor = -106911223;
        }

        public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            return Updates.TLdeserialize(abstractSerializedData, i, z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.chat_id);
            this.user_id.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeInt32(this.fwd_limit);
        }
    }

    public static class TL_messages_affectedHistory extends TLObject {
        public static int constructor;
        public int offset;
        public int pts;
        public int pts_count;

        static {
            constructor = -1269012015;
        }

        public static TL_messages_affectedHistory TLdeserialize(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            if (constructor == i) {
                TL_messages_affectedHistory tL_messages_affectedHistory = new TL_messages_affectedHistory();
                tL_messages_affectedHistory.readParams(abstractSerializedData, z);
                return tL_messages_affectedHistory;
            } else if (!z) {
                return null;
            } else {
                Object[] objArr = new Object[TLRPC.USER_FLAG_ACCESS_HASH];
                objArr[0] = Integer.valueOf(i);
                throw new RuntimeException(String.format("can't parse magic %x in TL_messages_affectedHistory", objArr));
            }
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.pts = abstractSerializedData.readInt32(z);
            this.pts_count = abstractSerializedData.readInt32(z);
            this.offset = abstractSerializedData.readInt32(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.pts);
            abstractSerializedData.writeInt32(this.pts_count);
            abstractSerializedData.writeInt32(this.offset);
        }
    }

    public static class TL_messages_affectedMessages extends TLObject {
        public static int constructor;
        public int pts;
        public int pts_count;

        static {
            constructor = -2066640507;
        }

        public static TL_messages_affectedMessages TLdeserialize(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            if (constructor == i) {
                TL_messages_affectedMessages tL_messages_affectedMessages = new TL_messages_affectedMessages();
                tL_messages_affectedMessages.readParams(abstractSerializedData, z);
                return tL_messages_affectedMessages;
            } else if (!z) {
                return null;
            } else {
                Object[] objArr = new Object[TLRPC.USER_FLAG_ACCESS_HASH];
                objArr[0] = Integer.valueOf(i);
                throw new RuntimeException(String.format("can't parse magic %x in TL_messages_affectedMessages", objArr));
            }
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.pts = abstractSerializedData.readInt32(z);
            this.pts_count = abstractSerializedData.readInt32(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.pts);
            abstractSerializedData.writeInt32(this.pts_count);
        }
    }

    public static class messages_AllStickers extends TLObject {
        public ArrayList<Document> documents;
        public String hash;
        public ArrayList<TL_stickerPack> packs;
        public ArrayList<StickerSet> sets;

        public messages_AllStickers() {
            this.sets = new ArrayList();
            this.packs = new ArrayList();
            this.documents = new ArrayList();
        }

        public static messages_AllStickers TLdeserialize(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            messages_AllStickers com_hanista_mobogram_tgnet_TLRPC_messages_AllStickers = null;
            switch (i) {
                case -395967805:
                    com_hanista_mobogram_tgnet_TLRPC_messages_AllStickers = new TL_messages_allStickersNotModified();
                    break;
                case -302170017:
                    com_hanista_mobogram_tgnet_TLRPC_messages_AllStickers = new TL_messages_allStickers();
                    break;
            }
            if (com_hanista_mobogram_tgnet_TLRPC_messages_AllStickers == null && z) {
                Object[] objArr = new Object[TLRPC.USER_FLAG_ACCESS_HASH];
                objArr[0] = Integer.valueOf(i);
                throw new RuntimeException(String.format("can't parse magic %x in messages_AllStickers", objArr));
            }
            if (com_hanista_mobogram_tgnet_TLRPC_messages_AllStickers != null) {
                com_hanista_mobogram_tgnet_TLRPC_messages_AllStickers.readParams(abstractSerializedData, z);
            }
            return com_hanista_mobogram_tgnet_TLRPC_messages_AllStickers;
        }
    }

    public static class TL_messages_allStickers extends messages_AllStickers {
        public static int constructor;
        public int hash;

        static {
            constructor = -302170017;
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            int i = 0;
            this.hash = abstractSerializedData.readInt32(z);
            int readInt32 = abstractSerializedData.readInt32(z);
            if (readInt32 == 481674261) {
                readInt32 = abstractSerializedData.readInt32(z);
                while (i < readInt32) {
                    StickerSet TLdeserialize = StickerSet.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
                    if (TLdeserialize != null) {
                        this.sets.add(TLdeserialize);
                        i += TLRPC.USER_FLAG_ACCESS_HASH;
                    } else {
                        return;
                    }
                }
            } else if (z) {
                Object[] objArr = new Object[TLRPC.USER_FLAG_ACCESS_HASH];
                objArr[0] = Integer.valueOf(readInt32);
                throw new RuntimeException(String.format("wrong Vector magic, got %x", objArr));
            }
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.hash);
            abstractSerializedData.writeInt32(481674261);
            int size = this.sets.size();
            abstractSerializedData.writeInt32(size);
            for (int i = 0; i < size; i += TLRPC.USER_FLAG_ACCESS_HASH) {
                ((StickerSet) this.sets.get(i)).serializeToStream(abstractSerializedData);
            }
        }
    }

    public static class TL_messages_allStickersNotModified extends messages_AllStickers {
        public static int constructor;

        static {
            constructor = -395967805;
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
        }
    }

    public static class TL_messages_archivedStickers extends TLObject {
        public static int constructor;
        public int count;
        public ArrayList<StickerSetCovered> sets;

        static {
            constructor = 1338747336;
        }

        public TL_messages_archivedStickers() {
            this.sets = new ArrayList();
        }

        public static TL_messages_archivedStickers TLdeserialize(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            if (constructor == i) {
                TL_messages_archivedStickers tL_messages_archivedStickers = new TL_messages_archivedStickers();
                tL_messages_archivedStickers.readParams(abstractSerializedData, z);
                return tL_messages_archivedStickers;
            } else if (!z) {
                return null;
            } else {
                Object[] objArr = new Object[TLRPC.USER_FLAG_ACCESS_HASH];
                objArr[0] = Integer.valueOf(i);
                throw new RuntimeException(String.format("can't parse magic %x in TL_messages_archivedStickers", objArr));
            }
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            int i = 0;
            this.count = abstractSerializedData.readInt32(z);
            int readInt32 = abstractSerializedData.readInt32(z);
            if (readInt32 == 481674261) {
                readInt32 = abstractSerializedData.readInt32(z);
                while (i < readInt32) {
                    StickerSetCovered TLdeserialize = StickerSetCovered.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
                    if (TLdeserialize != null) {
                        this.sets.add(TLdeserialize);
                        i += TLRPC.USER_FLAG_ACCESS_HASH;
                    } else {
                        return;
                    }
                }
            } else if (z) {
                Object[] objArr = new Object[TLRPC.USER_FLAG_ACCESS_HASH];
                objArr[0] = Integer.valueOf(readInt32);
                throw new RuntimeException(String.format("wrong Vector magic, got %x", objArr));
            }
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.count);
            abstractSerializedData.writeInt32(481674261);
            int size = this.sets.size();
            abstractSerializedData.writeInt32(size);
            for (int i = 0; i < size; i += TLRPC.USER_FLAG_ACCESS_HASH) {
                ((StickerSetCovered) this.sets.get(i)).serializeToStream(abstractSerializedData);
            }
        }
    }

    public static class TL_messages_botCallbackAnswer extends TLObject {
        public static int constructor;
        public boolean alert;
        public int flags;
        public boolean has_url;
        public String message;
        public String url;

        static {
            constructor = -1324486149;
        }

        public static TL_messages_botCallbackAnswer TLdeserialize(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            if (constructor == i) {
                TL_messages_botCallbackAnswer tL_messages_botCallbackAnswer = new TL_messages_botCallbackAnswer();
                tL_messages_botCallbackAnswer.readParams(abstractSerializedData, z);
                return tL_messages_botCallbackAnswer;
            } else if (!z) {
                return null;
            } else {
                Object[] objArr = new Object[TLRPC.USER_FLAG_ACCESS_HASH];
                objArr[0] = Integer.valueOf(i);
                throw new RuntimeException(String.format("can't parse magic %x in TL_messages_botCallbackAnswer", objArr));
            }
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            boolean z2 = true;
            this.flags = abstractSerializedData.readInt32(z);
            this.alert = (this.flags & TLRPC.USER_FLAG_FIRST_NAME) != 0;
            if ((this.flags & TLRPC.USER_FLAG_USERNAME) == 0) {
                z2 = false;
            }
            this.has_url = z2;
            if ((this.flags & TLRPC.USER_FLAG_ACCESS_HASH) != 0) {
                this.message = abstractSerializedData.readString(z);
            }
            if ((this.flags & TLRPC.USER_FLAG_LAST_NAME) != 0) {
                this.url = abstractSerializedData.readString(z);
            }
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.flags = this.alert ? this.flags | TLRPC.USER_FLAG_FIRST_NAME : this.flags & -3;
            this.flags = this.has_url ? this.flags | TLRPC.USER_FLAG_USERNAME : this.flags & -9;
            abstractSerializedData.writeInt32(this.flags);
            if ((this.flags & TLRPC.USER_FLAG_ACCESS_HASH) != 0) {
                abstractSerializedData.writeString(this.message);
            }
            if ((this.flags & TLRPC.USER_FLAG_LAST_NAME) != 0) {
                abstractSerializedData.writeString(this.url);
            }
        }
    }

    public static class TL_messages_botResults extends TLObject {
        public static int constructor;
        public int flags;
        public boolean gallery;
        public String next_offset;
        public long query_id;
        public ArrayList<BotInlineResult> results;
        public TL_inlineBotSwitchPM switch_pm;

        static {
            constructor = 627509670;
        }

        public TL_messages_botResults() {
            this.results = new ArrayList();
        }

        public static TL_messages_botResults TLdeserialize(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            if (constructor == i) {
                TL_messages_botResults tL_messages_botResults = new TL_messages_botResults();
                tL_messages_botResults.readParams(abstractSerializedData, z);
                return tL_messages_botResults;
            } else if (!z) {
                return null;
            } else {
                Object[] objArr = new Object[TLRPC.USER_FLAG_ACCESS_HASH];
                objArr[0] = Integer.valueOf(i);
                throw new RuntimeException(String.format("can't parse magic %x in TL_messages_botResults", objArr));
            }
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            int i = 0;
            this.flags = abstractSerializedData.readInt32(z);
            this.gallery = (this.flags & TLRPC.USER_FLAG_ACCESS_HASH) != 0;
            this.query_id = abstractSerializedData.readInt64(z);
            if ((this.flags & TLRPC.USER_FLAG_FIRST_NAME) != 0) {
                this.next_offset = abstractSerializedData.readString(z);
            }
            if ((this.flags & TLRPC.USER_FLAG_LAST_NAME) != 0) {
                this.switch_pm = TL_inlineBotSwitchPM.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
            }
            int readInt32 = abstractSerializedData.readInt32(z);
            if (readInt32 == 481674261) {
                readInt32 = abstractSerializedData.readInt32(z);
                while (i < readInt32) {
                    BotInlineResult TLdeserialize = BotInlineResult.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
                    if (TLdeserialize != null) {
                        this.results.add(TLdeserialize);
                        i += TLRPC.USER_FLAG_ACCESS_HASH;
                    } else {
                        return;
                    }
                }
            } else if (z) {
                Object[] objArr = new Object[TLRPC.USER_FLAG_ACCESS_HASH];
                objArr[0] = Integer.valueOf(readInt32);
                throw new RuntimeException(String.format("wrong Vector magic, got %x", objArr));
            }
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.flags = this.gallery ? this.flags | TLRPC.USER_FLAG_ACCESS_HASH : this.flags & -2;
            abstractSerializedData.writeInt32(this.flags);
            abstractSerializedData.writeInt64(this.query_id);
            if ((this.flags & TLRPC.USER_FLAG_FIRST_NAME) != 0) {
                abstractSerializedData.writeString(this.next_offset);
            }
            if ((this.flags & TLRPC.USER_FLAG_LAST_NAME) != 0) {
                this.switch_pm.serializeToStream(abstractSerializedData);
            }
            abstractSerializedData.writeInt32(481674261);
            int size = this.results.size();
            abstractSerializedData.writeInt32(size);
            for (int i = 0; i < size; i += TLRPC.USER_FLAG_ACCESS_HASH) {
                ((BotInlineResult) this.results.get(i)).serializeToStream(abstractSerializedData);
            }
        }
    }

    public static class messages_Messages extends TLObject {
        public ArrayList<Chat> chats;
        public int count;
        public int flags;
        public ArrayList<Message> messages;
        public int pts;
        public ArrayList<User> users;

        public messages_Messages() {
            this.messages = new ArrayList();
            this.chats = new ArrayList();
            this.users = new ArrayList();
        }

        public static messages_Messages TLdeserialize(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            messages_Messages com_hanista_mobogram_tgnet_TLRPC_messages_Messages = null;
            switch (i) {
                case -1938715001:
                    com_hanista_mobogram_tgnet_TLRPC_messages_Messages = new TL_messages_messages();
                    break;
                case -1725551049:
                    com_hanista_mobogram_tgnet_TLRPC_messages_Messages = new TL_messages_channelMessages();
                    break;
                case 189033187:
                    com_hanista_mobogram_tgnet_TLRPC_messages_Messages = new TL_messages_messagesSlice();
                    break;
            }
            if (com_hanista_mobogram_tgnet_TLRPC_messages_Messages == null && z) {
                Object[] objArr = new Object[TLRPC.USER_FLAG_ACCESS_HASH];
                objArr[0] = Integer.valueOf(i);
                throw new RuntimeException(String.format("can't parse magic %x in messages_Messages", objArr));
            }
            if (com_hanista_mobogram_tgnet_TLRPC_messages_Messages != null) {
                com_hanista_mobogram_tgnet_TLRPC_messages_Messages.readParams(abstractSerializedData, z);
            }
            return com_hanista_mobogram_tgnet_TLRPC_messages_Messages;
        }
    }

    public static class TL_messages_channelMessages extends messages_Messages {
        public static int constructor;

        static {
            constructor = -1725551049;
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            int i = 0;
            this.flags = abstractSerializedData.readInt32(z);
            this.pts = abstractSerializedData.readInt32(z);
            this.count = abstractSerializedData.readInt32(z);
            int readInt32 = abstractSerializedData.readInt32(z);
            Object[] objArr;
            if (readInt32 == 481674261) {
                int readInt322 = abstractSerializedData.readInt32(z);
                readInt32 = 0;
                while (readInt32 < readInt322) {
                    Message TLdeserialize = Message.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
                    if (TLdeserialize != null) {
                        this.messages.add(TLdeserialize);
                        readInt32 += TLRPC.USER_FLAG_ACCESS_HASH;
                    } else {
                        return;
                    }
                }
                readInt32 = abstractSerializedData.readInt32(z);
                if (readInt32 == 481674261) {
                    readInt322 = abstractSerializedData.readInt32(z);
                    readInt32 = 0;
                    while (readInt32 < readInt322) {
                        Chat TLdeserialize2 = Chat.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
                        if (TLdeserialize2 != null) {
                            this.chats.add(TLdeserialize2);
                            readInt32 += TLRPC.USER_FLAG_ACCESS_HASH;
                        } else {
                            return;
                        }
                    }
                    readInt32 = abstractSerializedData.readInt32(z);
                    if (readInt32 == 481674261) {
                        readInt32 = abstractSerializedData.readInt32(z);
                        while (i < readInt32) {
                            User TLdeserialize3 = User.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
                            if (TLdeserialize3 != null) {
                                this.users.add(TLdeserialize3);
                                i += TLRPC.USER_FLAG_ACCESS_HASH;
                            } else {
                                return;
                            }
                        }
                    } else if (z) {
                        objArr = new Object[TLRPC.USER_FLAG_ACCESS_HASH];
                        objArr[0] = Integer.valueOf(readInt32);
                        throw new RuntimeException(String.format("wrong Vector magic, got %x", objArr));
                    }
                } else if (z) {
                    objArr = new Object[TLRPC.USER_FLAG_ACCESS_HASH];
                    objArr[0] = Integer.valueOf(readInt32);
                    throw new RuntimeException(String.format("wrong Vector magic, got %x", objArr));
                }
            } else if (z) {
                objArr = new Object[TLRPC.USER_FLAG_ACCESS_HASH];
                objArr[0] = Integer.valueOf(readInt32);
                throw new RuntimeException(String.format("wrong Vector magic, got %x", objArr));
            }
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            int i;
            int i2 = 0;
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.flags);
            abstractSerializedData.writeInt32(this.pts);
            abstractSerializedData.writeInt32(this.count);
            abstractSerializedData.writeInt32(481674261);
            int size = this.messages.size();
            abstractSerializedData.writeInt32(size);
            for (i = 0; i < size; i += TLRPC.USER_FLAG_ACCESS_HASH) {
                ((Message) this.messages.get(i)).serializeToStream(abstractSerializedData);
            }
            abstractSerializedData.writeInt32(481674261);
            size = this.chats.size();
            abstractSerializedData.writeInt32(size);
            for (i = 0; i < size; i += TLRPC.USER_FLAG_ACCESS_HASH) {
                ((Chat) this.chats.get(i)).serializeToStream(abstractSerializedData);
            }
            abstractSerializedData.writeInt32(481674261);
            i = this.users.size();
            abstractSerializedData.writeInt32(i);
            while (i2 < i) {
                ((User) this.users.get(i2)).serializeToStream(abstractSerializedData);
                i2 += TLRPC.USER_FLAG_ACCESS_HASH;
            }
        }
    }

    public static class TL_messages_chatFull extends TLObject {
        public static int constructor;
        public ArrayList<Chat> chats;
        public ChatFull full_chat;
        public ArrayList<User> users;

        static {
            constructor = -438840932;
        }

        public TL_messages_chatFull() {
            this.chats = new ArrayList();
            this.users = new ArrayList();
        }

        public static TL_messages_chatFull TLdeserialize(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            if (constructor == i) {
                TL_messages_chatFull tL_messages_chatFull = new TL_messages_chatFull();
                tL_messages_chatFull.readParams(abstractSerializedData, z);
                return tL_messages_chatFull;
            } else if (!z) {
                return null;
            } else {
                Object[] objArr = new Object[TLRPC.USER_FLAG_ACCESS_HASH];
                objArr[0] = Integer.valueOf(i);
                throw new RuntimeException(String.format("can't parse magic %x in TL_messages_chatFull", objArr));
            }
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            int i = 0;
            this.full_chat = ChatFull.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
            int readInt32 = abstractSerializedData.readInt32(z);
            Object[] objArr;
            if (readInt32 == 481674261) {
                int readInt322 = abstractSerializedData.readInt32(z);
                readInt32 = 0;
                while (readInt32 < readInt322) {
                    Chat TLdeserialize = Chat.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
                    if (TLdeserialize != null) {
                        this.chats.add(TLdeserialize);
                        readInt32 += TLRPC.USER_FLAG_ACCESS_HASH;
                    } else {
                        return;
                    }
                }
                readInt32 = abstractSerializedData.readInt32(z);
                if (readInt32 == 481674261) {
                    readInt32 = abstractSerializedData.readInt32(z);
                    while (i < readInt32) {
                        User TLdeserialize2 = User.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
                        if (TLdeserialize2 != null) {
                            this.users.add(TLdeserialize2);
                            i += TLRPC.USER_FLAG_ACCESS_HASH;
                        } else {
                            return;
                        }
                    }
                } else if (z) {
                    objArr = new Object[TLRPC.USER_FLAG_ACCESS_HASH];
                    objArr[0] = Integer.valueOf(readInt32);
                    throw new RuntimeException(String.format("wrong Vector magic, got %x", objArr));
                }
            } else if (z) {
                objArr = new Object[TLRPC.USER_FLAG_ACCESS_HASH];
                objArr[0] = Integer.valueOf(readInt32);
                throw new RuntimeException(String.format("wrong Vector magic, got %x", objArr));
            }
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            int i;
            int i2 = 0;
            abstractSerializedData.writeInt32(constructor);
            this.full_chat.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeInt32(481674261);
            int size = this.chats.size();
            abstractSerializedData.writeInt32(size);
            for (i = 0; i < size; i += TLRPC.USER_FLAG_ACCESS_HASH) {
                ((Chat) this.chats.get(i)).serializeToStream(abstractSerializedData);
            }
            abstractSerializedData.writeInt32(481674261);
            i = this.users.size();
            abstractSerializedData.writeInt32(i);
            while (i2 < i) {
                ((User) this.users.get(i2)).serializeToStream(abstractSerializedData);
                i2 += TLRPC.USER_FLAG_ACCESS_HASH;
            }
        }
    }

    public static class TL_messages_chats extends TLObject {
        public static int constructor;
        public ArrayList<Chat> chats;

        static {
            constructor = 1694474197;
        }

        public TL_messages_chats() {
            this.chats = new ArrayList();
        }

        public static TL_messages_chats TLdeserialize(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            if (constructor == i) {
                TL_messages_chats tL_messages_chats = new TL_messages_chats();
                tL_messages_chats.readParams(abstractSerializedData, z);
                return tL_messages_chats;
            } else if (!z) {
                return null;
            } else {
                Object[] objArr = new Object[TLRPC.USER_FLAG_ACCESS_HASH];
                objArr[0] = Integer.valueOf(i);
                throw new RuntimeException(String.format("can't parse magic %x in TL_messages_chats", objArr));
            }
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            int i = 0;
            int readInt32 = abstractSerializedData.readInt32(z);
            if (readInt32 == 481674261) {
                readInt32 = abstractSerializedData.readInt32(z);
                while (i < readInt32) {
                    Chat TLdeserialize = Chat.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
                    if (TLdeserialize != null) {
                        this.chats.add(TLdeserialize);
                        i += TLRPC.USER_FLAG_ACCESS_HASH;
                    } else {
                        return;
                    }
                }
            } else if (z) {
                Object[] objArr = new Object[TLRPC.USER_FLAG_ACCESS_HASH];
                objArr[0] = Integer.valueOf(readInt32);
                throw new RuntimeException(String.format("wrong Vector magic, got %x", objArr));
            }
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(481674261);
            int size = this.chats.size();
            abstractSerializedData.writeInt32(size);
            for (int i = 0; i < size; i += TLRPC.USER_FLAG_ACCESS_HASH) {
                ((Chat) this.chats.get(i)).serializeToStream(abstractSerializedData);
            }
        }
    }

    public static class TL_messages_checkChatInvite extends TLObject {
        public static int constructor;
        public String hash;

        static {
            constructor = 1051570619;
        }

        public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            return ChatInvite.TLdeserialize(abstractSerializedData, i, z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeString(this.hash);
        }
    }

    public static class TL_messages_clearRecentStickers extends TLObject {
        public static int constructor;
        public boolean attached;
        public int flags;

        static {
            constructor = -1986437075;
        }

        public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            return Bool.TLdeserialize(abstractSerializedData, i, z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.flags = this.attached ? this.flags | TLRPC.USER_FLAG_ACCESS_HASH : this.flags & -2;
            abstractSerializedData.writeInt32(this.flags);
        }
    }

    public static class TL_messages_createChat extends TLObject {
        public static int constructor;
        public String title;
        public ArrayList<InputUser> users;

        static {
            constructor = 164303470;
        }

        public TL_messages_createChat() {
            this.users = new ArrayList();
        }

        public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            return Updates.TLdeserialize(abstractSerializedData, i, z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(481674261);
            int size = this.users.size();
            abstractSerializedData.writeInt32(size);
            for (int i = 0; i < size; i += TLRPC.USER_FLAG_ACCESS_HASH) {
                ((InputUser) this.users.get(i)).serializeToStream(abstractSerializedData);
            }
            abstractSerializedData.writeString(this.title);
        }
    }

    public static class TL_messages_deleteChatUser extends TLObject {
        public static int constructor;
        public int chat_id;
        public InputUser user_id;

        static {
            constructor = -530505962;
        }

        public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            return Updates.TLdeserialize(abstractSerializedData, i, z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.chat_id);
            this.user_id.serializeToStream(abstractSerializedData);
        }
    }

    public static class TL_messages_deleteHistory extends TLObject {
        public static int constructor;
        public int flags;
        public boolean just_clear;
        public int max_id;
        public InputPeer peer;

        static {
            constructor = 469850889;
        }

        public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            return TL_messages_affectedHistory.TLdeserialize(abstractSerializedData, i, z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.flags = this.just_clear ? this.flags | TLRPC.USER_FLAG_ACCESS_HASH : this.flags & -2;
            abstractSerializedData.writeInt32(this.flags);
            this.peer.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeInt32(this.max_id);
        }
    }

    public static class TL_messages_deleteMessages extends TLObject {
        public static int constructor;
        public ArrayList<Integer> id;

        static {
            constructor = -1510897371;
        }

        public TL_messages_deleteMessages() {
            this.id = new ArrayList();
        }

        public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            return TL_messages_affectedMessages.TLdeserialize(abstractSerializedData, i, z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(481674261);
            int size = this.id.size();
            abstractSerializedData.writeInt32(size);
            for (int i = 0; i < size; i += TLRPC.USER_FLAG_ACCESS_HASH) {
                abstractSerializedData.writeInt32(((Integer) this.id.get(i)).intValue());
            }
        }
    }

    public static class messages_DhConfig extends TLObject {
        public int f2670g;
        public byte[] f2671p;
        public byte[] random;
        public int version;

        public static messages_DhConfig TLdeserialize(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            messages_DhConfig com_hanista_mobogram_tgnet_TLRPC_messages_DhConfig = null;
            switch (i) {
                case -1058912715:
                    com_hanista_mobogram_tgnet_TLRPC_messages_DhConfig = new TL_messages_dhConfigNotModified();
                    break;
                case 740433629:
                    com_hanista_mobogram_tgnet_TLRPC_messages_DhConfig = new TL_messages_dhConfig();
                    break;
            }
            if (com_hanista_mobogram_tgnet_TLRPC_messages_DhConfig == null && z) {
                Object[] objArr = new Object[TLRPC.USER_FLAG_ACCESS_HASH];
                objArr[0] = Integer.valueOf(i);
                throw new RuntimeException(String.format("can't parse magic %x in messages_DhConfig", objArr));
            }
            if (com_hanista_mobogram_tgnet_TLRPC_messages_DhConfig != null) {
                com_hanista_mobogram_tgnet_TLRPC_messages_DhConfig.readParams(abstractSerializedData, z);
            }
            return com_hanista_mobogram_tgnet_TLRPC_messages_DhConfig;
        }
    }

    public static class TL_messages_dhConfig extends messages_DhConfig {
        public static int constructor;

        static {
            constructor = 740433629;
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.g = abstractSerializedData.readInt32(z);
            this.p = abstractSerializedData.readByteArray(z);
            this.version = abstractSerializedData.readInt32(z);
            this.random = abstractSerializedData.readByteArray(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.g);
            abstractSerializedData.writeByteArray(this.p);
            abstractSerializedData.writeInt32(this.version);
            abstractSerializedData.writeByteArray(this.random);
        }
    }

    public static class TL_messages_dhConfigNotModified extends messages_DhConfig {
        public static int constructor;

        static {
            constructor = -1058912715;
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.random = abstractSerializedData.readByteArray(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeByteArray(this.random);
        }
    }

    public static class messages_Dialogs extends TLObject {
        public ArrayList<Chat> chats;
        public int count;
        public ArrayList<TL_dialog> dialogs;
        public ArrayList<Message> messages;
        public ArrayList<User> users;

        public messages_Dialogs() {
            this.dialogs = new ArrayList();
            this.messages = new ArrayList();
            this.chats = new ArrayList();
            this.users = new ArrayList();
        }

        public static messages_Dialogs TLdeserialize(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            messages_Dialogs com_hanista_mobogram_tgnet_TLRPC_messages_Dialogs = null;
            switch (i) {
                case 364538944:
                    com_hanista_mobogram_tgnet_TLRPC_messages_Dialogs = new TL_messages_dialogs();
                    break;
                case 1910543603:
                    com_hanista_mobogram_tgnet_TLRPC_messages_Dialogs = new TL_messages_dialogsSlice();
                    break;
            }
            if (com_hanista_mobogram_tgnet_TLRPC_messages_Dialogs == null && z) {
                Object[] objArr = new Object[TLRPC.USER_FLAG_ACCESS_HASH];
                objArr[0] = Integer.valueOf(i);
                throw new RuntimeException(String.format("can't parse magic %x in messages_Dialogs", objArr));
            }
            if (com_hanista_mobogram_tgnet_TLRPC_messages_Dialogs != null) {
                com_hanista_mobogram_tgnet_TLRPC_messages_Dialogs.readParams(abstractSerializedData, z);
            }
            return com_hanista_mobogram_tgnet_TLRPC_messages_Dialogs;
        }
    }

    public static class TL_messages_dialogs extends messages_Dialogs {
        public static int constructor;

        static {
            constructor = 364538944;
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            int i = 0;
            int readInt32 = abstractSerializedData.readInt32(z);
            Object[] objArr;
            if (readInt32 == 481674261) {
                int readInt322 = abstractSerializedData.readInt32(z);
                readInt32 = 0;
                while (readInt32 < readInt322) {
                    TL_dialog TLdeserialize = TL_dialog.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
                    if (TLdeserialize != null) {
                        this.dialogs.add(TLdeserialize);
                        readInt32 += TLRPC.USER_FLAG_ACCESS_HASH;
                    } else {
                        return;
                    }
                }
                readInt32 = abstractSerializedData.readInt32(z);
                if (readInt32 == 481674261) {
                    readInt322 = abstractSerializedData.readInt32(z);
                    readInt32 = 0;
                    while (readInt32 < readInt322) {
                        Message TLdeserialize2 = Message.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
                        if (TLdeserialize2 != null) {
                            this.messages.add(TLdeserialize2);
                            readInt32 += TLRPC.USER_FLAG_ACCESS_HASH;
                        } else {
                            return;
                        }
                    }
                    readInt32 = abstractSerializedData.readInt32(z);
                    if (readInt32 == 481674261) {
                        readInt322 = abstractSerializedData.readInt32(z);
                        readInt32 = 0;
                        while (readInt32 < readInt322) {
                            Chat TLdeserialize3 = Chat.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
                            if (TLdeserialize3 != null) {
                                this.chats.add(TLdeserialize3);
                                readInt32 += TLRPC.USER_FLAG_ACCESS_HASH;
                            } else {
                                return;
                            }
                        }
                        readInt32 = abstractSerializedData.readInt32(z);
                        if (readInt32 == 481674261) {
                            readInt32 = abstractSerializedData.readInt32(z);
                            while (i < readInt32) {
                                User TLdeserialize4 = User.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
                                if (TLdeserialize4 != null) {
                                    this.users.add(TLdeserialize4);
                                    i += TLRPC.USER_FLAG_ACCESS_HASH;
                                } else {
                                    return;
                                }
                            }
                        } else if (z) {
                            objArr = new Object[TLRPC.USER_FLAG_ACCESS_HASH];
                            objArr[0] = Integer.valueOf(readInt32);
                            throw new RuntimeException(String.format("wrong Vector magic, got %x", objArr));
                        }
                    } else if (z) {
                        objArr = new Object[TLRPC.USER_FLAG_ACCESS_HASH];
                        objArr[0] = Integer.valueOf(readInt32);
                        throw new RuntimeException(String.format("wrong Vector magic, got %x", objArr));
                    }
                } else if (z) {
                    objArr = new Object[TLRPC.USER_FLAG_ACCESS_HASH];
                    objArr[0] = Integer.valueOf(readInt32);
                    throw new RuntimeException(String.format("wrong Vector magic, got %x", objArr));
                }
            } else if (z) {
                objArr = new Object[TLRPC.USER_FLAG_ACCESS_HASH];
                objArr[0] = Integer.valueOf(readInt32);
                throw new RuntimeException(String.format("wrong Vector magic, got %x", objArr));
            }
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            int i;
            int i2 = 0;
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(481674261);
            int size = this.dialogs.size();
            abstractSerializedData.writeInt32(size);
            for (i = 0; i < size; i += TLRPC.USER_FLAG_ACCESS_HASH) {
                ((TL_dialog) this.dialogs.get(i)).serializeToStream(abstractSerializedData);
            }
            abstractSerializedData.writeInt32(481674261);
            size = this.messages.size();
            abstractSerializedData.writeInt32(size);
            for (i = 0; i < size; i += TLRPC.USER_FLAG_ACCESS_HASH) {
                ((Message) this.messages.get(i)).serializeToStream(abstractSerializedData);
            }
            abstractSerializedData.writeInt32(481674261);
            size = this.chats.size();
            abstractSerializedData.writeInt32(size);
            for (i = 0; i < size; i += TLRPC.USER_FLAG_ACCESS_HASH) {
                ((Chat) this.chats.get(i)).serializeToStream(abstractSerializedData);
            }
            abstractSerializedData.writeInt32(481674261);
            i = this.users.size();
            abstractSerializedData.writeInt32(i);
            while (i2 < i) {
                ((User) this.users.get(i2)).serializeToStream(abstractSerializedData);
                i2 += TLRPC.USER_FLAG_ACCESS_HASH;
            }
        }
    }

    public static class TL_messages_dialogsSlice extends messages_Dialogs {
        public static int constructor;

        static {
            constructor = 1910543603;
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            int i = 0;
            this.count = abstractSerializedData.readInt32(z);
            int readInt32 = abstractSerializedData.readInt32(z);
            Object[] objArr;
            if (readInt32 == 481674261) {
                int readInt322 = abstractSerializedData.readInt32(z);
                readInt32 = 0;
                while (readInt32 < readInt322) {
                    TL_dialog TLdeserialize = TL_dialog.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
                    if (TLdeserialize != null) {
                        this.dialogs.add(TLdeserialize);
                        readInt32 += TLRPC.USER_FLAG_ACCESS_HASH;
                    } else {
                        return;
                    }
                }
                readInt32 = abstractSerializedData.readInt32(z);
                if (readInt32 == 481674261) {
                    readInt322 = abstractSerializedData.readInt32(z);
                    readInt32 = 0;
                    while (readInt32 < readInt322) {
                        Message TLdeserialize2 = Message.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
                        if (TLdeserialize2 != null) {
                            this.messages.add(TLdeserialize2);
                            readInt32 += TLRPC.USER_FLAG_ACCESS_HASH;
                        } else {
                            return;
                        }
                    }
                    readInt32 = abstractSerializedData.readInt32(z);
                    if (readInt32 == 481674261) {
                        readInt322 = abstractSerializedData.readInt32(z);
                        readInt32 = 0;
                        while (readInt32 < readInt322) {
                            Chat TLdeserialize3 = Chat.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
                            if (TLdeserialize3 != null) {
                                this.chats.add(TLdeserialize3);
                                readInt32 += TLRPC.USER_FLAG_ACCESS_HASH;
                            } else {
                                return;
                            }
                        }
                        readInt32 = abstractSerializedData.readInt32(z);
                        if (readInt32 == 481674261) {
                            readInt32 = abstractSerializedData.readInt32(z);
                            while (i < readInt32) {
                                User TLdeserialize4 = User.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
                                if (TLdeserialize4 != null) {
                                    this.users.add(TLdeserialize4);
                                    i += TLRPC.USER_FLAG_ACCESS_HASH;
                                } else {
                                    return;
                                }
                            }
                        } else if (z) {
                            objArr = new Object[TLRPC.USER_FLAG_ACCESS_HASH];
                            objArr[0] = Integer.valueOf(readInt32);
                            throw new RuntimeException(String.format("wrong Vector magic, got %x", objArr));
                        }
                    } else if (z) {
                        objArr = new Object[TLRPC.USER_FLAG_ACCESS_HASH];
                        objArr[0] = Integer.valueOf(readInt32);
                        throw new RuntimeException(String.format("wrong Vector magic, got %x", objArr));
                    }
                } else if (z) {
                    objArr = new Object[TLRPC.USER_FLAG_ACCESS_HASH];
                    objArr[0] = Integer.valueOf(readInt32);
                    throw new RuntimeException(String.format("wrong Vector magic, got %x", objArr));
                }
            } else if (z) {
                objArr = new Object[TLRPC.USER_FLAG_ACCESS_HASH];
                objArr[0] = Integer.valueOf(readInt32);
                throw new RuntimeException(String.format("wrong Vector magic, got %x", objArr));
            }
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            int i;
            int i2 = 0;
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.count);
            abstractSerializedData.writeInt32(481674261);
            int size = this.dialogs.size();
            abstractSerializedData.writeInt32(size);
            for (i = 0; i < size; i += TLRPC.USER_FLAG_ACCESS_HASH) {
                ((TL_dialog) this.dialogs.get(i)).serializeToStream(abstractSerializedData);
            }
            abstractSerializedData.writeInt32(481674261);
            size = this.messages.size();
            abstractSerializedData.writeInt32(size);
            for (i = 0; i < size; i += TLRPC.USER_FLAG_ACCESS_HASH) {
                ((Message) this.messages.get(i)).serializeToStream(abstractSerializedData);
            }
            abstractSerializedData.writeInt32(481674261);
            size = this.chats.size();
            abstractSerializedData.writeInt32(size);
            for (i = 0; i < size; i += TLRPC.USER_FLAG_ACCESS_HASH) {
                ((Chat) this.chats.get(i)).serializeToStream(abstractSerializedData);
            }
            abstractSerializedData.writeInt32(481674261);
            i = this.users.size();
            abstractSerializedData.writeInt32(i);
            while (i2 < i) {
                ((User) this.users.get(i2)).serializeToStream(abstractSerializedData);
                i2 += TLRPC.USER_FLAG_ACCESS_HASH;
            }
        }
    }

    public static class TL_messages_discardEncryption extends TLObject {
        public static int constructor;
        public int chat_id;

        static {
            constructor = -304536635;
        }

        public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            return Bool.TLdeserialize(abstractSerializedData, i, z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.chat_id);
        }
    }

    public static class TL_messages_editChatAdmin extends TLObject {
        public static int constructor;
        public int chat_id;
        public boolean is_admin;
        public InputUser user_id;

        static {
            constructor = -1444503762;
        }

        public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            return Bool.TLdeserialize(abstractSerializedData, i, z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.chat_id);
            this.user_id.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeBool(this.is_admin);
        }
    }

    public static class TL_messages_editChatPhoto extends TLObject {
        public static int constructor;
        public int chat_id;
        public InputChatPhoto photo;

        static {
            constructor = -900957736;
        }

        public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            return Updates.TLdeserialize(abstractSerializedData, i, z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.chat_id);
            this.photo.serializeToStream(abstractSerializedData);
        }
    }

    public static class TL_messages_editChatTitle extends TLObject {
        public static int constructor;
        public int chat_id;
        public String title;

        static {
            constructor = -599447467;
        }

        public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            return Updates.TLdeserialize(abstractSerializedData, i, z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.chat_id);
            abstractSerializedData.writeString(this.title);
        }
    }

    public static class TL_messages_editInlineBotMessage extends TLObject {
        public static int constructor;
        public ArrayList<MessageEntity> entities;
        public int flags;
        public TL_inputBotInlineMessageID id;
        public String message;
        public boolean no_webpage;
        public ReplyMarkup reply_markup;

        static {
            constructor = 319564933;
        }

        public TL_messages_editInlineBotMessage() {
            this.entities = new ArrayList();
        }

        public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            return Bool.TLdeserialize(abstractSerializedData, i, z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.flags = this.no_webpage ? this.flags | TLRPC.USER_FLAG_FIRST_NAME : this.flags & -3;
            abstractSerializedData.writeInt32(this.flags);
            this.id.serializeToStream(abstractSerializedData);
            if ((this.flags & TLRPC.MESSAGE_FLAG_HAS_BOT_ID) != 0) {
                abstractSerializedData.writeString(this.message);
            }
            if ((this.flags & TLRPC.USER_FLAG_LAST_NAME) != 0) {
                this.reply_markup.serializeToStream(abstractSerializedData);
            }
            if ((this.flags & TLRPC.USER_FLAG_USERNAME) != 0) {
                abstractSerializedData.writeInt32(481674261);
                int size = this.entities.size();
                abstractSerializedData.writeInt32(size);
                for (int i = 0; i < size; i += TLRPC.USER_FLAG_ACCESS_HASH) {
                    ((MessageEntity) this.entities.get(i)).serializeToStream(abstractSerializedData);
                }
            }
        }
    }

    public static class TL_messages_editMessage extends TLObject {
        public static int constructor;
        public ArrayList<MessageEntity> entities;
        public int flags;
        public int id;
        public String message;
        public boolean no_webpage;
        public InputPeer peer;
        public ReplyMarkup reply_markup;

        static {
            constructor = -829299510;
        }

        public TL_messages_editMessage() {
            this.entities = new ArrayList();
        }

        public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            return Updates.TLdeserialize(abstractSerializedData, i, z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.flags = this.no_webpage ? this.flags | TLRPC.USER_FLAG_FIRST_NAME : this.flags & -3;
            abstractSerializedData.writeInt32(this.flags);
            this.peer.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeInt32(this.id);
            if ((this.flags & TLRPC.MESSAGE_FLAG_HAS_BOT_ID) != 0) {
                abstractSerializedData.writeString(this.message);
            }
            if ((this.flags & TLRPC.USER_FLAG_LAST_NAME) != 0) {
                this.reply_markup.serializeToStream(abstractSerializedData);
            }
            if ((this.flags & TLRPC.USER_FLAG_USERNAME) != 0) {
                abstractSerializedData.writeInt32(481674261);
                int size = this.entities.size();
                abstractSerializedData.writeInt32(size);
                for (int i = 0; i < size; i += TLRPC.USER_FLAG_ACCESS_HASH) {
                    ((MessageEntity) this.entities.get(i)).serializeToStream(abstractSerializedData);
                }
            }
        }
    }

    public static class TL_messages_exportChatInvite extends TLObject {
        public static int constructor;
        public int chat_id;

        static {
            constructor = 2106086025;
        }

        public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            return ExportedChatInvite.TLdeserialize(abstractSerializedData, i, z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.chat_id);
        }
    }

    public static class messages_FeaturedStickers extends TLObject {
        public int hash;
        public ArrayList<StickerSetCovered> sets;
        public ArrayList<Long> unread;

        public messages_FeaturedStickers() {
            this.sets = new ArrayList();
            this.unread = new ArrayList();
        }

        public static messages_FeaturedStickers TLdeserialize(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            messages_FeaturedStickers com_hanista_mobogram_tgnet_TLRPC_messages_FeaturedStickers = null;
            switch (i) {
                case -123893531:
                    com_hanista_mobogram_tgnet_TLRPC_messages_FeaturedStickers = new TL_messages_featuredStickers();
                    break;
                case 82699215:
                    com_hanista_mobogram_tgnet_TLRPC_messages_FeaturedStickers = new TL_messages_featuredStickersNotModified();
                    break;
            }
            if (com_hanista_mobogram_tgnet_TLRPC_messages_FeaturedStickers == null && z) {
                Object[] objArr = new Object[TLRPC.USER_FLAG_ACCESS_HASH];
                objArr[0] = Integer.valueOf(i);
                throw new RuntimeException(String.format("can't parse magic %x in messages_FeaturedStickers", objArr));
            }
            if (com_hanista_mobogram_tgnet_TLRPC_messages_FeaturedStickers != null) {
                com_hanista_mobogram_tgnet_TLRPC_messages_FeaturedStickers.readParams(abstractSerializedData, z);
            }
            return com_hanista_mobogram_tgnet_TLRPC_messages_FeaturedStickers;
        }
    }

    public static class TL_messages_featuredStickers extends messages_FeaturedStickers {
        public static int constructor;

        static {
            constructor = -123893531;
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            int i = 0;
            this.hash = abstractSerializedData.readInt32(z);
            int readInt32 = abstractSerializedData.readInt32(z);
            Object[] objArr;
            if (readInt32 == 481674261) {
                int readInt322 = abstractSerializedData.readInt32(z);
                readInt32 = 0;
                while (readInt32 < readInt322) {
                    StickerSetCovered TLdeserialize = StickerSetCovered.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
                    if (TLdeserialize != null) {
                        this.sets.add(TLdeserialize);
                        readInt32 += TLRPC.USER_FLAG_ACCESS_HASH;
                    } else {
                        return;
                    }
                }
                readInt32 = abstractSerializedData.readInt32(z);
                if (readInt32 == 481674261) {
                    readInt32 = abstractSerializedData.readInt32(z);
                    while (i < readInt32) {
                        this.unread.add(Long.valueOf(abstractSerializedData.readInt64(z)));
                        i += TLRPC.USER_FLAG_ACCESS_HASH;
                    }
                } else if (z) {
                    objArr = new Object[TLRPC.USER_FLAG_ACCESS_HASH];
                    objArr[0] = Integer.valueOf(readInt32);
                    throw new RuntimeException(String.format("wrong Vector magic, got %x", objArr));
                }
            } else if (z) {
                objArr = new Object[TLRPC.USER_FLAG_ACCESS_HASH];
                objArr[0] = Integer.valueOf(readInt32);
                throw new RuntimeException(String.format("wrong Vector magic, got %x", objArr));
            }
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            int i;
            int i2 = 0;
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.hash);
            abstractSerializedData.writeInt32(481674261);
            int size = this.sets.size();
            abstractSerializedData.writeInt32(size);
            for (i = 0; i < size; i += TLRPC.USER_FLAG_ACCESS_HASH) {
                ((StickerSetCovered) this.sets.get(i)).serializeToStream(abstractSerializedData);
            }
            abstractSerializedData.writeInt32(481674261);
            i = this.unread.size();
            abstractSerializedData.writeInt32(i);
            while (i2 < i) {
                abstractSerializedData.writeInt64(((Long) this.unread.get(i2)).longValue());
                i2 += TLRPC.USER_FLAG_ACCESS_HASH;
            }
        }
    }

    public static class TL_messages_featuredStickersNotModified extends messages_FeaturedStickers {
        public static int constructor;

        static {
            constructor = 82699215;
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
        }
    }

    public static class TL_messages_forwardMessage extends TLObject {
        public static int constructor;
        public int id;
        public InputPeer peer;
        public long random_id;

        static {
            constructor = 865483769;
        }

        public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            return Updates.TLdeserialize(abstractSerializedData, i, z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.peer.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeInt32(this.id);
            abstractSerializedData.writeInt64(this.random_id);
        }
    }

    public static class TL_messages_forwardMessages extends TLObject {
        public static int constructor;
        public boolean background;
        public int flags;
        public InputPeer from_peer;
        public ArrayList<Integer> id;
        public ArrayList<Long> random_id;
        public boolean silent;
        public InputPeer to_peer;
        public boolean with_my_score;

        static {
            constructor = 1888354709;
        }

        public TL_messages_forwardMessages() {
            this.id = new ArrayList();
            this.random_id = new ArrayList();
        }

        public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            return Updates.TLdeserialize(abstractSerializedData, i, z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            int i;
            int i2 = 0;
            abstractSerializedData.writeInt32(constructor);
            this.flags = this.silent ? this.flags | TLRPC.USER_FLAG_PHOTO : this.flags & -33;
            this.flags = this.background ? this.flags | TLRPC.USER_FLAG_STATUS : this.flags & -65;
            this.flags = this.with_my_score ? this.flags | TLRPC.USER_FLAG_UNUSED2 : this.flags & -257;
            abstractSerializedData.writeInt32(this.flags);
            this.from_peer.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeInt32(481674261);
            int size = this.id.size();
            abstractSerializedData.writeInt32(size);
            for (i = 0; i < size; i += TLRPC.USER_FLAG_ACCESS_HASH) {
                abstractSerializedData.writeInt32(((Integer) this.id.get(i)).intValue());
            }
            abstractSerializedData.writeInt32(481674261);
            i = this.random_id.size();
            abstractSerializedData.writeInt32(i);
            while (i2 < i) {
                abstractSerializedData.writeInt64(((Long) this.random_id.get(i2)).longValue());
                i2 += TLRPC.USER_FLAG_ACCESS_HASH;
            }
            this.to_peer.serializeToStream(abstractSerializedData);
        }
    }

    public static class TL_messages_foundGifs extends TLObject {
        public static int constructor;
        public int next_offset;
        public ArrayList<FoundGif> results;

        static {
            constructor = 1158290442;
        }

        public TL_messages_foundGifs() {
            this.results = new ArrayList();
        }

        public static TL_messages_foundGifs TLdeserialize(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            if (constructor == i) {
                TL_messages_foundGifs tL_messages_foundGifs = new TL_messages_foundGifs();
                tL_messages_foundGifs.readParams(abstractSerializedData, z);
                return tL_messages_foundGifs;
            } else if (!z) {
                return null;
            } else {
                Object[] objArr = new Object[TLRPC.USER_FLAG_ACCESS_HASH];
                objArr[0] = Integer.valueOf(i);
                throw new RuntimeException(String.format("can't parse magic %x in TL_messages_foundGifs", objArr));
            }
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            int i = 0;
            this.next_offset = abstractSerializedData.readInt32(z);
            int readInt32 = abstractSerializedData.readInt32(z);
            if (readInt32 == 481674261) {
                readInt32 = abstractSerializedData.readInt32(z);
                while (i < readInt32) {
                    FoundGif TLdeserialize = FoundGif.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
                    if (TLdeserialize != null) {
                        this.results.add(TLdeserialize);
                        i += TLRPC.USER_FLAG_ACCESS_HASH;
                    } else {
                        return;
                    }
                }
            } else if (z) {
                Object[] objArr = new Object[TLRPC.USER_FLAG_ACCESS_HASH];
                objArr[0] = Integer.valueOf(readInt32);
                throw new RuntimeException(String.format("wrong Vector magic, got %x", objArr));
            }
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.next_offset);
            abstractSerializedData.writeInt32(481674261);
            int size = this.results.size();
            abstractSerializedData.writeInt32(size);
            for (int i = 0; i < size; i += TLRPC.USER_FLAG_ACCESS_HASH) {
                ((FoundGif) this.results.get(i)).serializeToStream(abstractSerializedData);
            }
        }
    }

    public static class TL_messages_getAllDrafts extends TLObject {
        public static int constructor;

        static {
            constructor = 1782549861;
        }

        public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            return Updates.TLdeserialize(abstractSerializedData, i, z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
        }
    }

    public static class TL_messages_getAllStickers extends TLObject {
        public static int constructor;
        public int hash;

        static {
            constructor = 479598769;
        }

        public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            return messages_AllStickers.TLdeserialize(abstractSerializedData, i, z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.hash);
        }
    }

    public static class TL_messages_getArchivedStickers extends TLObject {
        public static int constructor;
        public int flags;
        public int limit;
        public boolean masks;
        public long offset_id;

        static {
            constructor = 1475442322;
        }

        public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            return TL_messages_archivedStickers.TLdeserialize(abstractSerializedData, i, z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.flags = this.masks ? this.flags | TLRPC.USER_FLAG_ACCESS_HASH : this.flags & -2;
            abstractSerializedData.writeInt32(this.flags);
            abstractSerializedData.writeInt64(this.offset_id);
            abstractSerializedData.writeInt32(this.limit);
        }
    }

    public static class TL_messages_getAttachedStickers extends TLObject {
        public static int constructor;
        public InputStickeredMedia media;

        static {
            constructor = -866424884;
        }

        public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            TLObject vector = new Vector();
            int readInt32 = abstractSerializedData.readInt32(z);
            for (int i2 = 0; i2 < readInt32; i2 += TLRPC.USER_FLAG_ACCESS_HASH) {
                StickerSetCovered TLdeserialize = StickerSetCovered.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
                if (TLdeserialize == null) {
                    break;
                }
                vector.objects.add(TLdeserialize);
            }
            return vector;
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.media.serializeToStream(abstractSerializedData);
        }
    }

    public static class TL_messages_getBotCallbackAnswer extends TLObject {
        public static int constructor;
        public byte[] data;
        public int flags;
        public boolean game;
        public int msg_id;
        public InputPeer peer;

        static {
            constructor = -2130010132;
        }

        public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            return TL_messages_botCallbackAnswer.TLdeserialize(abstractSerializedData, i, z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.flags = this.game ? this.flags | TLRPC.USER_FLAG_FIRST_NAME : this.flags & -3;
            abstractSerializedData.writeInt32(this.flags);
            this.peer.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeInt32(this.msg_id);
            if ((this.flags & TLRPC.USER_FLAG_ACCESS_HASH) != 0) {
                abstractSerializedData.writeByteArray(this.data);
            }
        }
    }

    public static class TL_messages_getChats extends TLObject {
        public static int constructor;
        public ArrayList<Integer> id;

        static {
            constructor = 1013621127;
        }

        public TL_messages_getChats() {
            this.id = new ArrayList();
        }

        public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            return TL_messages_chats.TLdeserialize(abstractSerializedData, i, z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(481674261);
            int size = this.id.size();
            abstractSerializedData.writeInt32(size);
            for (int i = 0; i < size; i += TLRPC.USER_FLAG_ACCESS_HASH) {
                abstractSerializedData.writeInt32(((Integer) this.id.get(i)).intValue());
            }
        }
    }

    public static class TL_messages_getDhConfig extends TLObject {
        public static int constructor;
        public int random_length;
        public int version;

        static {
            constructor = 651135312;
        }

        public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            return messages_DhConfig.TLdeserialize(abstractSerializedData, i, z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.version);
            abstractSerializedData.writeInt32(this.random_length);
        }
    }

    public static class TL_messages_getDialogs extends TLObject {
        public static int constructor;
        public int limit;
        public int offset_date;
        public int offset_id;
        public InputPeer offset_peer;

        static {
            constructor = 1799878989;
        }

        public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            return messages_Dialogs.TLdeserialize(abstractSerializedData, i, z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.offset_date);
            abstractSerializedData.writeInt32(this.offset_id);
            this.offset_peer.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeInt32(this.limit);
        }
    }

    public static class TL_messages_getDocumentByHash extends TLObject {
        public static int constructor;
        public String mime_type;
        public byte[] sha256;
        public int size;

        static {
            constructor = 864953444;
        }

        public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            return Document.TLdeserialize(abstractSerializedData, i, z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeByteArray(this.sha256);
            abstractSerializedData.writeInt32(this.size);
            abstractSerializedData.writeString(this.mime_type);
        }
    }

    public static class TL_messages_getFeaturedStickers extends TLObject {
        public static int constructor;
        public int hash;

        static {
            constructor = 766298703;
        }

        public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            return messages_FeaturedStickers.TLdeserialize(abstractSerializedData, i, z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.hash);
        }
    }

    public static class TL_messages_getFullChat extends TLObject {
        public static int constructor;
        public int chat_id;

        static {
            constructor = 998448230;
        }

        public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            return TL_messages_chatFull.TLdeserialize(abstractSerializedData, i, z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.chat_id);
        }
    }

    public static class TL_messages_getGameHighScores extends TLObject {
        public static int constructor;
        public int id;
        public InputPeer peer;
        public InputUser user_id;

        static {
            constructor = -400399203;
        }

        public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            return TL_messages_highScores.TLdeserialize(abstractSerializedData, i, z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.peer.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeInt32(this.id);
            this.user_id.serializeToStream(abstractSerializedData);
        }
    }

    public static class TL_messages_getHistory extends TLObject {
        public static int constructor;
        public int add_offset;
        public int limit;
        public int max_id;
        public int min_id;
        public int offset_date;
        public int offset_id;
        public InputPeer peer;

        static {
            constructor = -1347868602;
        }

        public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            return messages_Messages.TLdeserialize(abstractSerializedData, i, z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.peer.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeInt32(this.offset_id);
            abstractSerializedData.writeInt32(this.offset_date);
            abstractSerializedData.writeInt32(this.add_offset);
            abstractSerializedData.writeInt32(this.limit);
            abstractSerializedData.writeInt32(this.max_id);
            abstractSerializedData.writeInt32(this.min_id);
        }
    }

    public static class TL_messages_getInlineBotResults extends TLObject {
        public static int constructor;
        public InputUser bot;
        public int flags;
        public InputGeoPoint geo_point;
        public String offset;
        public InputPeer peer;
        public String query;

        static {
            constructor = 1364105629;
        }

        public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            return TL_messages_botResults.TLdeserialize(abstractSerializedData, i, z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.flags);
            this.bot.serializeToStream(abstractSerializedData);
            this.peer.serializeToStream(abstractSerializedData);
            if ((this.flags & TLRPC.USER_FLAG_ACCESS_HASH) != 0) {
                this.geo_point.serializeToStream(abstractSerializedData);
            }
            abstractSerializedData.writeString(this.query);
            abstractSerializedData.writeString(this.offset);
        }
    }

    public static class TL_messages_getInlineGameHighScores extends TLObject {
        public static int constructor;
        public TL_inputBotInlineMessageID id;
        public InputUser user_id;

        static {
            constructor = 258170395;
        }

        public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            return TL_messages_highScores.TLdeserialize(abstractSerializedData, i, z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.id.serializeToStream(abstractSerializedData);
            this.user_id.serializeToStream(abstractSerializedData);
        }
    }

    public static class TL_messages_getMaskStickers extends TLObject {
        public static int constructor;
        public int hash;

        static {
            constructor = 1706608543;
        }

        public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            return messages_AllStickers.TLdeserialize(abstractSerializedData, i, z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.hash);
        }
    }

    public static class TL_messages_getMessageEditData extends TLObject {
        public static int constructor;
        public int id;
        public InputPeer peer;

        static {
            constructor = -39416522;
        }

        public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            return TL_messages_messageEditData.TLdeserialize(abstractSerializedData, i, z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.peer.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeInt32(this.id);
        }
    }

    public static class TL_messages_getMessages extends TLObject {
        public static int constructor;
        public ArrayList<Integer> id;

        static {
            constructor = 1109588596;
        }

        public TL_messages_getMessages() {
            this.id = new ArrayList();
        }

        public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            return messages_Messages.TLdeserialize(abstractSerializedData, i, z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(481674261);
            int size = this.id.size();
            abstractSerializedData.writeInt32(size);
            for (int i = 0; i < size; i += TLRPC.USER_FLAG_ACCESS_HASH) {
                abstractSerializedData.writeInt32(((Integer) this.id.get(i)).intValue());
            }
        }
    }

    public static class TL_messages_getMessagesViews extends TLObject {
        public static int constructor;
        public ArrayList<Integer> id;
        public boolean increment;
        public InputPeer peer;

        static {
            constructor = -993483427;
        }

        public TL_messages_getMessagesViews() {
            this.id = new ArrayList();
        }

        public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            TLObject vector = new Vector();
            int readInt32 = abstractSerializedData.readInt32(z);
            for (int i2 = 0; i2 < readInt32; i2 += TLRPC.USER_FLAG_ACCESS_HASH) {
                vector.objects.add(Integer.valueOf(abstractSerializedData.readInt32(z)));
            }
            return vector;
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.peer.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeInt32(481674261);
            int size = this.id.size();
            abstractSerializedData.writeInt32(size);
            for (int i = 0; i < size; i += TLRPC.USER_FLAG_ACCESS_HASH) {
                abstractSerializedData.writeInt32(((Integer) this.id.get(i)).intValue());
            }
            abstractSerializedData.writeBool(this.increment);
        }
    }

    public static class TL_messages_getPeerDialogs extends TLObject {
        public static int constructor;
        public ArrayList<InputPeer> peers;

        static {
            constructor = 764901049;
        }

        public TL_messages_getPeerDialogs() {
            this.peers = new ArrayList();
        }

        public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            return TL_messages_peerDialogs.TLdeserialize(abstractSerializedData, i, z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(481674261);
            int size = this.peers.size();
            abstractSerializedData.writeInt32(size);
            for (int i = 0; i < size; i += TLRPC.USER_FLAG_ACCESS_HASH) {
                ((InputPeer) this.peers.get(i)).serializeToStream(abstractSerializedData);
            }
        }
    }

    public static class TL_messages_getPeerSettings extends TLObject {
        public static int constructor;
        public InputPeer peer;

        static {
            constructor = 913498268;
        }

        public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            return TL_peerSettings.TLdeserialize(abstractSerializedData, i, z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.peer.serializeToStream(abstractSerializedData);
        }
    }

    public static class TL_messages_getRecentStickers extends TLObject {
        public static int constructor;
        public boolean attached;
        public int flags;
        public int hash;

        static {
            constructor = 1587647177;
        }

        public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            return messages_RecentStickers.TLdeserialize(abstractSerializedData, i, z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.flags = this.attached ? this.flags | TLRPC.USER_FLAG_ACCESS_HASH : this.flags & -2;
            abstractSerializedData.writeInt32(this.flags);
            abstractSerializedData.writeInt32(this.hash);
        }
    }

    public static class TL_messages_getSavedGifs extends TLObject {
        public static int constructor;
        public int hash;

        static {
            constructor = -2084618926;
        }

        public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            return messages_SavedGifs.TLdeserialize(abstractSerializedData, i, z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.hash);
        }
    }

    public static class TL_messages_getStickerSet extends TLObject {
        public static int constructor;
        public InputStickerSet stickerset;

        static {
            constructor = 639215886;
        }

        public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            return TL_messages_stickerSet.TLdeserialize(abstractSerializedData, i, z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.stickerset.serializeToStream(abstractSerializedData);
        }
    }

    public static class TL_messages_getWebPagePreview extends TLObject {
        public static int constructor;
        public String message;

        static {
            constructor = 623001124;
        }

        public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            return MessageMedia.TLdeserialize(abstractSerializedData, i, z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeString(this.message);
        }
    }

    public static class TL_messages_hideReportSpam extends TLObject {
        public static int constructor;
        public InputPeer peer;

        static {
            constructor = -1460572005;
        }

        public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            return Bool.TLdeserialize(abstractSerializedData, i, z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.peer.serializeToStream(abstractSerializedData);
        }
    }

    public static class TL_messages_highScores extends TLObject {
        public static int constructor;
        public ArrayList<TL_highScore> scores;
        public ArrayList<User> users;

        static {
            constructor = -1707344487;
        }

        public TL_messages_highScores() {
            this.scores = new ArrayList();
            this.users = new ArrayList();
        }

        public static TL_messages_highScores TLdeserialize(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            if (constructor == i) {
                TL_messages_highScores tL_messages_highScores = new TL_messages_highScores();
                tL_messages_highScores.readParams(abstractSerializedData, z);
                return tL_messages_highScores;
            } else if (!z) {
                return null;
            } else {
                Object[] objArr = new Object[TLRPC.USER_FLAG_ACCESS_HASH];
                objArr[0] = Integer.valueOf(i);
                throw new RuntimeException(String.format("can't parse magic %x in TL_messages_highScores", objArr));
            }
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            int i = 0;
            int readInt32 = abstractSerializedData.readInt32(z);
            Object[] objArr;
            if (readInt32 == 481674261) {
                int readInt322 = abstractSerializedData.readInt32(z);
                readInt32 = 0;
                while (readInt32 < readInt322) {
                    TL_highScore TLdeserialize = TL_highScore.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
                    if (TLdeserialize != null) {
                        this.scores.add(TLdeserialize);
                        readInt32 += TLRPC.USER_FLAG_ACCESS_HASH;
                    } else {
                        return;
                    }
                }
                readInt32 = abstractSerializedData.readInt32(z);
                if (readInt32 == 481674261) {
                    readInt32 = abstractSerializedData.readInt32(z);
                    while (i < readInt32) {
                        User TLdeserialize2 = User.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
                        if (TLdeserialize2 != null) {
                            this.users.add(TLdeserialize2);
                            i += TLRPC.USER_FLAG_ACCESS_HASH;
                        } else {
                            return;
                        }
                    }
                } else if (z) {
                    objArr = new Object[TLRPC.USER_FLAG_ACCESS_HASH];
                    objArr[0] = Integer.valueOf(readInt32);
                    throw new RuntimeException(String.format("wrong Vector magic, got %x", objArr));
                }
            } else if (z) {
                objArr = new Object[TLRPC.USER_FLAG_ACCESS_HASH];
                objArr[0] = Integer.valueOf(readInt32);
                throw new RuntimeException(String.format("wrong Vector magic, got %x", objArr));
            }
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            int i;
            int i2 = 0;
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(481674261);
            int size = this.scores.size();
            abstractSerializedData.writeInt32(size);
            for (i = 0; i < size; i += TLRPC.USER_FLAG_ACCESS_HASH) {
                ((TL_highScore) this.scores.get(i)).serializeToStream(abstractSerializedData);
            }
            abstractSerializedData.writeInt32(481674261);
            i = this.users.size();
            abstractSerializedData.writeInt32(i);
            while (i2 < i) {
                ((User) this.users.get(i2)).serializeToStream(abstractSerializedData);
                i2 += TLRPC.USER_FLAG_ACCESS_HASH;
            }
        }
    }

    public static class TL_messages_importChatInvite extends TLObject {
        public static int constructor;
        public String hash;

        static {
            constructor = 1817183516;
        }

        public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            return Updates.TLdeserialize(abstractSerializedData, i, z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeString(this.hash);
        }
    }

    public static class TL_messages_installStickerSet extends TLObject {
        public static int constructor;
        public boolean archived;
        public InputStickerSet stickerset;

        static {
            constructor = -946871200;
        }

        public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            return messages_StickerSetInstallResult.TLdeserialize(abstractSerializedData, i, z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.stickerset.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeBool(this.archived);
        }
    }

    public static class TL_messages_messageEditData extends TLObject {
        public static int constructor;
        public boolean caption;
        public int flags;

        static {
            constructor = 649453030;
        }

        public static TL_messages_messageEditData TLdeserialize(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            if (constructor == i) {
                TL_messages_messageEditData tL_messages_messageEditData = new TL_messages_messageEditData();
                tL_messages_messageEditData.readParams(abstractSerializedData, z);
                return tL_messages_messageEditData;
            } else if (!z) {
                return null;
            } else {
                Object[] objArr = new Object[TLRPC.USER_FLAG_ACCESS_HASH];
                objArr[0] = Integer.valueOf(i);
                throw new RuntimeException(String.format("can't parse magic %x in TL_messages_messageEditData", objArr));
            }
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.flags = abstractSerializedData.readInt32(z);
            this.caption = (this.flags & TLRPC.USER_FLAG_ACCESS_HASH) != 0;
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.flags = this.caption ? this.flags | TLRPC.USER_FLAG_ACCESS_HASH : this.flags & -2;
            abstractSerializedData.writeInt32(this.flags);
        }
    }

    public static class TL_messages_messageEmpty extends TLObject {
        public static int constructor;

        static {
            constructor = 1062078024;
        }

        public static TL_messages_messageEmpty TLdeserialize(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            if (constructor == i) {
                TL_messages_messageEmpty tL_messages_messageEmpty = new TL_messages_messageEmpty();
                tL_messages_messageEmpty.readParams(abstractSerializedData, z);
                return tL_messages_messageEmpty;
            } else if (!z) {
                return null;
            } else {
                Object[] objArr = new Object[TLRPC.USER_FLAG_ACCESS_HASH];
                objArr[0] = Integer.valueOf(i);
                throw new RuntimeException(String.format("can't parse magic %x in TL_messages_messageEmpty", objArr));
            }
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
        }
    }

    public static class TL_messages_messages extends messages_Messages {
        public static int constructor;

        static {
            constructor = -1938715001;
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            int i = 0;
            int readInt32 = abstractSerializedData.readInt32(z);
            Object[] objArr;
            if (readInt32 == 481674261) {
                int readInt322 = abstractSerializedData.readInt32(z);
                readInt32 = 0;
                while (readInt32 < readInt322) {
                    Message TLdeserialize = Message.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
                    if (TLdeserialize != null) {
                        this.messages.add(TLdeserialize);
                        readInt32 += TLRPC.USER_FLAG_ACCESS_HASH;
                    } else {
                        return;
                    }
                }
                readInt32 = abstractSerializedData.readInt32(z);
                if (readInt32 == 481674261) {
                    readInt322 = abstractSerializedData.readInt32(z);
                    readInt32 = 0;
                    while (readInt32 < readInt322) {
                        Chat TLdeserialize2 = Chat.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
                        if (TLdeserialize2 != null) {
                            this.chats.add(TLdeserialize2);
                            readInt32 += TLRPC.USER_FLAG_ACCESS_HASH;
                        } else {
                            return;
                        }
                    }
                    readInt32 = abstractSerializedData.readInt32(z);
                    if (readInt32 == 481674261) {
                        readInt32 = abstractSerializedData.readInt32(z);
                        while (i < readInt32) {
                            User TLdeserialize3 = User.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
                            if (TLdeserialize3 != null) {
                                this.users.add(TLdeserialize3);
                                i += TLRPC.USER_FLAG_ACCESS_HASH;
                            } else {
                                return;
                            }
                        }
                    } else if (z) {
                        objArr = new Object[TLRPC.USER_FLAG_ACCESS_HASH];
                        objArr[0] = Integer.valueOf(readInt32);
                        throw new RuntimeException(String.format("wrong Vector magic, got %x", objArr));
                    }
                } else if (z) {
                    objArr = new Object[TLRPC.USER_FLAG_ACCESS_HASH];
                    objArr[0] = Integer.valueOf(readInt32);
                    throw new RuntimeException(String.format("wrong Vector magic, got %x", objArr));
                }
            } else if (z) {
                objArr = new Object[TLRPC.USER_FLAG_ACCESS_HASH];
                objArr[0] = Integer.valueOf(readInt32);
                throw new RuntimeException(String.format("wrong Vector magic, got %x", objArr));
            }
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            int i;
            int i2 = 0;
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(481674261);
            int size = this.messages.size();
            abstractSerializedData.writeInt32(size);
            for (i = 0; i < size; i += TLRPC.USER_FLAG_ACCESS_HASH) {
                ((Message) this.messages.get(i)).serializeToStream(abstractSerializedData);
            }
            abstractSerializedData.writeInt32(481674261);
            size = this.chats.size();
            abstractSerializedData.writeInt32(size);
            for (i = 0; i < size; i += TLRPC.USER_FLAG_ACCESS_HASH) {
                ((Chat) this.chats.get(i)).serializeToStream(abstractSerializedData);
            }
            abstractSerializedData.writeInt32(481674261);
            i = this.users.size();
            abstractSerializedData.writeInt32(i);
            while (i2 < i) {
                ((User) this.users.get(i2)).serializeToStream(abstractSerializedData);
                i2 += TLRPC.USER_FLAG_ACCESS_HASH;
            }
        }
    }

    public static class TL_messages_messagesSlice extends messages_Messages {
        public static int constructor;

        static {
            constructor = 189033187;
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            int i = 0;
            this.count = abstractSerializedData.readInt32(z);
            int readInt32 = abstractSerializedData.readInt32(z);
            Object[] objArr;
            if (readInt32 == 481674261) {
                int readInt322 = abstractSerializedData.readInt32(z);
                readInt32 = 0;
                while (readInt32 < readInt322) {
                    Message TLdeserialize = Message.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
                    if (TLdeserialize != null) {
                        this.messages.add(TLdeserialize);
                        readInt32 += TLRPC.USER_FLAG_ACCESS_HASH;
                    } else {
                        return;
                    }
                }
                readInt32 = abstractSerializedData.readInt32(z);
                if (readInt32 == 481674261) {
                    readInt322 = abstractSerializedData.readInt32(z);
                    readInt32 = 0;
                    while (readInt32 < readInt322) {
                        Chat TLdeserialize2 = Chat.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
                        if (TLdeserialize2 != null) {
                            this.chats.add(TLdeserialize2);
                            readInt32 += TLRPC.USER_FLAG_ACCESS_HASH;
                        } else {
                            return;
                        }
                    }
                    readInt32 = abstractSerializedData.readInt32(z);
                    if (readInt32 == 481674261) {
                        readInt32 = abstractSerializedData.readInt32(z);
                        while (i < readInt32) {
                            User TLdeserialize3 = User.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
                            if (TLdeserialize3 != null) {
                                this.users.add(TLdeserialize3);
                                i += TLRPC.USER_FLAG_ACCESS_HASH;
                            } else {
                                return;
                            }
                        }
                    } else if (z) {
                        objArr = new Object[TLRPC.USER_FLAG_ACCESS_HASH];
                        objArr[0] = Integer.valueOf(readInt32);
                        throw new RuntimeException(String.format("wrong Vector magic, got %x", objArr));
                    }
                } else if (z) {
                    objArr = new Object[TLRPC.USER_FLAG_ACCESS_HASH];
                    objArr[0] = Integer.valueOf(readInt32);
                    throw new RuntimeException(String.format("wrong Vector magic, got %x", objArr));
                }
            } else if (z) {
                objArr = new Object[TLRPC.USER_FLAG_ACCESS_HASH];
                objArr[0] = Integer.valueOf(readInt32);
                throw new RuntimeException(String.format("wrong Vector magic, got %x", objArr));
            }
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            int i;
            int i2 = 0;
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.count);
            abstractSerializedData.writeInt32(481674261);
            int size = this.messages.size();
            abstractSerializedData.writeInt32(size);
            for (i = 0; i < size; i += TLRPC.USER_FLAG_ACCESS_HASH) {
                ((Message) this.messages.get(i)).serializeToStream(abstractSerializedData);
            }
            abstractSerializedData.writeInt32(481674261);
            size = this.chats.size();
            abstractSerializedData.writeInt32(size);
            for (i = 0; i < size; i += TLRPC.USER_FLAG_ACCESS_HASH) {
                ((Chat) this.chats.get(i)).serializeToStream(abstractSerializedData);
            }
            abstractSerializedData.writeInt32(481674261);
            i = this.users.size();
            abstractSerializedData.writeInt32(i);
            while (i2 < i) {
                ((User) this.users.get(i2)).serializeToStream(abstractSerializedData);
                i2 += TLRPC.USER_FLAG_ACCESS_HASH;
            }
        }
    }

    public static class TL_messages_migrateChat extends TLObject {
        public static int constructor;
        public int chat_id;

        static {
            constructor = 363051235;
        }

        public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            return Updates.TLdeserialize(abstractSerializedData, i, z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.chat_id);
        }
    }

    public static class TL_messages_peerDialogs extends TLObject {
        public static int constructor;
        public ArrayList<Chat> chats;
        public ArrayList<TL_dialog> dialogs;
        public ArrayList<Message> messages;
        public TL_updates_state state;
        public ArrayList<User> users;

        static {
            constructor = 863093588;
        }

        public TL_messages_peerDialogs() {
            this.dialogs = new ArrayList();
            this.messages = new ArrayList();
            this.chats = new ArrayList();
            this.users = new ArrayList();
        }

        public static TL_messages_peerDialogs TLdeserialize(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            if (constructor == i) {
                TL_messages_peerDialogs tL_messages_peerDialogs = new TL_messages_peerDialogs();
                tL_messages_peerDialogs.readParams(abstractSerializedData, z);
                return tL_messages_peerDialogs;
            } else if (!z) {
                return null;
            } else {
                Object[] objArr = new Object[TLRPC.USER_FLAG_ACCESS_HASH];
                objArr[0] = Integer.valueOf(i);
                throw new RuntimeException(String.format("can't parse magic %x in TL_messages_peerDialogs", objArr));
            }
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            int i = 0;
            int readInt32 = abstractSerializedData.readInt32(z);
            Object[] objArr;
            if (readInt32 == 481674261) {
                int readInt322 = abstractSerializedData.readInt32(z);
                readInt32 = 0;
                while (readInt32 < readInt322) {
                    TL_dialog TLdeserialize = TL_dialog.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
                    if (TLdeserialize != null) {
                        this.dialogs.add(TLdeserialize);
                        readInt32 += TLRPC.USER_FLAG_ACCESS_HASH;
                    } else {
                        return;
                    }
                }
                readInt32 = abstractSerializedData.readInt32(z);
                if (readInt32 == 481674261) {
                    readInt322 = abstractSerializedData.readInt32(z);
                    readInt32 = 0;
                    while (readInt32 < readInt322) {
                        Message TLdeserialize2 = Message.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
                        if (TLdeserialize2 != null) {
                            this.messages.add(TLdeserialize2);
                            readInt32 += TLRPC.USER_FLAG_ACCESS_HASH;
                        } else {
                            return;
                        }
                    }
                    readInt32 = abstractSerializedData.readInt32(z);
                    if (readInt32 == 481674261) {
                        readInt322 = abstractSerializedData.readInt32(z);
                        readInt32 = 0;
                        while (readInt32 < readInt322) {
                            Chat TLdeserialize3 = Chat.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
                            if (TLdeserialize3 != null) {
                                this.chats.add(TLdeserialize3);
                                readInt32 += TLRPC.USER_FLAG_ACCESS_HASH;
                            } else {
                                return;
                            }
                        }
                        readInt32 = abstractSerializedData.readInt32(z);
                        if (readInt32 == 481674261) {
                            readInt32 = abstractSerializedData.readInt32(z);
                            while (i < readInt32) {
                                User TLdeserialize4 = User.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
                                if (TLdeserialize4 != null) {
                                    this.users.add(TLdeserialize4);
                                    i += TLRPC.USER_FLAG_ACCESS_HASH;
                                } else {
                                    return;
                                }
                            }
                            this.state = TL_updates_state.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
                        } else if (z) {
                            objArr = new Object[TLRPC.USER_FLAG_ACCESS_HASH];
                            objArr[0] = Integer.valueOf(readInt32);
                            throw new RuntimeException(String.format("wrong Vector magic, got %x", objArr));
                        }
                    } else if (z) {
                        objArr = new Object[TLRPC.USER_FLAG_ACCESS_HASH];
                        objArr[0] = Integer.valueOf(readInt32);
                        throw new RuntimeException(String.format("wrong Vector magic, got %x", objArr));
                    }
                } else if (z) {
                    objArr = new Object[TLRPC.USER_FLAG_ACCESS_HASH];
                    objArr[0] = Integer.valueOf(readInt32);
                    throw new RuntimeException(String.format("wrong Vector magic, got %x", objArr));
                }
            } else if (z) {
                objArr = new Object[TLRPC.USER_FLAG_ACCESS_HASH];
                objArr[0] = Integer.valueOf(readInt32);
                throw new RuntimeException(String.format("wrong Vector magic, got %x", objArr));
            }
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            int i;
            int i2 = 0;
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(481674261);
            int size = this.dialogs.size();
            abstractSerializedData.writeInt32(size);
            for (i = 0; i < size; i += TLRPC.USER_FLAG_ACCESS_HASH) {
                ((TL_dialog) this.dialogs.get(i)).serializeToStream(abstractSerializedData);
            }
            abstractSerializedData.writeInt32(481674261);
            size = this.messages.size();
            abstractSerializedData.writeInt32(size);
            for (i = 0; i < size; i += TLRPC.USER_FLAG_ACCESS_HASH) {
                ((Message) this.messages.get(i)).serializeToStream(abstractSerializedData);
            }
            abstractSerializedData.writeInt32(481674261);
            size = this.chats.size();
            abstractSerializedData.writeInt32(size);
            for (i = 0; i < size; i += TLRPC.USER_FLAG_ACCESS_HASH) {
                ((Chat) this.chats.get(i)).serializeToStream(abstractSerializedData);
            }
            abstractSerializedData.writeInt32(481674261);
            i = this.users.size();
            abstractSerializedData.writeInt32(i);
            while (i2 < i) {
                ((User) this.users.get(i2)).serializeToStream(abstractSerializedData);
                i2 += TLRPC.USER_FLAG_ACCESS_HASH;
            }
            this.state.serializeToStream(abstractSerializedData);
        }
    }

    public static class TL_messages_readEncryptedHistory extends TLObject {
        public static int constructor;
        public int max_date;
        public TL_inputEncryptedChat peer;

        static {
            constructor = 2135648522;
        }

        public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            return Bool.TLdeserialize(abstractSerializedData, i, z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.peer.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeInt32(this.max_date);
        }
    }

    public static class TL_messages_readFeaturedStickers extends TLObject {
        public static int constructor;
        public ArrayList<Long> id;

        static {
            constructor = 1527873830;
        }

        public TL_messages_readFeaturedStickers() {
            this.id = new ArrayList();
        }

        public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            return Bool.TLdeserialize(abstractSerializedData, i, z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(481674261);
            int size = this.id.size();
            abstractSerializedData.writeInt32(size);
            for (int i = 0; i < size; i += TLRPC.USER_FLAG_ACCESS_HASH) {
                abstractSerializedData.writeInt64(((Long) this.id.get(i)).longValue());
            }
        }
    }

    public static class TL_messages_readHistory extends TLObject {
        public static int constructor;
        public int max_id;
        public InputPeer peer;

        static {
            constructor = 238054714;
        }

        public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            return TL_messages_affectedMessages.TLdeserialize(abstractSerializedData, i, z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.peer.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeInt32(this.max_id);
        }
    }

    public static class TL_messages_readMessageContents extends TLObject {
        public static int constructor;
        public long dialogId;
        public ArrayList<Integer> id;

        static {
            constructor = 916930423;
        }

        public TL_messages_readMessageContents() {
            this.id = new ArrayList();
        }

        public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            return TL_messages_affectedMessages.TLdeserialize(abstractSerializedData, i, z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(481674261);
            int size = this.id.size();
            abstractSerializedData.writeInt32(size);
            for (int i = 0; i < size; i += TLRPC.USER_FLAG_ACCESS_HASH) {
                abstractSerializedData.writeInt32(((Integer) this.id.get(i)).intValue());
            }
        }
    }

    public static class TL_messages_receivedMessages extends TLObject {
        public static int constructor;
        public int max_id;

        static {
            constructor = 94983360;
        }

        public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            TLObject vector = new Vector();
            int readInt32 = abstractSerializedData.readInt32(z);
            for (int i2 = 0; i2 < readInt32; i2 += TLRPC.USER_FLAG_ACCESS_HASH) {
                TL_receivedNotifyMessage TLdeserialize = TL_receivedNotifyMessage.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
                if (TLdeserialize == null) {
                    break;
                }
                vector.objects.add(TLdeserialize);
            }
            return vector;
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.max_id);
        }
    }

    public static class TL_messages_receivedQueue extends TLObject {
        public static int constructor;
        public int max_qts;

        static {
            constructor = 1436924774;
        }

        public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            TLObject vector = new Vector();
            int readInt32 = abstractSerializedData.readInt32(z);
            for (int i2 = 0; i2 < readInt32; i2 += TLRPC.USER_FLAG_ACCESS_HASH) {
                vector.objects.add(Long.valueOf(abstractSerializedData.readInt64(z)));
            }
            return vector;
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.max_qts);
        }
    }

    public static class messages_RecentStickers extends TLObject {
        public int hash;
        public ArrayList<Document> stickers;

        public messages_RecentStickers() {
            this.stickers = new ArrayList();
        }

        public static messages_RecentStickers TLdeserialize(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            messages_RecentStickers com_hanista_mobogram_tgnet_TLRPC_messages_RecentStickers = null;
            switch (i) {
                case 186120336:
                    com_hanista_mobogram_tgnet_TLRPC_messages_RecentStickers = new TL_messages_recentStickersNotModified();
                    break;
                case 1558317424:
                    com_hanista_mobogram_tgnet_TLRPC_messages_RecentStickers = new TL_messages_recentStickers();
                    break;
            }
            if (com_hanista_mobogram_tgnet_TLRPC_messages_RecentStickers == null && z) {
                Object[] objArr = new Object[TLRPC.USER_FLAG_ACCESS_HASH];
                objArr[0] = Integer.valueOf(i);
                throw new RuntimeException(String.format("can't parse magic %x in messages_RecentStickers", objArr));
            }
            if (com_hanista_mobogram_tgnet_TLRPC_messages_RecentStickers != null) {
                com_hanista_mobogram_tgnet_TLRPC_messages_RecentStickers.readParams(abstractSerializedData, z);
            }
            return com_hanista_mobogram_tgnet_TLRPC_messages_RecentStickers;
        }
    }

    public static class TL_messages_recentStickers extends messages_RecentStickers {
        public static int constructor;

        static {
            constructor = 1558317424;
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            int i = 0;
            this.hash = abstractSerializedData.readInt32(z);
            int readInt32 = abstractSerializedData.readInt32(z);
            if (readInt32 == 481674261) {
                readInt32 = abstractSerializedData.readInt32(z);
                while (i < readInt32) {
                    Document TLdeserialize = Document.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
                    if (TLdeserialize != null) {
                        this.stickers.add(TLdeserialize);
                        i += TLRPC.USER_FLAG_ACCESS_HASH;
                    } else {
                        return;
                    }
                }
            } else if (z) {
                Object[] objArr = new Object[TLRPC.USER_FLAG_ACCESS_HASH];
                objArr[0] = Integer.valueOf(readInt32);
                throw new RuntimeException(String.format("wrong Vector magic, got %x", objArr));
            }
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.hash);
            abstractSerializedData.writeInt32(481674261);
            int size = this.stickers.size();
            abstractSerializedData.writeInt32(size);
            for (int i = 0; i < size; i += TLRPC.USER_FLAG_ACCESS_HASH) {
                ((Document) this.stickers.get(i)).serializeToStream(abstractSerializedData);
            }
        }
    }

    public static class TL_messages_recentStickersNotModified extends messages_RecentStickers {
        public static int constructor;

        static {
            constructor = 186120336;
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
        }
    }

    public static class TL_messages_reorderStickerSets extends TLObject {
        public static int constructor;
        public int flags;
        public boolean masks;
        public ArrayList<Long> order;

        static {
            constructor = 2016638777;
        }

        public TL_messages_reorderStickerSets() {
            this.order = new ArrayList();
        }

        public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            return Bool.TLdeserialize(abstractSerializedData, i, z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.flags = this.masks ? this.flags | TLRPC.USER_FLAG_ACCESS_HASH : this.flags & -2;
            abstractSerializedData.writeInt32(this.flags);
            abstractSerializedData.writeInt32(481674261);
            int size = this.order.size();
            abstractSerializedData.writeInt32(size);
            for (int i = 0; i < size; i += TLRPC.USER_FLAG_ACCESS_HASH) {
                abstractSerializedData.writeInt64(((Long) this.order.get(i)).longValue());
            }
        }
    }

    public static class TL_messages_reportSpam extends TLObject {
        public static int constructor;
        public InputPeer peer;

        static {
            constructor = -820669733;
        }

        public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            return Bool.TLdeserialize(abstractSerializedData, i, z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.peer.serializeToStream(abstractSerializedData);
        }
    }

    public static class TL_messages_requestEncryption extends TLObject {
        public static int constructor;
        public byte[] g_a;
        public int random_id;
        public InputUser user_id;

        static {
            constructor = -162681021;
        }

        public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            return EncryptedChat.TLdeserialize(abstractSerializedData, i, z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.user_id.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeInt32(this.random_id);
            abstractSerializedData.writeByteArray(this.g_a);
        }
    }

    public static class TL_messages_saveDraft extends TLObject {
        public static int constructor;
        public ArrayList<MessageEntity> entities;
        public int flags;
        public String message;
        public boolean no_webpage;
        public InputPeer peer;
        public int reply_to_msg_id;

        static {
            constructor = -1137057461;
        }

        public TL_messages_saveDraft() {
            this.entities = new ArrayList();
        }

        public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            return Bool.TLdeserialize(abstractSerializedData, i, z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.flags = this.no_webpage ? this.flags | TLRPC.USER_FLAG_FIRST_NAME : this.flags & -3;
            abstractSerializedData.writeInt32(this.flags);
            if ((this.flags & TLRPC.USER_FLAG_ACCESS_HASH) != 0) {
                abstractSerializedData.writeInt32(this.reply_to_msg_id);
            }
            this.peer.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeString(this.message);
            if ((this.flags & TLRPC.USER_FLAG_USERNAME) != 0) {
                abstractSerializedData.writeInt32(481674261);
                int size = this.entities.size();
                abstractSerializedData.writeInt32(size);
                for (int i = 0; i < size; i += TLRPC.USER_FLAG_ACCESS_HASH) {
                    ((MessageEntity) this.entities.get(i)).serializeToStream(abstractSerializedData);
                }
            }
        }
    }

    public static class TL_messages_saveGif extends TLObject {
        public static int constructor;
        public InputDocument id;
        public boolean unsave;

        static {
            constructor = 846868683;
        }

        public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            return Bool.TLdeserialize(abstractSerializedData, i, z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.id.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeBool(this.unsave);
        }
    }

    public static class TL_messages_saveRecentSticker extends TLObject {
        public static int constructor;
        public boolean attached;
        public int flags;
        public InputDocument id;
        public boolean unsave;

        static {
            constructor = 958863608;
        }

        public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            return Bool.TLdeserialize(abstractSerializedData, i, z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.flags = this.attached ? this.flags | TLRPC.USER_FLAG_ACCESS_HASH : this.flags & -2;
            abstractSerializedData.writeInt32(this.flags);
            this.id.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeBool(this.unsave);
        }
    }

    public static class messages_SavedGifs extends TLObject {
        public ArrayList<Document> gifs;
        public int hash;

        public messages_SavedGifs() {
            this.gifs = new ArrayList();
        }

        public static messages_SavedGifs TLdeserialize(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            messages_SavedGifs com_hanista_mobogram_tgnet_TLRPC_messages_SavedGifs = null;
            switch (i) {
                case -402498398:
                    com_hanista_mobogram_tgnet_TLRPC_messages_SavedGifs = new TL_messages_savedGifsNotModified();
                    break;
                case 772213157:
                    com_hanista_mobogram_tgnet_TLRPC_messages_SavedGifs = new TL_messages_savedGifs();
                    break;
            }
            if (com_hanista_mobogram_tgnet_TLRPC_messages_SavedGifs == null && z) {
                Object[] objArr = new Object[TLRPC.USER_FLAG_ACCESS_HASH];
                objArr[0] = Integer.valueOf(i);
                throw new RuntimeException(String.format("can't parse magic %x in messages_SavedGifs", objArr));
            }
            if (com_hanista_mobogram_tgnet_TLRPC_messages_SavedGifs != null) {
                com_hanista_mobogram_tgnet_TLRPC_messages_SavedGifs.readParams(abstractSerializedData, z);
            }
            return com_hanista_mobogram_tgnet_TLRPC_messages_SavedGifs;
        }
    }

    public static class TL_messages_savedGifs extends messages_SavedGifs {
        public static int constructor;

        static {
            constructor = 772213157;
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            int i = 0;
            this.hash = abstractSerializedData.readInt32(z);
            int readInt32 = abstractSerializedData.readInt32(z);
            if (readInt32 == 481674261) {
                readInt32 = abstractSerializedData.readInt32(z);
                while (i < readInt32) {
                    Document TLdeserialize = Document.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
                    if (TLdeserialize != null) {
                        this.gifs.add(TLdeserialize);
                        i += TLRPC.USER_FLAG_ACCESS_HASH;
                    } else {
                        return;
                    }
                }
            } else if (z) {
                Object[] objArr = new Object[TLRPC.USER_FLAG_ACCESS_HASH];
                objArr[0] = Integer.valueOf(readInt32);
                throw new RuntimeException(String.format("wrong Vector magic, got %x", objArr));
            }
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.hash);
            abstractSerializedData.writeInt32(481674261);
            int size = this.gifs.size();
            abstractSerializedData.writeInt32(size);
            for (int i = 0; i < size; i += TLRPC.USER_FLAG_ACCESS_HASH) {
                ((Document) this.gifs.get(i)).serializeToStream(abstractSerializedData);
            }
        }
    }

    public static class TL_messages_savedGifsNotModified extends messages_SavedGifs {
        public static int constructor;

        static {
            constructor = -402498398;
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
        }
    }

    public static class TL_messages_search extends TLObject {
        public static int constructor;
        public MessagesFilter filter;
        public int flags;
        public int limit;
        public int max_date;
        public int max_id;
        public int min_date;
        public int offset;
        public InputPeer peer;
        public String f2672q;

        static {
            constructor = -732523960;
        }

        public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            return messages_Messages.TLdeserialize(abstractSerializedData, i, z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.flags);
            this.peer.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeString(this.f2672q);
            this.filter.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeInt32(this.min_date);
            abstractSerializedData.writeInt32(this.max_date);
            abstractSerializedData.writeInt32(this.offset);
            abstractSerializedData.writeInt32(this.max_id);
            abstractSerializedData.writeInt32(this.limit);
        }
    }

    public static class TL_messages_searchGifs extends TLObject {
        public static int constructor;
        public int offset;
        public String f2673q;

        static {
            constructor = -1080395925;
        }

        public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            return TL_messages_foundGifs.TLdeserialize(abstractSerializedData, i, z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeString(this.f2673q);
            abstractSerializedData.writeInt32(this.offset);
        }
    }

    public static class TL_messages_searchGlobal extends TLObject {
        public static int constructor;
        public int limit;
        public int offset_date;
        public int offset_id;
        public InputPeer offset_peer;
        public String f2674q;

        static {
            constructor = -1640190800;
        }

        public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            return messages_Messages.TLdeserialize(abstractSerializedData, i, z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeString(this.f2674q);
            abstractSerializedData.writeInt32(this.offset_date);
            this.offset_peer.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeInt32(this.offset_id);
            abstractSerializedData.writeInt32(this.limit);
        }
    }

    public static class TL_messages_sendBroadcast extends TLObject {
        public static int constructor;
        public ArrayList<InputUser> contacts;
        public InputMedia media;
        public String message;
        public ArrayList<Long> random_id;

        static {
            constructor = -1082919718;
        }

        public TL_messages_sendBroadcast() {
            this.contacts = new ArrayList();
            this.random_id = new ArrayList();
        }

        public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            return Updates.TLdeserialize(abstractSerializedData, i, z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            int i;
            int i2 = 0;
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(481674261);
            int size = this.contacts.size();
            abstractSerializedData.writeInt32(size);
            for (i = 0; i < size; i += TLRPC.USER_FLAG_ACCESS_HASH) {
                ((InputUser) this.contacts.get(i)).serializeToStream(abstractSerializedData);
            }
            abstractSerializedData.writeInt32(481674261);
            i = this.random_id.size();
            abstractSerializedData.writeInt32(i);
            while (i2 < i) {
                abstractSerializedData.writeInt64(((Long) this.random_id.get(i2)).longValue());
                i2 += TLRPC.USER_FLAG_ACCESS_HASH;
            }
            abstractSerializedData.writeString(this.message);
            this.media.serializeToStream(abstractSerializedData);
        }
    }

    public static class TL_messages_sendEncrypted extends TLObject {
        public static int constructor;
        public NativeByteBuffer data;
        public TL_inputEncryptedChat peer;
        public long random_id;

        static {
            constructor = -1451792525;
        }

        public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            return messages_SentEncryptedMessage.TLdeserialize(abstractSerializedData, i, z);
        }

        public void freeResources() {
            if (this.data != null) {
                this.data.reuse();
                this.data = null;
            }
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.peer.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeInt64(this.random_id);
            abstractSerializedData.writeByteBuffer(this.data);
        }
    }

    public static class TL_messages_sendEncryptedFile extends TLObject {
        public static int constructor;
        public NativeByteBuffer data;
        public InputEncryptedFile file;
        public TL_inputEncryptedChat peer;
        public long random_id;

        static {
            constructor = -1701831834;
        }

        public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            return messages_SentEncryptedMessage.TLdeserialize(abstractSerializedData, i, z);
        }

        public void freeResources() {
            if (this.data != null) {
                this.data.reuse();
                this.data = null;
            }
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.peer.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeInt64(this.random_id);
            abstractSerializedData.writeByteBuffer(this.data);
            this.file.serializeToStream(abstractSerializedData);
        }
    }

    public static class TL_messages_sendEncryptedService extends TLObject {
        public static int constructor;
        public NativeByteBuffer data;
        public TL_inputEncryptedChat peer;
        public long random_id;

        static {
            constructor = 852769188;
        }

        public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            return messages_SentEncryptedMessage.TLdeserialize(abstractSerializedData, i, z);
        }

        public void freeResources() {
            if (this.data != null) {
                this.data.reuse();
                this.data = null;
            }
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.peer.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeInt64(this.random_id);
            abstractSerializedData.writeByteBuffer(this.data);
        }
    }

    public static class TL_messages_sendInlineBotResult extends TLObject {
        public static int constructor;
        public boolean background;
        public boolean clear_draft;
        public int flags;
        public String id;
        public InputPeer peer;
        public long query_id;
        public long random_id;
        public int reply_to_msg_id;
        public boolean silent;

        static {
            constructor = -1318189314;
        }

        public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            return Updates.TLdeserialize(abstractSerializedData, i, z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.flags = this.silent ? this.flags | TLRPC.USER_FLAG_PHOTO : this.flags & -33;
            this.flags = this.background ? this.flags | TLRPC.USER_FLAG_STATUS : this.flags & -65;
            this.flags = this.clear_draft ? this.flags | TLRPC.USER_FLAG_UNUSED : this.flags & -129;
            abstractSerializedData.writeInt32(this.flags);
            this.peer.serializeToStream(abstractSerializedData);
            if ((this.flags & TLRPC.USER_FLAG_ACCESS_HASH) != 0) {
                abstractSerializedData.writeInt32(this.reply_to_msg_id);
            }
            abstractSerializedData.writeInt64(this.random_id);
            abstractSerializedData.writeInt64(this.query_id);
            abstractSerializedData.writeString(this.id);
        }
    }

    public static class TL_messages_sendMedia extends TLObject {
        public static int constructor;
        public boolean background;
        public boolean clear_draft;
        public int flags;
        public InputMedia media;
        public InputPeer peer;
        public long random_id;
        public ReplyMarkup reply_markup;
        public int reply_to_msg_id;
        public boolean silent;

        static {
            constructor = -923703407;
        }

        public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            return Updates.TLdeserialize(abstractSerializedData, i, z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.flags = this.silent ? this.flags | TLRPC.USER_FLAG_PHOTO : this.flags & -33;
            this.flags = this.background ? this.flags | TLRPC.USER_FLAG_STATUS : this.flags & -65;
            this.flags = this.clear_draft ? this.flags | TLRPC.USER_FLAG_UNUSED : this.flags & -129;
            abstractSerializedData.writeInt32(this.flags);
            this.peer.serializeToStream(abstractSerializedData);
            if ((this.flags & TLRPC.USER_FLAG_ACCESS_HASH) != 0) {
                abstractSerializedData.writeInt32(this.reply_to_msg_id);
            }
            this.media.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeInt64(this.random_id);
            if ((this.flags & TLRPC.USER_FLAG_LAST_NAME) != 0) {
                this.reply_markup.serializeToStream(abstractSerializedData);
            }
        }
    }

    public static class TL_messages_sendMessage extends TLObject {
        public static int constructor;
        public boolean background;
        public boolean clear_draft;
        public ArrayList<MessageEntity> entities;
        public int flags;
        public String message;
        public boolean no_webpage;
        public InputPeer peer;
        public long random_id;
        public ReplyMarkup reply_markup;
        public int reply_to_msg_id;
        public boolean silent;

        static {
            constructor = -91733382;
        }

        public TL_messages_sendMessage() {
            this.entities = new ArrayList();
        }

        public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            return Updates.TLdeserialize(abstractSerializedData, i, z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.flags = this.no_webpage ? this.flags | TLRPC.USER_FLAG_FIRST_NAME : this.flags & -3;
            this.flags = this.silent ? this.flags | TLRPC.USER_FLAG_PHOTO : this.flags & -33;
            this.flags = this.background ? this.flags | TLRPC.USER_FLAG_STATUS : this.flags & -65;
            this.flags = this.clear_draft ? this.flags | TLRPC.USER_FLAG_UNUSED : this.flags & -129;
            abstractSerializedData.writeInt32(this.flags);
            this.peer.serializeToStream(abstractSerializedData);
            if ((this.flags & TLRPC.USER_FLAG_ACCESS_HASH) != 0) {
                abstractSerializedData.writeInt32(this.reply_to_msg_id);
            }
            abstractSerializedData.writeString(this.message);
            abstractSerializedData.writeInt64(this.random_id);
            if ((this.flags & TLRPC.USER_FLAG_LAST_NAME) != 0) {
                this.reply_markup.serializeToStream(abstractSerializedData);
            }
            if ((this.flags & TLRPC.USER_FLAG_USERNAME) != 0) {
                abstractSerializedData.writeInt32(481674261);
                int size = this.entities.size();
                abstractSerializedData.writeInt32(size);
                for (int i = 0; i < size; i += TLRPC.USER_FLAG_ACCESS_HASH) {
                    ((MessageEntity) this.entities.get(i)).serializeToStream(abstractSerializedData);
                }
            }
        }
    }

    public static class messages_SentEncryptedMessage extends TLObject {
        public int date;
        public EncryptedFile file;

        public static messages_SentEncryptedMessage TLdeserialize(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            messages_SentEncryptedMessage com_hanista_mobogram_tgnet_TLRPC_messages_SentEncryptedMessage = null;
            switch (i) {
                case -1802240206:
                    com_hanista_mobogram_tgnet_TLRPC_messages_SentEncryptedMessage = new TL_messages_sentEncryptedFile();
                    break;
                case 1443858741:
                    com_hanista_mobogram_tgnet_TLRPC_messages_SentEncryptedMessage = new TL_messages_sentEncryptedMessage();
                    break;
            }
            if (com_hanista_mobogram_tgnet_TLRPC_messages_SentEncryptedMessage == null && z) {
                Object[] objArr = new Object[TLRPC.USER_FLAG_ACCESS_HASH];
                objArr[0] = Integer.valueOf(i);
                throw new RuntimeException(String.format("can't parse magic %x in messages_SentEncryptedMessage", objArr));
            }
            if (com_hanista_mobogram_tgnet_TLRPC_messages_SentEncryptedMessage != null) {
                com_hanista_mobogram_tgnet_TLRPC_messages_SentEncryptedMessage.readParams(abstractSerializedData, z);
            }
            return com_hanista_mobogram_tgnet_TLRPC_messages_SentEncryptedMessage;
        }
    }

    public static class TL_messages_sentEncryptedFile extends messages_SentEncryptedMessage {
        public static int constructor;

        static {
            constructor = -1802240206;
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.date = abstractSerializedData.readInt32(z);
            this.file = EncryptedFile.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.date);
            this.file.serializeToStream(abstractSerializedData);
        }
    }

    public static class TL_messages_sentEncryptedMessage extends messages_SentEncryptedMessage {
        public static int constructor;

        static {
            constructor = 1443858741;
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.date = abstractSerializedData.readInt32(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.date);
        }
    }

    public static class TL_messages_setBotCallbackAnswer extends TLObject {
        public static int constructor;
        public boolean alert;
        public int flags;
        public String message;
        public long query_id;
        public String url;

        static {
            constructor = -920136629;
        }

        public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            return Bool.TLdeserialize(abstractSerializedData, i, z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.flags = this.alert ? this.flags | TLRPC.USER_FLAG_FIRST_NAME : this.flags & -3;
            abstractSerializedData.writeInt32(this.flags);
            abstractSerializedData.writeInt64(this.query_id);
            if ((this.flags & TLRPC.USER_FLAG_ACCESS_HASH) != 0) {
                abstractSerializedData.writeString(this.message);
            }
            if ((this.flags & TLRPC.USER_FLAG_LAST_NAME) != 0) {
                abstractSerializedData.writeString(this.url);
            }
        }
    }

    public static class TL_messages_setEncryptedTyping extends TLObject {
        public static int constructor;
        public TL_inputEncryptedChat peer;
        public boolean typing;

        static {
            constructor = 2031374829;
        }

        public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            return Bool.TLdeserialize(abstractSerializedData, i, z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.peer.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeBool(this.typing);
        }
    }

    public static class TL_messages_setGameScore extends TLObject {
        public static int constructor;
        public boolean edit_message;
        public int flags;
        public int id;
        public InputPeer peer;
        public int score;
        public InputUser user_id;

        static {
            constructor = -1896289088;
        }

        public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            return Updates.TLdeserialize(abstractSerializedData, i, z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.flags);
            this.flags = this.edit_message ? this.flags | TLRPC.USER_FLAG_ACCESS_HASH : this.flags & -2;
            this.peer.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeInt32(this.id);
            this.user_id.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeInt32(this.score);
        }
    }

    public static class TL_messages_setInlineGameScore extends TLObject {
        public static int constructor;
        public boolean edit_message;
        public int flags;
        public TL_inputBotInlineMessageID id;
        public int score;
        public InputUser user_id;

        static {
            constructor = 363700068;
        }

        public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            return Bool.TLdeserialize(abstractSerializedData, i, z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.flags = this.edit_message ? this.flags | TLRPC.USER_FLAG_ACCESS_HASH : this.flags & -2;
            abstractSerializedData.writeInt32(this.flags);
            this.id.serializeToStream(abstractSerializedData);
            this.user_id.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeInt32(this.score);
        }
    }

    public static class TL_messages_setTyping extends TLObject {
        public static int constructor;
        public SendMessageAction action;
        public InputPeer peer;

        static {
            constructor = -1551737264;
        }

        public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            return Bool.TLdeserialize(abstractSerializedData, i, z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.peer.serializeToStream(abstractSerializedData);
            this.action.serializeToStream(abstractSerializedData);
        }
    }

    public static class TL_messages_startBot extends TLObject {
        public static int constructor;
        public InputUser bot;
        public InputPeer peer;
        public long random_id;
        public String start_param;

        static {
            constructor = -421563528;
        }

        public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            return Updates.TLdeserialize(abstractSerializedData, i, z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.bot.serializeToStream(abstractSerializedData);
            this.peer.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeInt64(this.random_id);
            abstractSerializedData.writeString(this.start_param);
        }
    }

    public static class TL_messages_stickerSet extends TLObject {
        public static int constructor;
        public ArrayList<Document> documents;
        public ArrayList<TL_stickerPack> packs;
        public StickerSet set;

        static {
            constructor = -1240849242;
        }

        public TL_messages_stickerSet() {
            this.packs = new ArrayList();
            this.documents = new ArrayList();
        }

        public static TL_messages_stickerSet TLdeserialize(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            if (constructor == i) {
                TL_messages_stickerSet tL_messages_stickerSet = new TL_messages_stickerSet();
                tL_messages_stickerSet.readParams(abstractSerializedData, z);
                return tL_messages_stickerSet;
            } else if (!z) {
                return null;
            } else {
                Object[] objArr = new Object[TLRPC.USER_FLAG_ACCESS_HASH];
                objArr[0] = Integer.valueOf(i);
                throw new RuntimeException(String.format("can't parse magic %x in TL_messages_stickerSet", objArr));
            }
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            int i = 0;
            this.set = StickerSet.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
            int readInt32 = abstractSerializedData.readInt32(z);
            Object[] objArr;
            if (readInt32 == 481674261) {
                int readInt322 = abstractSerializedData.readInt32(z);
                readInt32 = 0;
                while (readInt32 < readInt322) {
                    TL_stickerPack TLdeserialize = TL_stickerPack.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
                    if (TLdeserialize != null) {
                        this.packs.add(TLdeserialize);
                        readInt32 += TLRPC.USER_FLAG_ACCESS_HASH;
                    } else {
                        return;
                    }
                }
                readInt32 = abstractSerializedData.readInt32(z);
                if (readInt32 == 481674261) {
                    readInt32 = abstractSerializedData.readInt32(z);
                    while (i < readInt32) {
                        Document TLdeserialize2 = Document.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
                        if (TLdeserialize2 != null) {
                            this.documents.add(TLdeserialize2);
                            i += TLRPC.USER_FLAG_ACCESS_HASH;
                        } else {
                            return;
                        }
                    }
                } else if (z) {
                    objArr = new Object[TLRPC.USER_FLAG_ACCESS_HASH];
                    objArr[0] = Integer.valueOf(readInt32);
                    throw new RuntimeException(String.format("wrong Vector magic, got %x", objArr));
                }
            } else if (z) {
                objArr = new Object[TLRPC.USER_FLAG_ACCESS_HASH];
                objArr[0] = Integer.valueOf(readInt32);
                throw new RuntimeException(String.format("wrong Vector magic, got %x", objArr));
            }
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            int i;
            int i2 = 0;
            abstractSerializedData.writeInt32(constructor);
            this.set.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeInt32(481674261);
            int size = this.packs.size();
            abstractSerializedData.writeInt32(size);
            for (i = 0; i < size; i += TLRPC.USER_FLAG_ACCESS_HASH) {
                ((TL_stickerPack) this.packs.get(i)).serializeToStream(abstractSerializedData);
            }
            abstractSerializedData.writeInt32(481674261);
            i = this.documents.size();
            abstractSerializedData.writeInt32(i);
            while (i2 < i) {
                ((Document) this.documents.get(i2)).serializeToStream(abstractSerializedData);
                i2 += TLRPC.USER_FLAG_ACCESS_HASH;
            }
        }
    }

    public static class messages_StickerSetInstallResult extends TLObject {
        public ArrayList<StickerSetCovered> sets;

        public messages_StickerSetInstallResult() {
            this.sets = new ArrayList();
        }

        public static messages_StickerSetInstallResult TLdeserialize(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            messages_StickerSetInstallResult com_hanista_mobogram_tgnet_TLRPC_messages_StickerSetInstallResult = null;
            switch (i) {
                case 904138920:
                    com_hanista_mobogram_tgnet_TLRPC_messages_StickerSetInstallResult = new TL_messages_stickerSetInstallResultArchive();
                    break;
                case 946083368:
                    com_hanista_mobogram_tgnet_TLRPC_messages_StickerSetInstallResult = new TL_messages_stickerSetInstallResultSuccess();
                    break;
            }
            if (com_hanista_mobogram_tgnet_TLRPC_messages_StickerSetInstallResult == null && z) {
                Object[] objArr = new Object[TLRPC.USER_FLAG_ACCESS_HASH];
                objArr[0] = Integer.valueOf(i);
                throw new RuntimeException(String.format("can't parse magic %x in messages_StickerSetInstallResult", objArr));
            }
            if (com_hanista_mobogram_tgnet_TLRPC_messages_StickerSetInstallResult != null) {
                com_hanista_mobogram_tgnet_TLRPC_messages_StickerSetInstallResult.readParams(abstractSerializedData, z);
            }
            return com_hanista_mobogram_tgnet_TLRPC_messages_StickerSetInstallResult;
        }
    }

    public static class TL_messages_stickerSetInstallResultArchive extends messages_StickerSetInstallResult {
        public static int constructor;

        static {
            constructor = 904138920;
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            int i = 0;
            int readInt32 = abstractSerializedData.readInt32(z);
            if (readInt32 == 481674261) {
                readInt32 = abstractSerializedData.readInt32(z);
                while (i < readInt32) {
                    StickerSetCovered TLdeserialize = StickerSetCovered.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
                    if (TLdeserialize != null) {
                        this.sets.add(TLdeserialize);
                        i += TLRPC.USER_FLAG_ACCESS_HASH;
                    } else {
                        return;
                    }
                }
            } else if (z) {
                Object[] objArr = new Object[TLRPC.USER_FLAG_ACCESS_HASH];
                objArr[0] = Integer.valueOf(readInt32);
                throw new RuntimeException(String.format("wrong Vector magic, got %x", objArr));
            }
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(481674261);
            int size = this.sets.size();
            abstractSerializedData.writeInt32(size);
            for (int i = 0; i < size; i += TLRPC.USER_FLAG_ACCESS_HASH) {
                ((StickerSetCovered) this.sets.get(i)).serializeToStream(abstractSerializedData);
            }
        }
    }

    public static class TL_messages_stickerSetInstallResultSuccess extends messages_StickerSetInstallResult {
        public static int constructor;

        static {
            constructor = 946083368;
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
        }
    }

    public static class messages_Stickers extends TLObject {
        public String hash;
        public ArrayList<Document> stickers;

        public messages_Stickers() {
            this.stickers = new ArrayList();
        }

        public static messages_Stickers TLdeserialize(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            messages_Stickers com_hanista_mobogram_tgnet_TLRPC_messages_Stickers = null;
            switch (i) {
                case -1970352846:
                    com_hanista_mobogram_tgnet_TLRPC_messages_Stickers = new TL_messages_stickers();
                    break;
                case -244016606:
                    com_hanista_mobogram_tgnet_TLRPC_messages_Stickers = new TL_messages_stickersNotModified();
                    break;
            }
            if (com_hanista_mobogram_tgnet_TLRPC_messages_Stickers == null && z) {
                Object[] objArr = new Object[TLRPC.USER_FLAG_ACCESS_HASH];
                objArr[0] = Integer.valueOf(i);
                throw new RuntimeException(String.format("can't parse magic %x in messages_Stickers", objArr));
            }
            if (com_hanista_mobogram_tgnet_TLRPC_messages_Stickers != null) {
                com_hanista_mobogram_tgnet_TLRPC_messages_Stickers.readParams(abstractSerializedData, z);
            }
            return com_hanista_mobogram_tgnet_TLRPC_messages_Stickers;
        }
    }

    public static class TL_messages_stickers extends messages_Stickers {
        public static int constructor;

        static {
            constructor = -1970352846;
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            int i = 0;
            this.hash = abstractSerializedData.readString(z);
            int readInt32 = abstractSerializedData.readInt32(z);
            if (readInt32 == 481674261) {
                readInt32 = abstractSerializedData.readInt32(z);
                while (i < readInt32) {
                    Document TLdeserialize = Document.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
                    if (TLdeserialize != null) {
                        this.stickers.add(TLdeserialize);
                        i += TLRPC.USER_FLAG_ACCESS_HASH;
                    } else {
                        return;
                    }
                }
            } else if (z) {
                Object[] objArr = new Object[TLRPC.USER_FLAG_ACCESS_HASH];
                objArr[0] = Integer.valueOf(readInt32);
                throw new RuntimeException(String.format("wrong Vector magic, got %x", objArr));
            }
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeString(this.hash);
            abstractSerializedData.writeInt32(481674261);
            int size = this.stickers.size();
            abstractSerializedData.writeInt32(size);
            for (int i = 0; i < size; i += TLRPC.USER_FLAG_ACCESS_HASH) {
                ((Document) this.stickers.get(i)).serializeToStream(abstractSerializedData);
            }
        }
    }

    public static class TL_messages_stickersNotModified extends messages_Stickers {
        public static int constructor;

        static {
            constructor = -244016606;
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
        }
    }

    public static class TL_messages_toggleChatAdmins extends TLObject {
        public static int constructor;
        public int chat_id;
        public boolean enabled;

        static {
            constructor = -326379039;
        }

        public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            return Updates.TLdeserialize(abstractSerializedData, i, z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.chat_id);
            abstractSerializedData.writeBool(this.enabled);
        }
    }

    public static class TL_messages_uninstallStickerSet extends TLObject {
        public static int constructor;
        public InputStickerSet stickerset;

        static {
            constructor = -110209570;
        }

        public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            return Bool.TLdeserialize(abstractSerializedData, i, z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.stickerset.serializeToStream(abstractSerializedData);
        }
    }

    public static class TL_nearestDc extends TLObject {
        public static int constructor;
        public String country;
        public int nearest_dc;
        public int this_dc;

        static {
            constructor = -1910892683;
        }

        public static TL_nearestDc TLdeserialize(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            if (constructor == i) {
                TL_nearestDc tL_nearestDc = new TL_nearestDc();
                tL_nearestDc.readParams(abstractSerializedData, z);
                return tL_nearestDc;
            } else if (!z) {
                return null;
            } else {
                Object[] objArr = new Object[TLRPC.USER_FLAG_ACCESS_HASH];
                objArr[0] = Integer.valueOf(i);
                throw new RuntimeException(String.format("can't parse magic %x in TL_nearestDc", objArr));
            }
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.country = abstractSerializedData.readString(z);
            this.this_dc = abstractSerializedData.readInt32(z);
            this.nearest_dc = abstractSerializedData.readInt32(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeString(this.country);
            abstractSerializedData.writeInt32(this.this_dc);
            abstractSerializedData.writeInt32(this.nearest_dc);
        }
    }

    public static class TL_notifyAll extends NotifyPeer {
        public static int constructor;

        static {
            constructor = 1959820384;
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
        }
    }

    public static class TL_notifyChats extends NotifyPeer {
        public static int constructor;

        static {
            constructor = -1073230141;
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
        }
    }

    public static class TL_notifyPeer extends NotifyPeer {
        public static int constructor;

        static {
            constructor = -1613493288;
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.peer = Peer.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.peer.serializeToStream(abstractSerializedData);
        }
    }

    public static class TL_notifyUsers extends NotifyPeer {
        public static int constructor;

        static {
            constructor = -1261946036;
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
        }
    }

    public static class TL_null extends TLObject {
        public static int constructor;

        static {
            constructor = 1450380236;
        }

        public static TL_null TLdeserialize(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            if (constructor == i) {
                TL_null tL_null = new TL_null();
                tL_null.readParams(abstractSerializedData, z);
                return tL_null;
            } else if (!z) {
                return null;
            } else {
                Object[] objArr = new Object[TLRPC.USER_FLAG_ACCESS_HASH];
                objArr[0] = Integer.valueOf(i);
                throw new RuntimeException(String.format("can't parse magic %x in TL_null", objArr));
            }
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
        }
    }

    public static class TL_peerChannel extends Peer {
        public static int constructor;

        static {
            constructor = -1109531342;
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.channel_id = abstractSerializedData.readInt32(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.channel_id);
        }
    }

    public static class TL_peerChat extends Peer {
        public static int constructor;

        static {
            constructor = -1160714821;
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.chat_id = abstractSerializedData.readInt32(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.chat_id);
        }
    }

    public static class TL_peerNotifyEventsAll extends PeerNotifyEvents {
        public static int constructor;

        static {
            constructor = 1830677896;
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
        }
    }

    public static class TL_peerNotifyEventsEmpty extends PeerNotifyEvents {
        public static int constructor;

        static {
            constructor = -1378534221;
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
        }
    }

    public static class TL_peerNotifySettings extends PeerNotifySettings {
        public static int constructor;
        public boolean show_previews;

        static {
            constructor = -1697798976;
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            boolean z2 = true;
            this.flags = abstractSerializedData.readInt32(z);
            this.show_previews = (this.flags & TLRPC.USER_FLAG_ACCESS_HASH) != 0;
            if ((this.flags & TLRPC.USER_FLAG_FIRST_NAME) == 0) {
                z2 = false;
            }
            this.silent = z2;
            this.mute_until = abstractSerializedData.readInt32(z);
            this.sound = abstractSerializedData.readString(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.flags = this.show_previews ? this.flags | TLRPC.USER_FLAG_ACCESS_HASH : this.flags & -2;
            this.flags = this.silent ? this.flags | TLRPC.USER_FLAG_FIRST_NAME : this.flags & -3;
            abstractSerializedData.writeInt32(this.flags);
            abstractSerializedData.writeInt32(this.mute_until);
            abstractSerializedData.writeString(this.sound);
        }
    }

    public static class TL_peerNotifySettingsEmpty extends PeerNotifySettings {
        public static int constructor;

        static {
            constructor = 1889961234;
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
        }
    }

    public static class TL_peerNotifySettings_layer47 extends TL_peerNotifySettings {
        public static int constructor;
        public boolean show_previews;

        static {
            constructor = -1923214866;
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.mute_until = abstractSerializedData.readInt32(z);
            this.sound = abstractSerializedData.readString(z);
            this.show_previews = abstractSerializedData.readBool(z);
            this.events_mask = abstractSerializedData.readInt32(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.mute_until);
            abstractSerializedData.writeString(this.sound);
            abstractSerializedData.writeBool(this.show_previews);
            abstractSerializedData.writeInt32(this.events_mask);
        }
    }

    public static class TL_peerSettings extends TLObject {
        public static int constructor;
        public int flags;
        public boolean report_spam;

        static {
            constructor = -2122045747;
        }

        public static TL_peerSettings TLdeserialize(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            if (constructor == i) {
                TL_peerSettings tL_peerSettings = new TL_peerSettings();
                tL_peerSettings.readParams(abstractSerializedData, z);
                return tL_peerSettings;
            } else if (!z) {
                return null;
            } else {
                Object[] objArr = new Object[TLRPC.USER_FLAG_ACCESS_HASH];
                objArr[0] = Integer.valueOf(i);
                throw new RuntimeException(String.format("can't parse magic %x in TL_peerSettings", objArr));
            }
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.flags = abstractSerializedData.readInt32(z);
            this.report_spam = (this.flags & TLRPC.USER_FLAG_ACCESS_HASH) != 0;
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.flags = this.report_spam ? this.flags | TLRPC.USER_FLAG_ACCESS_HASH : this.flags & -2;
            abstractSerializedData.writeInt32(this.flags);
        }
    }

    public static class TL_peerUser extends Peer {
        public static int constructor;

        static {
            constructor = -1649296275;
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.user_id = abstractSerializedData.readInt32(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.user_id);
        }
    }

    public static class TL_photo extends Photo {
        public static int constructor;

        static {
            constructor = -1836524247;
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            int i = 0;
            this.flags = abstractSerializedData.readInt32(z);
            this.has_stickers = (this.flags & TLRPC.USER_FLAG_ACCESS_HASH) != 0;
            this.id = abstractSerializedData.readInt64(z);
            this.access_hash = abstractSerializedData.readInt64(z);
            this.date = abstractSerializedData.readInt32(z);
            int readInt32 = abstractSerializedData.readInt32(z);
            if (readInt32 == 481674261) {
                readInt32 = abstractSerializedData.readInt32(z);
                while (i < readInt32) {
                    PhotoSize TLdeserialize = PhotoSize.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
                    if (TLdeserialize != null) {
                        this.sizes.add(TLdeserialize);
                        i += TLRPC.USER_FLAG_ACCESS_HASH;
                    } else {
                        return;
                    }
                }
            } else if (z) {
                Object[] objArr = new Object[TLRPC.USER_FLAG_ACCESS_HASH];
                objArr[0] = Integer.valueOf(readInt32);
                throw new RuntimeException(String.format("wrong Vector magic, got %x", objArr));
            }
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.flags = this.has_stickers ? this.flags | TLRPC.USER_FLAG_ACCESS_HASH : this.flags & -2;
            abstractSerializedData.writeInt32(this.flags);
            abstractSerializedData.writeInt64(this.id);
            abstractSerializedData.writeInt64(this.access_hash);
            abstractSerializedData.writeInt32(this.date);
            abstractSerializedData.writeInt32(481674261);
            int size = this.sizes.size();
            abstractSerializedData.writeInt32(size);
            for (int i = 0; i < size; i += TLRPC.USER_FLAG_ACCESS_HASH) {
                ((PhotoSize) this.sizes.get(i)).serializeToStream(abstractSerializedData);
            }
        }
    }

    public static class TL_photoCachedSize extends PhotoSize {
        public static int constructor;

        static {
            constructor = -374917894;
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.type = abstractSerializedData.readString(z);
            this.location = FileLocation.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
            this.w = abstractSerializedData.readInt32(z);
            this.h = abstractSerializedData.readInt32(z);
            this.bytes = abstractSerializedData.readByteArray(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeString(this.type);
            this.location.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeInt32(this.w);
            abstractSerializedData.writeInt32(this.h);
            abstractSerializedData.writeByteArray(this.bytes);
        }
    }

    public static class TL_photoEmpty extends Photo {
        public static int constructor;

        static {
            constructor = 590459437;
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.id = abstractSerializedData.readInt64(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt64(this.id);
        }
    }

    public static class TL_photoSize extends PhotoSize {
        public static int constructor;

        static {
            constructor = 2009052699;
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.type = abstractSerializedData.readString(z);
            this.location = FileLocation.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
            this.w = abstractSerializedData.readInt32(z);
            this.h = abstractSerializedData.readInt32(z);
            this.size = abstractSerializedData.readInt32(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeString(this.type);
            this.location.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeInt32(this.w);
            abstractSerializedData.writeInt32(this.h);
            abstractSerializedData.writeInt32(this.size);
        }
    }

    public static class TL_photoSizeEmpty extends PhotoSize {
        public static int constructor;

        static {
            constructor = 236446268;
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            int position = abstractSerializedData.getPosition();
            try {
                this.type = abstractSerializedData.readString(true);
                if (this.type.length() > TLRPC.USER_FLAG_ACCESS_HASH || !(this.type.equals(TtmlNode.ANONYMOUS_REGION_ID) || this.type.equals("s") || this.type.equals("x") || this.type.equals("m") || this.type.equals("y") || this.type.equals("w"))) {
                    this.type = "s";
                    if (abstractSerializedData instanceof NativeByteBuffer) {
                        ((NativeByteBuffer) abstractSerializedData).position(position);
                    }
                }
            } catch (Exception e) {
                this.type = "s";
                if (abstractSerializedData instanceof NativeByteBuffer) {
                    ((NativeByteBuffer) abstractSerializedData).position(position);
                }
            }
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeString(this.type);
        }
    }

    public static class TL_photo_layer55 extends TL_photo {
        public static int constructor;

        static {
            constructor = -840088834;
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            int i = 0;
            this.id = abstractSerializedData.readInt64(z);
            this.access_hash = abstractSerializedData.readInt64(z);
            this.date = abstractSerializedData.readInt32(z);
            int readInt32 = abstractSerializedData.readInt32(z);
            if (readInt32 == 481674261) {
                readInt32 = abstractSerializedData.readInt32(z);
                while (i < readInt32) {
                    PhotoSize TLdeserialize = PhotoSize.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
                    if (TLdeserialize != null) {
                        this.sizes.add(TLdeserialize);
                        i += TLRPC.USER_FLAG_ACCESS_HASH;
                    } else {
                        return;
                    }
                }
            } else if (z) {
                Object[] objArr = new Object[TLRPC.USER_FLAG_ACCESS_HASH];
                objArr[0] = Integer.valueOf(readInt32);
                throw new RuntimeException(String.format("wrong Vector magic, got %x", objArr));
            }
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt64(this.id);
            abstractSerializedData.writeInt64(this.access_hash);
            abstractSerializedData.writeInt32(this.date);
            abstractSerializedData.writeInt32(481674261);
            int size = this.sizes.size();
            abstractSerializedData.writeInt32(size);
            for (int i = 0; i < size; i += TLRPC.USER_FLAG_ACCESS_HASH) {
                ((PhotoSize) this.sizes.get(i)).serializeToStream(abstractSerializedData);
            }
        }
    }

    public static class TL_photo_old2 extends TL_photo {
        public static int constructor;

        static {
            constructor = -1014792074;
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            int i = 0;
            this.id = abstractSerializedData.readInt64(z);
            this.access_hash = abstractSerializedData.readInt64(z);
            this.user_id = abstractSerializedData.readInt32(z);
            this.date = abstractSerializedData.readInt32(z);
            this.geo = GeoPoint.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
            int readInt32 = abstractSerializedData.readInt32(z);
            if (readInt32 == 481674261) {
                readInt32 = abstractSerializedData.readInt32(z);
                while (i < readInt32) {
                    PhotoSize TLdeserialize = PhotoSize.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
                    if (TLdeserialize != null) {
                        this.sizes.add(TLdeserialize);
                        i += TLRPC.USER_FLAG_ACCESS_HASH;
                    } else {
                        return;
                    }
                }
            } else if (z) {
                Object[] objArr = new Object[TLRPC.USER_FLAG_ACCESS_HASH];
                objArr[0] = Integer.valueOf(readInt32);
                throw new RuntimeException(String.format("wrong Vector magic, got %x", objArr));
            }
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt64(this.id);
            abstractSerializedData.writeInt64(this.access_hash);
            abstractSerializedData.writeInt32(this.user_id);
            abstractSerializedData.writeInt32(this.date);
            this.geo.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeInt32(481674261);
            int size = this.sizes.size();
            abstractSerializedData.writeInt32(size);
            for (int i = 0; i < size; i += TLRPC.USER_FLAG_ACCESS_HASH) {
                ((PhotoSize) this.sizes.get(i)).serializeToStream(abstractSerializedData);
            }
        }
    }

    public static class TL_photo_old extends TL_photo {
        public static int constructor;

        static {
            constructor = 582313809;
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            int i = 0;
            this.id = abstractSerializedData.readInt64(z);
            this.access_hash = abstractSerializedData.readInt64(z);
            this.user_id = abstractSerializedData.readInt32(z);
            this.date = abstractSerializedData.readInt32(z);
            this.caption = abstractSerializedData.readString(z);
            this.geo = GeoPoint.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
            int readInt32 = abstractSerializedData.readInt32(z);
            if (readInt32 == 481674261) {
                readInt32 = abstractSerializedData.readInt32(z);
                while (i < readInt32) {
                    PhotoSize TLdeserialize = PhotoSize.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
                    if (TLdeserialize != null) {
                        this.sizes.add(TLdeserialize);
                        i += TLRPC.USER_FLAG_ACCESS_HASH;
                    } else {
                        return;
                    }
                }
            } else if (z) {
                Object[] objArr = new Object[TLRPC.USER_FLAG_ACCESS_HASH];
                objArr[0] = Integer.valueOf(readInt32);
                throw new RuntimeException(String.format("wrong Vector magic, got %x", objArr));
            }
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt64(this.id);
            abstractSerializedData.writeInt64(this.access_hash);
            abstractSerializedData.writeInt32(this.user_id);
            abstractSerializedData.writeInt32(this.date);
            abstractSerializedData.writeString(this.caption);
            this.geo.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeInt32(481674261);
            int size = this.sizes.size();
            abstractSerializedData.writeInt32(size);
            for (int i = 0; i < size; i += TLRPC.USER_FLAG_ACCESS_HASH) {
                ((PhotoSize) this.sizes.get(i)).serializeToStream(abstractSerializedData);
            }
        }
    }

    public static class TL_photos_deletePhotos extends TLObject {
        public static int constructor;
        public ArrayList<InputPhoto> id;

        static {
            constructor = -2016444625;
        }

        public TL_photos_deletePhotos() {
            this.id = new ArrayList();
        }

        public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            TLObject vector = new Vector();
            int readInt32 = abstractSerializedData.readInt32(z);
            for (int i2 = 0; i2 < readInt32; i2 += TLRPC.USER_FLAG_ACCESS_HASH) {
                vector.objects.add(Long.valueOf(abstractSerializedData.readInt64(z)));
            }
            return vector;
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(481674261);
            int size = this.id.size();
            abstractSerializedData.writeInt32(size);
            for (int i = 0; i < size; i += TLRPC.USER_FLAG_ACCESS_HASH) {
                ((InputPhoto) this.id.get(i)).serializeToStream(abstractSerializedData);
            }
        }
    }

    public static class TL_photos_getUserPhotos extends TLObject {
        public static int constructor;
        public int limit;
        public long max_id;
        public int offset;
        public InputUser user_id;

        static {
            constructor = -1848823128;
        }

        public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            return photos_Photos.TLdeserialize(abstractSerializedData, i, z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.user_id.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeInt32(this.offset);
            abstractSerializedData.writeInt64(this.max_id);
            abstractSerializedData.writeInt32(this.limit);
        }
    }

    public static class TL_photos_photo extends TLObject {
        public static int constructor;
        public Photo photo;
        public ArrayList<User> users;

        static {
            constructor = 539045032;
        }

        public TL_photos_photo() {
            this.users = new ArrayList();
        }

        public static TL_photos_photo TLdeserialize(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            if (constructor == i) {
                TL_photos_photo tL_photos_photo = new TL_photos_photo();
                tL_photos_photo.readParams(abstractSerializedData, z);
                return tL_photos_photo;
            } else if (!z) {
                return null;
            } else {
                Object[] objArr = new Object[TLRPC.USER_FLAG_ACCESS_HASH];
                objArr[0] = Integer.valueOf(i);
                throw new RuntimeException(String.format("can't parse magic %x in TL_photos_photo", objArr));
            }
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            int i = 0;
            this.photo = Photo.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
            int readInt32 = abstractSerializedData.readInt32(z);
            if (readInt32 == 481674261) {
                readInt32 = abstractSerializedData.readInt32(z);
                while (i < readInt32) {
                    User TLdeserialize = User.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
                    if (TLdeserialize != null) {
                        this.users.add(TLdeserialize);
                        i += TLRPC.USER_FLAG_ACCESS_HASH;
                    } else {
                        return;
                    }
                }
            } else if (z) {
                Object[] objArr = new Object[TLRPC.USER_FLAG_ACCESS_HASH];
                objArr[0] = Integer.valueOf(readInt32);
                throw new RuntimeException(String.format("wrong Vector magic, got %x", objArr));
            }
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.photo.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeInt32(481674261);
            int size = this.users.size();
            abstractSerializedData.writeInt32(size);
            for (int i = 0; i < size; i += TLRPC.USER_FLAG_ACCESS_HASH) {
                ((User) this.users.get(i)).serializeToStream(abstractSerializedData);
            }
        }
    }

    public static class photos_Photos extends TLObject {
        public int count;
        public ArrayList<Photo> photos;
        public ArrayList<User> users;

        public photos_Photos() {
            this.photos = new ArrayList();
            this.users = new ArrayList();
        }

        public static photos_Photos TLdeserialize(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            photos_Photos com_hanista_mobogram_tgnet_TLRPC_photos_Photos = null;
            switch (i) {
                case -1916114267:
                    com_hanista_mobogram_tgnet_TLRPC_photos_Photos = new TL_photos_photos();
                    break;
                case 352657236:
                    com_hanista_mobogram_tgnet_TLRPC_photos_Photos = new TL_photos_photosSlice();
                    break;
            }
            if (com_hanista_mobogram_tgnet_TLRPC_photos_Photos == null && z) {
                Object[] objArr = new Object[TLRPC.USER_FLAG_ACCESS_HASH];
                objArr[0] = Integer.valueOf(i);
                throw new RuntimeException(String.format("can't parse magic %x in photos_Photos", objArr));
            }
            if (com_hanista_mobogram_tgnet_TLRPC_photos_Photos != null) {
                com_hanista_mobogram_tgnet_TLRPC_photos_Photos.readParams(abstractSerializedData, z);
            }
            return com_hanista_mobogram_tgnet_TLRPC_photos_Photos;
        }
    }

    public static class TL_photos_photos extends photos_Photos {
        public static int constructor;

        static {
            constructor = -1916114267;
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            int i = 0;
            int readInt32 = abstractSerializedData.readInt32(z);
            Object[] objArr;
            if (readInt32 == 481674261) {
                int readInt322 = abstractSerializedData.readInt32(z);
                readInt32 = 0;
                while (readInt32 < readInt322) {
                    Photo TLdeserialize = Photo.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
                    if (TLdeserialize != null) {
                        this.photos.add(TLdeserialize);
                        readInt32 += TLRPC.USER_FLAG_ACCESS_HASH;
                    } else {
                        return;
                    }
                }
                readInt32 = abstractSerializedData.readInt32(z);
                if (readInt32 == 481674261) {
                    readInt32 = abstractSerializedData.readInt32(z);
                    while (i < readInt32) {
                        User TLdeserialize2 = User.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
                        if (TLdeserialize2 != null) {
                            this.users.add(TLdeserialize2);
                            i += TLRPC.USER_FLAG_ACCESS_HASH;
                        } else {
                            return;
                        }
                    }
                } else if (z) {
                    objArr = new Object[TLRPC.USER_FLAG_ACCESS_HASH];
                    objArr[0] = Integer.valueOf(readInt32);
                    throw new RuntimeException(String.format("wrong Vector magic, got %x", objArr));
                }
            } else if (z) {
                objArr = new Object[TLRPC.USER_FLAG_ACCESS_HASH];
                objArr[0] = Integer.valueOf(readInt32);
                throw new RuntimeException(String.format("wrong Vector magic, got %x", objArr));
            }
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            int i;
            int i2 = 0;
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(481674261);
            int size = this.photos.size();
            abstractSerializedData.writeInt32(size);
            for (i = 0; i < size; i += TLRPC.USER_FLAG_ACCESS_HASH) {
                ((Photo) this.photos.get(i)).serializeToStream(abstractSerializedData);
            }
            abstractSerializedData.writeInt32(481674261);
            i = this.users.size();
            abstractSerializedData.writeInt32(i);
            while (i2 < i) {
                ((User) this.users.get(i2)).serializeToStream(abstractSerializedData);
                i2 += TLRPC.USER_FLAG_ACCESS_HASH;
            }
        }
    }

    public static class TL_photos_photosSlice extends photos_Photos {
        public static int constructor;

        static {
            constructor = 352657236;
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            int i = 0;
            this.count = abstractSerializedData.readInt32(z);
            int readInt32 = abstractSerializedData.readInt32(z);
            Object[] objArr;
            if (readInt32 == 481674261) {
                int readInt322 = abstractSerializedData.readInt32(z);
                readInt32 = 0;
                while (readInt32 < readInt322) {
                    Photo TLdeserialize = Photo.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
                    if (TLdeserialize != null) {
                        this.photos.add(TLdeserialize);
                        readInt32 += TLRPC.USER_FLAG_ACCESS_HASH;
                    } else {
                        return;
                    }
                }
                readInt32 = abstractSerializedData.readInt32(z);
                if (readInt32 == 481674261) {
                    readInt32 = abstractSerializedData.readInt32(z);
                    while (i < readInt32) {
                        User TLdeserialize2 = User.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
                        if (TLdeserialize2 != null) {
                            this.users.add(TLdeserialize2);
                            i += TLRPC.USER_FLAG_ACCESS_HASH;
                        } else {
                            return;
                        }
                    }
                } else if (z) {
                    objArr = new Object[TLRPC.USER_FLAG_ACCESS_HASH];
                    objArr[0] = Integer.valueOf(readInt32);
                    throw new RuntimeException(String.format("wrong Vector magic, got %x", objArr));
                }
            } else if (z) {
                objArr = new Object[TLRPC.USER_FLAG_ACCESS_HASH];
                objArr[0] = Integer.valueOf(readInt32);
                throw new RuntimeException(String.format("wrong Vector magic, got %x", objArr));
            }
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            int i;
            int i2 = 0;
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.count);
            abstractSerializedData.writeInt32(481674261);
            int size = this.photos.size();
            abstractSerializedData.writeInt32(size);
            for (i = 0; i < size; i += TLRPC.USER_FLAG_ACCESS_HASH) {
                ((Photo) this.photos.get(i)).serializeToStream(abstractSerializedData);
            }
            abstractSerializedData.writeInt32(481674261);
            i = this.users.size();
            abstractSerializedData.writeInt32(i);
            while (i2 < i) {
                ((User) this.users.get(i2)).serializeToStream(abstractSerializedData);
                i2 += TLRPC.USER_FLAG_ACCESS_HASH;
            }
        }
    }

    public static class TL_photos_updateProfilePhoto extends TLObject {
        public static int constructor;
        public InputPhoto id;

        static {
            constructor = -256159406;
        }

        public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            return UserProfilePhoto.TLdeserialize(abstractSerializedData, i, z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.id.serializeToStream(abstractSerializedData);
        }
    }

    public static class TL_photos_uploadProfilePhoto extends TLObject {
        public static int constructor;
        public InputFile file;

        static {
            constructor = 1328726168;
        }

        public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            return TL_photos_photo.TLdeserialize(abstractSerializedData, i, z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.file.serializeToStream(abstractSerializedData);
        }
    }

    public static class TL_privacyKeyChatInvite extends PrivacyKey {
        public static int constructor;

        static {
            constructor = 1343122938;
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
        }
    }

    public static class TL_privacyKeyStatusTimestamp extends PrivacyKey {
        public static int constructor;

        static {
            constructor = -1137792208;
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
        }
    }

    public static class TL_privacyValueAllowAll extends PrivacyRule {
        public static int constructor;

        static {
            constructor = 1698855810;
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
        }
    }

    public static class TL_privacyValueAllowContacts extends PrivacyRule {
        public static int constructor;

        static {
            constructor = -123988;
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
        }
    }

    public static class TL_privacyValueAllowUsers extends PrivacyRule {
        public static int constructor;

        static {
            constructor = 1297858060;
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            int i = 0;
            int readInt32 = abstractSerializedData.readInt32(z);
            if (readInt32 == 481674261) {
                readInt32 = abstractSerializedData.readInt32(z);
                while (i < readInt32) {
                    this.users.add(Integer.valueOf(abstractSerializedData.readInt32(z)));
                    i += TLRPC.USER_FLAG_ACCESS_HASH;
                }
            } else if (z) {
                Object[] objArr = new Object[TLRPC.USER_FLAG_ACCESS_HASH];
                objArr[0] = Integer.valueOf(readInt32);
                throw new RuntimeException(String.format("wrong Vector magic, got %x", objArr));
            }
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(481674261);
            int size = this.users.size();
            abstractSerializedData.writeInt32(size);
            for (int i = 0; i < size; i += TLRPC.USER_FLAG_ACCESS_HASH) {
                abstractSerializedData.writeInt32(((Integer) this.users.get(i)).intValue());
            }
        }
    }

    public static class TL_privacyValueDisallowAll extends PrivacyRule {
        public static int constructor;

        static {
            constructor = -1955338397;
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
        }
    }

    public static class TL_privacyValueDisallowContacts extends PrivacyRule {
        public static int constructor;

        static {
            constructor = -125240806;
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
        }
    }

    public static class TL_privacyValueDisallowUsers extends PrivacyRule {
        public static int constructor;

        static {
            constructor = 209668535;
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            int i = 0;
            int readInt32 = abstractSerializedData.readInt32(z);
            if (readInt32 == 481674261) {
                readInt32 = abstractSerializedData.readInt32(z);
                while (i < readInt32) {
                    this.users.add(Integer.valueOf(abstractSerializedData.readInt32(z)));
                    i += TLRPC.USER_FLAG_ACCESS_HASH;
                }
            } else if (z) {
                Object[] objArr = new Object[TLRPC.USER_FLAG_ACCESS_HASH];
                objArr[0] = Integer.valueOf(readInt32);
                throw new RuntimeException(String.format("wrong Vector magic, got %x", objArr));
            }
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(481674261);
            int size = this.users.size();
            abstractSerializedData.writeInt32(size);
            for (int i = 0; i < size; i += TLRPC.USER_FLAG_ACCESS_HASH) {
                abstractSerializedData.writeInt32(((Integer) this.users.get(i)).intValue());
            }
        }
    }

    public static class TL_receivedNotifyMessage extends TLObject {
        public static int constructor;
        public int flags;
        public int id;

        static {
            constructor = -1551583367;
        }

        public static TL_receivedNotifyMessage TLdeserialize(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            if (constructor == i) {
                TL_receivedNotifyMessage tL_receivedNotifyMessage = new TL_receivedNotifyMessage();
                tL_receivedNotifyMessage.readParams(abstractSerializedData, z);
                return tL_receivedNotifyMessage;
            } else if (!z) {
                return null;
            } else {
                Object[] objArr = new Object[TLRPC.USER_FLAG_ACCESS_HASH];
                objArr[0] = Integer.valueOf(i);
                throw new RuntimeException(String.format("can't parse magic %x in TL_receivedNotifyMessage", objArr));
            }
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.id = abstractSerializedData.readInt32(z);
            this.flags = abstractSerializedData.readInt32(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.id);
            abstractSerializedData.writeInt32(this.flags);
        }
    }

    public static class TL_replyInlineMarkup extends ReplyMarkup {
        public static int constructor;

        static {
            constructor = 1218642516;
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            int i = 0;
            int readInt32 = abstractSerializedData.readInt32(z);
            if (readInt32 == 481674261) {
                readInt32 = abstractSerializedData.readInt32(z);
                while (i < readInt32) {
                    TL_keyboardButtonRow TLdeserialize = TL_keyboardButtonRow.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
                    if (TLdeserialize != null) {
                        this.rows.add(TLdeserialize);
                        i += TLRPC.USER_FLAG_ACCESS_HASH;
                    } else {
                        return;
                    }
                }
            } else if (z) {
                Object[] objArr = new Object[TLRPC.USER_FLAG_ACCESS_HASH];
                objArr[0] = Integer.valueOf(readInt32);
                throw new RuntimeException(String.format("wrong Vector magic, got %x", objArr));
            }
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(481674261);
            int size = this.rows.size();
            abstractSerializedData.writeInt32(size);
            for (int i = 0; i < size; i += TLRPC.USER_FLAG_ACCESS_HASH) {
                ((TL_keyboardButtonRow) this.rows.get(i)).serializeToStream(abstractSerializedData);
            }
        }
    }

    public static class TL_replyKeyboardForceReply extends ReplyMarkup {
        public static int constructor;

        static {
            constructor = -200242528;
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            boolean z2 = true;
            this.flags = abstractSerializedData.readInt32(z);
            this.single_use = (this.flags & TLRPC.USER_FLAG_FIRST_NAME) != 0;
            if ((this.flags & TLRPC.USER_FLAG_LAST_NAME) == 0) {
                z2 = false;
            }
            this.selective = z2;
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.flags = this.single_use ? this.flags | TLRPC.USER_FLAG_FIRST_NAME : this.flags & -3;
            this.flags = this.selective ? this.flags | TLRPC.USER_FLAG_LAST_NAME : this.flags & -5;
            abstractSerializedData.writeInt32(this.flags);
        }
    }

    public static class TL_replyKeyboardHide extends ReplyMarkup {
        public static int constructor;

        static {
            constructor = -1606526075;
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.flags = abstractSerializedData.readInt32(z);
            this.selective = (this.flags & TLRPC.USER_FLAG_LAST_NAME) != 0;
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.flags = this.selective ? this.flags | TLRPC.USER_FLAG_LAST_NAME : this.flags & -5;
            abstractSerializedData.writeInt32(this.flags);
        }
    }

    public static class TL_replyKeyboardMarkup extends ReplyMarkup {
        public static int constructor;

        static {
            constructor = 889353612;
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            int i = 0;
            this.flags = abstractSerializedData.readInt32(z);
            this.resize = (this.flags & TLRPC.USER_FLAG_ACCESS_HASH) != 0;
            this.single_use = (this.flags & TLRPC.USER_FLAG_FIRST_NAME) != 0;
            this.selective = (this.flags & TLRPC.USER_FLAG_LAST_NAME) != 0;
            int readInt32 = abstractSerializedData.readInt32(z);
            if (readInt32 == 481674261) {
                readInt32 = abstractSerializedData.readInt32(z);
                while (i < readInt32) {
                    TL_keyboardButtonRow TLdeserialize = TL_keyboardButtonRow.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
                    if (TLdeserialize != null) {
                        this.rows.add(TLdeserialize);
                        i += TLRPC.USER_FLAG_ACCESS_HASH;
                    } else {
                        return;
                    }
                }
            } else if (z) {
                Object[] objArr = new Object[TLRPC.USER_FLAG_ACCESS_HASH];
                objArr[0] = Integer.valueOf(readInt32);
                throw new RuntimeException(String.format("wrong Vector magic, got %x", objArr));
            }
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.flags = this.resize ? this.flags | TLRPC.USER_FLAG_ACCESS_HASH : this.flags & -2;
            this.flags = this.single_use ? this.flags | TLRPC.USER_FLAG_FIRST_NAME : this.flags & -3;
            this.flags = this.selective ? this.flags | TLRPC.USER_FLAG_LAST_NAME : this.flags & -5;
            abstractSerializedData.writeInt32(this.flags);
            abstractSerializedData.writeInt32(481674261);
            int size = this.rows.size();
            abstractSerializedData.writeInt32(size);
            for (int i = 0; i < size; i += TLRPC.USER_FLAG_ACCESS_HASH) {
                ((TL_keyboardButtonRow) this.rows.get(i)).serializeToStream(abstractSerializedData);
            }
        }
    }

    public static class TL_sendMessageCancelAction extends SendMessageAction {
        public static int constructor;

        static {
            constructor = -44119819;
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
        }
    }

    public static class TL_sendMessageChooseContactAction extends SendMessageAction {
        public static int constructor;

        static {
            constructor = 1653390447;
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
        }
    }

    public static class TL_sendMessageGamePlayAction extends SendMessageAction {
        public static int constructor;

        static {
            constructor = -580219064;
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
        }
    }

    public static class TL_sendMessageGameStopAction extends SendMessageAction {
        public static int constructor;

        static {
            constructor = 365087130;
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
        }
    }

    public static class TL_sendMessageGeoLocationAction extends SendMessageAction {
        public static int constructor;

        static {
            constructor = 393186209;
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
        }
    }

    public static class TL_sendMessageRecordAudioAction extends SendMessageAction {
        public static int constructor;

        static {
            constructor = -718310409;
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
        }
    }

    public static class TL_sendMessageRecordVideoAction extends SendMessageAction {
        public static int constructor;

        static {
            constructor = -1584933265;
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
        }
    }

    public static class TL_sendMessageTypingAction extends SendMessageAction {
        public static int constructor;

        static {
            constructor = 381645902;
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
        }
    }

    public static class TL_sendMessageUploadAudioAction extends SendMessageAction {
        public static int constructor;

        static {
            constructor = -212740181;
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.progress = abstractSerializedData.readInt32(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.progress);
        }
    }

    public static class TL_sendMessageUploadAudioAction_old extends TL_sendMessageUploadAudioAction {
        public static int constructor;

        static {
            constructor = -424899985;
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
        }
    }

    public static class TL_sendMessageUploadDocumentAction extends SendMessageAction {
        public static int constructor;

        static {
            constructor = -1441998364;
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.progress = abstractSerializedData.readInt32(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.progress);
        }
    }

    public static class TL_sendMessageUploadDocumentAction_old extends TL_sendMessageUploadDocumentAction {
        public static int constructor;

        static {
            constructor = -1884362354;
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
        }
    }

    public static class TL_sendMessageUploadPhotoAction extends SendMessageAction {
        public static int constructor;

        static {
            constructor = -774682074;
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.progress = abstractSerializedData.readInt32(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.progress);
        }
    }

    public static class TL_sendMessageUploadPhotoAction_old extends TL_sendMessageUploadPhotoAction {
        public static int constructor;

        static {
            constructor = -1727382502;
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
        }
    }

    public static class TL_sendMessageUploadVideoAction extends SendMessageAction {
        public static int constructor;

        static {
            constructor = -378127636;
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.progress = abstractSerializedData.readInt32(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.progress);
        }
    }

    public static class TL_sendMessageUploadVideoAction_old extends TL_sendMessageUploadVideoAction {
        public static int constructor;

        static {
            constructor = -1845219337;
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
        }
    }

    public static class TL_stickerPack extends TLObject {
        public static int constructor;
        public ArrayList<Long> documents;
        public String emoticon;

        static {
            constructor = 313694676;
        }

        public TL_stickerPack() {
            this.documents = new ArrayList();
        }

        public static TL_stickerPack TLdeserialize(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            if (constructor == i) {
                TL_stickerPack tL_stickerPack = new TL_stickerPack();
                tL_stickerPack.readParams(abstractSerializedData, z);
                return tL_stickerPack;
            } else if (!z) {
                return null;
            } else {
                Object[] objArr = new Object[TLRPC.USER_FLAG_ACCESS_HASH];
                objArr[0] = Integer.valueOf(i);
                throw new RuntimeException(String.format("can't parse magic %x in TL_stickerPack", objArr));
            }
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            int i = 0;
            this.emoticon = abstractSerializedData.readString(z);
            int readInt32 = abstractSerializedData.readInt32(z);
            if (readInt32 == 481674261) {
                readInt32 = abstractSerializedData.readInt32(z);
                while (i < readInt32) {
                    this.documents.add(Long.valueOf(abstractSerializedData.readInt64(z)));
                    i += TLRPC.USER_FLAG_ACCESS_HASH;
                }
            } else if (z) {
                Object[] objArr = new Object[TLRPC.USER_FLAG_ACCESS_HASH];
                objArr[0] = Integer.valueOf(readInt32);
                throw new RuntimeException(String.format("wrong Vector magic, got %x", objArr));
            }
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeString(this.emoticon);
            abstractSerializedData.writeInt32(481674261);
            int size = this.documents.size();
            abstractSerializedData.writeInt32(size);
            for (int i = 0; i < size; i += TLRPC.USER_FLAG_ACCESS_HASH) {
                abstractSerializedData.writeInt64(((Long) this.documents.get(i)).longValue());
            }
        }
    }

    public static class TL_stickerSet extends StickerSet {
        public static int constructor;

        static {
            constructor = -852477119;
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            boolean z2 = true;
            this.flags = abstractSerializedData.readInt32(z);
            this.installed = (this.flags & TLRPC.USER_FLAG_ACCESS_HASH) != 0;
            this.archived = (this.flags & TLRPC.USER_FLAG_FIRST_NAME) != 0;
            this.official = (this.flags & TLRPC.USER_FLAG_LAST_NAME) != 0;
            if ((this.flags & TLRPC.USER_FLAG_USERNAME) == 0) {
                z2 = false;
            }
            this.masks = z2;
            this.id = abstractSerializedData.readInt64(z);
            this.access_hash = abstractSerializedData.readInt64(z);
            this.title = abstractSerializedData.readString(z);
            this.short_name = abstractSerializedData.readString(z);
            this.count = abstractSerializedData.readInt32(z);
            this.hash = abstractSerializedData.readInt32(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.flags = this.installed ? this.flags | TLRPC.USER_FLAG_ACCESS_HASH : this.flags & -2;
            this.flags = this.archived ? this.flags | TLRPC.USER_FLAG_FIRST_NAME : this.flags & -3;
            this.flags = this.official ? this.flags | TLRPC.USER_FLAG_LAST_NAME : this.flags & -5;
            this.flags = this.masks ? this.flags | TLRPC.USER_FLAG_USERNAME : this.flags & -9;
            abstractSerializedData.writeInt32(this.flags);
            abstractSerializedData.writeInt64(this.id);
            abstractSerializedData.writeInt64(this.access_hash);
            abstractSerializedData.writeString(this.title);
            abstractSerializedData.writeString(this.short_name);
            abstractSerializedData.writeInt32(this.count);
            abstractSerializedData.writeInt32(this.hash);
        }
    }

    public static class TL_stickerSetCovered extends StickerSetCovered {
        public static int constructor;

        static {
            constructor = 1678812626;
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.set = StickerSet.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
            this.cover = Document.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.set.serializeToStream(abstractSerializedData);
            this.cover.serializeToStream(abstractSerializedData);
        }
    }

    public static class TL_stickerSetMultiCovered extends StickerSetCovered {
        public static int constructor;

        static {
            constructor = 872932635;
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            int i = 0;
            this.set = StickerSet.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
            int readInt32 = abstractSerializedData.readInt32(z);
            if (readInt32 == 481674261) {
                readInt32 = abstractSerializedData.readInt32(z);
                while (i < readInt32) {
                    Document TLdeserialize = Document.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
                    if (TLdeserialize != null) {
                        this.covers.add(TLdeserialize);
                        i += TLRPC.USER_FLAG_ACCESS_HASH;
                    } else {
                        return;
                    }
                }
            } else if (z) {
                Object[] objArr = new Object[TLRPC.USER_FLAG_ACCESS_HASH];
                objArr[0] = Integer.valueOf(readInt32);
                throw new RuntimeException(String.format("wrong Vector magic, got %x", objArr));
            }
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.set.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeInt32(481674261);
            int size = this.covers.size();
            abstractSerializedData.writeInt32(size);
            for (int i = 0; i < size; i += TLRPC.USER_FLAG_ACCESS_HASH) {
                ((Document) this.covers.get(i)).serializeToStream(abstractSerializedData);
            }
        }
    }

    public static class TL_stickerSet_old extends TL_stickerSet {
        public static int constructor;

        static {
            constructor = -1482409193;
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.id = abstractSerializedData.readInt64(z);
            this.access_hash = abstractSerializedData.readInt64(z);
            this.title = abstractSerializedData.readString(z);
            this.short_name = abstractSerializedData.readString(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt64(this.id);
            abstractSerializedData.writeInt64(this.access_hash);
            abstractSerializedData.writeString(this.title);
            abstractSerializedData.writeString(this.short_name);
        }
    }

    public static class storage_FileType extends TLObject {
        public static storage_FileType TLdeserialize(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            storage_FileType com_hanista_mobogram_tgnet_TLRPC_storage_FileType = null;
            switch (i) {
                case -1432995067:
                    com_hanista_mobogram_tgnet_TLRPC_storage_FileType = new TL_storage_fileUnknown();
                    break;
                case -1373745011:
                    com_hanista_mobogram_tgnet_TLRPC_storage_FileType = new TL_storage_filePdf();
                    break;
                case -1278304028:
                    com_hanista_mobogram_tgnet_TLRPC_storage_FileType = new TL_storage_fileMp4();
                    break;
                case -891180321:
                    com_hanista_mobogram_tgnet_TLRPC_storage_FileType = new TL_storage_fileGif();
                    break;
                case 8322574:
                    com_hanista_mobogram_tgnet_TLRPC_storage_FileType = new TL_storage_fileJpeg();
                    break;
                case 172975040:
                    com_hanista_mobogram_tgnet_TLRPC_storage_FileType = new TL_storage_filePng();
                    break;
                case 276907596:
                    com_hanista_mobogram_tgnet_TLRPC_storage_FileType = new TL_storage_fileWebp();
                    break;
                case 1086091090:
                    com_hanista_mobogram_tgnet_TLRPC_storage_FileType = new TL_storage_filePartial();
                    break;
                case 1258941372:
                    com_hanista_mobogram_tgnet_TLRPC_storage_FileType = new TL_storage_fileMov();
                    break;
                case 1384777335:
                    com_hanista_mobogram_tgnet_TLRPC_storage_FileType = new TL_storage_fileMp3();
                    break;
            }
            if (com_hanista_mobogram_tgnet_TLRPC_storage_FileType == null && z) {
                Object[] objArr = new Object[TLRPC.USER_FLAG_ACCESS_HASH];
                objArr[0] = Integer.valueOf(i);
                throw new RuntimeException(String.format("can't parse magic %x in storage_FileType", objArr));
            }
            if (com_hanista_mobogram_tgnet_TLRPC_storage_FileType != null) {
                com_hanista_mobogram_tgnet_TLRPC_storage_FileType.readParams(abstractSerializedData, z);
            }
            return com_hanista_mobogram_tgnet_TLRPC_storage_FileType;
        }
    }

    public static class TL_storage_fileGif extends storage_FileType {
        public static int constructor;

        static {
            constructor = -891180321;
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
        }
    }

    public static class TL_storage_fileJpeg extends storage_FileType {
        public static int constructor;

        static {
            constructor = 8322574;
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
        }
    }

    public static class TL_storage_fileMov extends storage_FileType {
        public static int constructor;

        static {
            constructor = 1258941372;
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
        }
    }

    public static class TL_storage_fileMp3 extends storage_FileType {
        public static int constructor;

        static {
            constructor = 1384777335;
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
        }
    }

    public static class TL_storage_fileMp4 extends storage_FileType {
        public static int constructor;

        static {
            constructor = -1278304028;
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
        }
    }

    public static class TL_storage_filePartial extends storage_FileType {
        public static int constructor;

        static {
            constructor = 1086091090;
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
        }
    }

    public static class TL_storage_filePdf extends storage_FileType {
        public static int constructor;

        static {
            constructor = -1373745011;
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
        }
    }

    public static class TL_storage_filePng extends storage_FileType {
        public static int constructor;

        static {
            constructor = 172975040;
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
        }
    }

    public static class TL_storage_fileUnknown extends storage_FileType {
        public static int constructor;

        static {
            constructor = -1432995067;
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
        }
    }

    public static class TL_storage_fileWebp extends storage_FileType {
        public static int constructor;

        static {
            constructor = 276907596;
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
        }
    }

    public static class TL_topPeer extends TLObject {
        public static int constructor;
        public Peer peer;
        public double rating;

        static {
            constructor = -305282981;
        }

        public static TL_topPeer TLdeserialize(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            if (constructor == i) {
                TL_topPeer tL_topPeer = new TL_topPeer();
                tL_topPeer.readParams(abstractSerializedData, z);
                return tL_topPeer;
            } else if (!z) {
                return null;
            } else {
                Object[] objArr = new Object[TLRPC.USER_FLAG_ACCESS_HASH];
                objArr[0] = Integer.valueOf(i);
                throw new RuntimeException(String.format("can't parse magic %x in TL_topPeer", objArr));
            }
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.peer = Peer.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
            this.rating = abstractSerializedData.readDouble(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.peer.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeDouble(this.rating);
        }
    }

    public static class TopPeerCategory extends TLObject {
        public static TopPeerCategory TLdeserialize(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            TopPeerCategory topPeerCategory = null;
            switch (i) {
                case -1419371685:
                    topPeerCategory = new TL_topPeerCategoryBotsPM();
                    break;
                case -1122524854:
                    topPeerCategory = new TL_topPeerCategoryGroups();
                    break;
                case 104314861:
                    topPeerCategory = new TL_topPeerCategoryCorrespondents();
                    break;
                case 344356834:
                    topPeerCategory = new TL_topPeerCategoryBotsInline();
                    break;
                case 371037736:
                    topPeerCategory = new TL_topPeerCategoryChannels();
                    break;
            }
            if (topPeerCategory == null && z) {
                Object[] objArr = new Object[TLRPC.USER_FLAG_ACCESS_HASH];
                objArr[0] = Integer.valueOf(i);
                throw new RuntimeException(String.format("can't parse magic %x in TopPeerCategory", objArr));
            }
            if (topPeerCategory != null) {
                topPeerCategory.readParams(abstractSerializedData, z);
            }
            return topPeerCategory;
        }
    }

    public static class TL_topPeerCategoryBotsInline extends TopPeerCategory {
        public static int constructor;

        static {
            constructor = 344356834;
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
        }
    }

    public static class TL_topPeerCategoryBotsPM extends TopPeerCategory {
        public static int constructor;

        static {
            constructor = -1419371685;
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
        }
    }

    public static class TL_topPeerCategoryChannels extends TopPeerCategory {
        public static int constructor;

        static {
            constructor = 371037736;
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
        }
    }

    public static class TL_topPeerCategoryCorrespondents extends TopPeerCategory {
        public static int constructor;

        static {
            constructor = 104314861;
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
        }
    }

    public static class TL_topPeerCategoryGroups extends TopPeerCategory {
        public static int constructor;

        static {
            constructor = -1122524854;
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
        }
    }

    public static class TL_topPeerCategoryPeers extends TLObject {
        public static int constructor;
        public TopPeerCategory category;
        public int count;
        public ArrayList<TL_topPeer> peers;

        static {
            constructor = -75283823;
        }

        public TL_topPeerCategoryPeers() {
            this.peers = new ArrayList();
        }

        public static TL_topPeerCategoryPeers TLdeserialize(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            if (constructor == i) {
                TL_topPeerCategoryPeers tL_topPeerCategoryPeers = new TL_topPeerCategoryPeers();
                tL_topPeerCategoryPeers.readParams(abstractSerializedData, z);
                return tL_topPeerCategoryPeers;
            } else if (!z) {
                return null;
            } else {
                Object[] objArr = new Object[TLRPC.USER_FLAG_ACCESS_HASH];
                objArr[0] = Integer.valueOf(i);
                throw new RuntimeException(String.format("can't parse magic %x in TL_topPeerCategoryPeers", objArr));
            }
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            int i = 0;
            this.category = TopPeerCategory.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
            this.count = abstractSerializedData.readInt32(z);
            int readInt32 = abstractSerializedData.readInt32(z);
            if (readInt32 == 481674261) {
                readInt32 = abstractSerializedData.readInt32(z);
                while (i < readInt32) {
                    TL_topPeer TLdeserialize = TL_topPeer.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
                    if (TLdeserialize != null) {
                        this.peers.add(TLdeserialize);
                        i += TLRPC.USER_FLAG_ACCESS_HASH;
                    } else {
                        return;
                    }
                }
            } else if (z) {
                Object[] objArr = new Object[TLRPC.USER_FLAG_ACCESS_HASH];
                objArr[0] = Integer.valueOf(readInt32);
                throw new RuntimeException(String.format("wrong Vector magic, got %x", objArr));
            }
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.category.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeInt32(this.count);
            abstractSerializedData.writeInt32(481674261);
            int size = this.peers.size();
            abstractSerializedData.writeInt32(size);
            for (int i = 0; i < size; i += TLRPC.USER_FLAG_ACCESS_HASH) {
                ((TL_topPeer) this.peers.get(i)).serializeToStream(abstractSerializedData);
            }
        }
    }

    public static class Update extends TLObject {
        public SendMessageAction action;
        public long auth_key_id;
        public boolean blocked;
        public int channel_id;
        public EncryptedChat chat;
        public int chat_id;
        public long chat_instance;
        public byte[] data;
        public int date;
        public ArrayList<TL_dcOption> dc_options;
        public String device;
        public DraftMessage draft;
        public boolean enabled;
        public String first_name;
        public int flags;
        public ContactLink foreign_link;
        public String game_short_name;
        public GeoPoint geo;
        public int inviter_id;
        public boolean is_admin;
        public PrivacyKey key;
        public String last_name;
        public String location;
        public boolean masks;
        public int max_date;
        public int max_id;
        public MessageMedia media;
        public ArrayList<Integer> messages;
        public ContactLink my_link;
        public PeerNotifySettings notify_settings;
        public String offset;
        public ArrayList<Long> order;
        public ChatParticipants participants;
        public String phone;
        public UserProfilePhoto photo;
        public boolean popup;
        public boolean previous;
        public int pts;
        public int pts_count;
        public int qts;
        public String query;
        public long query_id;
        public long random_id;
        public ArrayList<PrivacyRule> rules;
        public UserStatus status;
        public TL_messages_stickerSet stickerset;
        public String type;
        public int user_id;
        public String username;
        public int version;
        public int views;
        public WebPage webpage;

        public Update() {
            this.dc_options = new ArrayList();
            this.rules = new ArrayList();
            this.messages = new ArrayList();
            this.order = new ArrayList();
        }

        public static Update TLdeserialize(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            Update update = null;
            switch (i) {
                case -2131957734:
                    update = new TL_updateUserBlocked();
                    break;
                case -1906403213:
                    update = new TL_updateDcOptions();
                    break;
                case -1895411046:
                    update = new TL_updateNewAuthorization();
                    break;
                case -1821035490:
                    update = new TL_updateSavedGifs();
                    break;
                case -1791935732:
                    update = new TL_updateUserPhoto();
                    break;
                case -1738988427:
                    update = new TL_updateChannelPinnedMessage();
                    break;
                case -1734268085:
                    update = new TL_updateChannelMessageViews();
                    break;
                case -1721631396:
                    update = new TL_updateReadHistoryInbox();
                    break;
                case -1706939360:
                    update = new TL_updateRecentStickers();
                    break;
                case -1704596961:
                    update = new TL_updateChatUserTyping();
                    break;
                case -1657903163:
                    update = new TL_updateContactLink();
                    break;
                case -1576161051:
                    update = new TL_updateDeleteMessages();
                    break;
                case -1574314746:
                    update = new TL_updateConfig();
                    break;
                case -1489818765:
                    update = new TL_updateUserName();
                    break;
                case -1264392051:
                    update = new TL_updateEncryption();
                    break;
                case -1232070311:
                    update = new TL_updateChatParticipantAdmin();
                    break;
                case -1227598250:
                    update = new TL_updateChannel();
                    break;
                case -1094555409:
                    update = new TL_updateNotifySettings();
                    break;
                case -1015733815:
                    update = new TL_updateDeleteChannelMessages();
                    break;
                case -469536605:
                    update = new TL_updateEditMessage();
                    break;
                case -415938591:
                    update = new TL_updateBotCallbackQuery();
                    break;
                case -364179876:
                    update = new TL_updateChatParticipantAdd();
                    break;
                case -352032773:
                    update = new TL_updateChannelTooLong();
                    break;
                case -299124375:
                    update = new TL_updateDraftMessage();
                    break;
                case -298113238:
                    update = new TL_updatePrivacy();
                    break;
                case -103646630:
                    update = new TL_updateInlineBotCallbackQuery();
                    break;
                case 125178264:
                    update = new TL_updateChatParticipants();
                    break;
                case 196268545:
                    update = new TL_updateStickerSetsOrder();
                    break;
                case 239663460:
                    update = new TL_updateBotInlineSend();
                    break;
                case 314130811:
                    update = new TL_updateUserPhone();
                    break;
                case 314359194:
                    update = new TL_updateNewEncryptedMessage();
                    break;
                case 386986326:
                    update = new TL_updateEncryptedChatTyping();
                    break;
                case 457133559:
                    update = new TL_updateEditChannelMessage();
                    break;
                case 469489699:
                    update = new TL_updateUserStatus();
                    break;
                case 522914557:
                    update = new TL_updateNewMessage();
                    break;
                case 628472761:
                    update = new TL_updateContactRegistered();
                    break;
                case 634833351:
                    update = new TL_updateReadChannelOutbox();
                    break;
                case 791617983:
                    update = new TL_updateReadHistoryOutbox();
                    break;
                case 861169551:
                    update = new TL_updatePtsChanged();
                    break;
                case 942527460:
                    update = new TL_updateServiceNotification();
                    break;
                case 956179895:
                    update = new TL_updateEncryptedMessagesRead();
                    break;
                case 1108669311:
                    update = new TL_updateReadChannelInbox();
                    break;
                case 1135492588:
                    update = new TL_updateStickerSets();
                    break;
                case 1318109142:
                    update = new TL_updateMessageID();
                    break;
                case 1417832080:
                    update = new TL_updateBotInlineQuery();
                    break;
                case 1461528386:
                    update = new TL_updateReadFeaturedStickers();
                    break;
                case 1516823543:
                    update = new TL_updateNewGeoChatMessage();
                    break;
                case 1548249383:
                    update = new TL_updateUserTyping();
                    break;
                case 1656358105:
                    update = new TL_updateNewChannelMessage();
                    break;
                case 1753886890:
                    update = new TL_updateNewStickerSet();
                    break;
                case 1757493555:
                    update = new TL_updateReadMessagesContents();
                    break;
                case 1851755554:
                    update = new TL_updateChatParticipantDelete();
                    break;
                case 1855224129:
                    update = new TL_updateChatAdmins();
                    break;
                case 2139689491:
                    update = new TL_updateWebPage();
                    break;
            }
            if (update == null && z) {
                Object[] objArr = new Object[TLRPC.USER_FLAG_ACCESS_HASH];
                objArr[0] = Integer.valueOf(i);
                throw new RuntimeException(String.format("can't parse magic %x in Update", objArr));
            }
            if (update != null) {
                update.readParams(abstractSerializedData, z);
            }
            return update;
        }
    }

    public static class TL_updateBotCallbackQuery extends Update {
        public static int constructor;
        public int msg_id;
        public Peer peer;

        static {
            constructor = -415938591;
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.flags = abstractSerializedData.readInt32(z);
            this.query_id = abstractSerializedData.readInt64(z);
            this.user_id = abstractSerializedData.readInt32(z);
            this.peer = Peer.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
            this.msg_id = abstractSerializedData.readInt32(z);
            this.chat_instance = abstractSerializedData.readInt64(z);
            if ((this.flags & TLRPC.USER_FLAG_ACCESS_HASH) != 0) {
                this.data = abstractSerializedData.readByteArray(z);
            }
            if ((this.flags & TLRPC.USER_FLAG_FIRST_NAME) != 0) {
                this.game_short_name = abstractSerializedData.readString(z);
            }
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.flags);
            abstractSerializedData.writeInt64(this.query_id);
            abstractSerializedData.writeInt32(this.user_id);
            this.peer.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeInt32(this.msg_id);
            abstractSerializedData.writeInt64(this.chat_instance);
            if ((this.flags & TLRPC.USER_FLAG_ACCESS_HASH) != 0) {
                abstractSerializedData.writeByteArray(this.data);
            }
            if ((this.flags & TLRPC.USER_FLAG_FIRST_NAME) != 0) {
                abstractSerializedData.writeString(this.game_short_name);
            }
        }
    }

    public static class TL_updateBotInlineQuery extends Update {
        public static int constructor;

        static {
            constructor = 1417832080;
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.flags = abstractSerializedData.readInt32(z);
            this.query_id = abstractSerializedData.readInt64(z);
            this.user_id = abstractSerializedData.readInt32(z);
            this.query = abstractSerializedData.readString(z);
            if ((this.flags & TLRPC.USER_FLAG_ACCESS_HASH) != 0) {
                this.geo = GeoPoint.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
            }
            this.offset = abstractSerializedData.readString(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.flags);
            abstractSerializedData.writeInt64(this.query_id);
            abstractSerializedData.writeInt32(this.user_id);
            abstractSerializedData.writeString(this.query);
            if ((this.flags & TLRPC.USER_FLAG_ACCESS_HASH) != 0) {
                this.geo.serializeToStream(abstractSerializedData);
            }
            abstractSerializedData.writeString(this.offset);
        }
    }

    public static class TL_updateBotInlineSend extends Update {
        public static int constructor;
        public String id;
        public TL_inputBotInlineMessageID msg_id;

        static {
            constructor = 239663460;
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.flags = abstractSerializedData.readInt32(z);
            this.user_id = abstractSerializedData.readInt32(z);
            this.query = abstractSerializedData.readString(z);
            if ((this.flags & TLRPC.USER_FLAG_ACCESS_HASH) != 0) {
                this.geo = GeoPoint.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
            }
            this.id = abstractSerializedData.readString(z);
            if ((this.flags & TLRPC.USER_FLAG_FIRST_NAME) != 0) {
                this.msg_id = TL_inputBotInlineMessageID.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
            }
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.flags);
            abstractSerializedData.writeInt32(this.user_id);
            abstractSerializedData.writeString(this.query);
            if ((this.flags & TLRPC.USER_FLAG_ACCESS_HASH) != 0) {
                this.geo.serializeToStream(abstractSerializedData);
            }
            abstractSerializedData.writeString(this.id);
            if ((this.flags & TLRPC.USER_FLAG_FIRST_NAME) != 0) {
                this.msg_id.serializeToStream(abstractSerializedData);
            }
        }
    }

    public static class TL_updateChannel extends Update {
        public static int constructor;

        static {
            constructor = -1227598250;
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.channel_id = abstractSerializedData.readInt32(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.channel_id);
        }
    }

    public static class TL_updateChannelMessageViews extends Update {
        public static int constructor;
        public int id;

        static {
            constructor = -1734268085;
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.channel_id = abstractSerializedData.readInt32(z);
            this.id = abstractSerializedData.readInt32(z);
            this.views = abstractSerializedData.readInt32(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.channel_id);
            abstractSerializedData.writeInt32(this.id);
            abstractSerializedData.writeInt32(this.views);
        }
    }

    public static class TL_updateChannelPinnedMessage extends Update {
        public static int constructor;
        public int id;

        static {
            constructor = -1738988427;
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.channel_id = abstractSerializedData.readInt32(z);
            this.id = abstractSerializedData.readInt32(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.channel_id);
            abstractSerializedData.writeInt32(this.id);
        }
    }

    public static class TL_updateChannelTooLong extends Update {
        public static int constructor;

        static {
            constructor = -352032773;
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.flags = abstractSerializedData.readInt32(z);
            this.channel_id = abstractSerializedData.readInt32(z);
            if ((this.flags & TLRPC.USER_FLAG_ACCESS_HASH) != 0) {
                this.pts = abstractSerializedData.readInt32(z);
            }
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.flags);
            abstractSerializedData.writeInt32(this.channel_id);
            if ((this.flags & TLRPC.USER_FLAG_ACCESS_HASH) != 0) {
                abstractSerializedData.writeInt32(this.pts);
            }
        }
    }

    public static class TL_updateChatAdmins extends Update {
        public static int constructor;

        static {
            constructor = 1855224129;
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.chat_id = abstractSerializedData.readInt32(z);
            this.enabled = abstractSerializedData.readBool(z);
            this.version = abstractSerializedData.readInt32(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.chat_id);
            abstractSerializedData.writeBool(this.enabled);
            abstractSerializedData.writeInt32(this.version);
        }
    }

    public static class TL_updateChatParticipantAdd extends Update {
        public static int constructor;

        static {
            constructor = -364179876;
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.chat_id = abstractSerializedData.readInt32(z);
            this.user_id = abstractSerializedData.readInt32(z);
            this.inviter_id = abstractSerializedData.readInt32(z);
            this.date = abstractSerializedData.readInt32(z);
            this.version = abstractSerializedData.readInt32(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.chat_id);
            abstractSerializedData.writeInt32(this.user_id);
            abstractSerializedData.writeInt32(this.inviter_id);
            abstractSerializedData.writeInt32(this.date);
            abstractSerializedData.writeInt32(this.version);
        }
    }

    public static class TL_updateChatParticipantAdmin extends Update {
        public static int constructor;

        static {
            constructor = -1232070311;
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.chat_id = abstractSerializedData.readInt32(z);
            this.user_id = abstractSerializedData.readInt32(z);
            this.is_admin = abstractSerializedData.readBool(z);
            this.version = abstractSerializedData.readInt32(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.chat_id);
            abstractSerializedData.writeInt32(this.user_id);
            abstractSerializedData.writeBool(this.is_admin);
            abstractSerializedData.writeInt32(this.version);
        }
    }

    public static class TL_updateChatParticipantDelete extends Update {
        public static int constructor;

        static {
            constructor = 1851755554;
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.chat_id = abstractSerializedData.readInt32(z);
            this.user_id = abstractSerializedData.readInt32(z);
            this.version = abstractSerializedData.readInt32(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.chat_id);
            abstractSerializedData.writeInt32(this.user_id);
            abstractSerializedData.writeInt32(this.version);
        }
    }

    public static class TL_updateChatParticipants extends Update {
        public static int constructor;

        static {
            constructor = 125178264;
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.participants = ChatParticipants.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.participants.serializeToStream(abstractSerializedData);
        }
    }

    public static class TL_updateChatUserTyping extends Update {
        public static int constructor;

        static {
            constructor = -1704596961;
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.chat_id = abstractSerializedData.readInt32(z);
            this.user_id = abstractSerializedData.readInt32(z);
            this.action = SendMessageAction.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.chat_id);
            abstractSerializedData.writeInt32(this.user_id);
            this.action.serializeToStream(abstractSerializedData);
        }
    }

    public static class TL_updateConfig extends Update {
        public static int constructor;

        static {
            constructor = -1574314746;
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
        }
    }

    public static class TL_updateContactLink extends Update {
        public static int constructor;

        static {
            constructor = -1657903163;
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.user_id = abstractSerializedData.readInt32(z);
            this.my_link = ContactLink.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
            this.foreign_link = ContactLink.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.user_id);
            this.my_link.serializeToStream(abstractSerializedData);
            this.foreign_link.serializeToStream(abstractSerializedData);
        }
    }

    public static class TL_updateContactRegistered extends Update {
        public static int constructor;

        static {
            constructor = 628472761;
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.user_id = abstractSerializedData.readInt32(z);
            this.date = abstractSerializedData.readInt32(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.user_id);
            abstractSerializedData.writeInt32(this.date);
        }
    }

    public static class TL_updateDcOptions extends Update {
        public static int constructor;

        static {
            constructor = -1906403213;
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            int i = 0;
            int readInt32 = abstractSerializedData.readInt32(z);
            if (readInt32 == 481674261) {
                readInt32 = abstractSerializedData.readInt32(z);
                while (i < readInt32) {
                    TL_dcOption TLdeserialize = TL_dcOption.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
                    if (TLdeserialize != null) {
                        this.dc_options.add(TLdeserialize);
                        i += TLRPC.USER_FLAG_ACCESS_HASH;
                    } else {
                        return;
                    }
                }
            } else if (z) {
                Object[] objArr = new Object[TLRPC.USER_FLAG_ACCESS_HASH];
                objArr[0] = Integer.valueOf(readInt32);
                throw new RuntimeException(String.format("wrong Vector magic, got %x", objArr));
            }
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(481674261);
            int size = this.dc_options.size();
            abstractSerializedData.writeInt32(size);
            for (int i = 0; i < size; i += TLRPC.USER_FLAG_ACCESS_HASH) {
                ((TL_dcOption) this.dc_options.get(i)).serializeToStream(abstractSerializedData);
            }
        }
    }

    public static class TL_updateDeleteChannelMessages extends Update {
        public static int constructor;

        static {
            constructor = -1015733815;
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            int i = 0;
            this.channel_id = abstractSerializedData.readInt32(z);
            int readInt32 = abstractSerializedData.readInt32(z);
            if (readInt32 == 481674261) {
                readInt32 = abstractSerializedData.readInt32(z);
                while (i < readInt32) {
                    this.messages.add(Integer.valueOf(abstractSerializedData.readInt32(z)));
                    i += TLRPC.USER_FLAG_ACCESS_HASH;
                }
                this.pts = abstractSerializedData.readInt32(z);
                this.pts_count = abstractSerializedData.readInt32(z);
            } else if (z) {
                Object[] objArr = new Object[TLRPC.USER_FLAG_ACCESS_HASH];
                objArr[0] = Integer.valueOf(readInt32);
                throw new RuntimeException(String.format("wrong Vector magic, got %x", objArr));
            }
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.channel_id);
            abstractSerializedData.writeInt32(481674261);
            int size = this.messages.size();
            abstractSerializedData.writeInt32(size);
            for (int i = 0; i < size; i += TLRPC.USER_FLAG_ACCESS_HASH) {
                abstractSerializedData.writeInt32(((Integer) this.messages.get(i)).intValue());
            }
            abstractSerializedData.writeInt32(this.pts);
            abstractSerializedData.writeInt32(this.pts_count);
        }
    }

    public static class TL_updateDeleteMessages extends Update {
        public static int constructor;

        static {
            constructor = -1576161051;
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            int i = 0;
            int readInt32 = abstractSerializedData.readInt32(z);
            if (readInt32 == 481674261) {
                readInt32 = abstractSerializedData.readInt32(z);
                while (i < readInt32) {
                    this.messages.add(Integer.valueOf(abstractSerializedData.readInt32(z)));
                    i += TLRPC.USER_FLAG_ACCESS_HASH;
                }
                this.pts = abstractSerializedData.readInt32(z);
                this.pts_count = abstractSerializedData.readInt32(z);
            } else if (z) {
                Object[] objArr = new Object[TLRPC.USER_FLAG_ACCESS_HASH];
                objArr[0] = Integer.valueOf(readInt32);
                throw new RuntimeException(String.format("wrong Vector magic, got %x", objArr));
            }
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(481674261);
            int size = this.messages.size();
            abstractSerializedData.writeInt32(size);
            for (int i = 0; i < size; i += TLRPC.USER_FLAG_ACCESS_HASH) {
                abstractSerializedData.writeInt32(((Integer) this.messages.get(i)).intValue());
            }
            abstractSerializedData.writeInt32(this.pts);
            abstractSerializedData.writeInt32(this.pts_count);
        }
    }

    public static class TL_updateDraftMessage extends Update {
        public static int constructor;
        public Peer peer;

        static {
            constructor = -299124375;
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.peer = Peer.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
            this.draft = DraftMessage.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.peer.serializeToStream(abstractSerializedData);
            this.draft.serializeToStream(abstractSerializedData);
        }
    }

    public static class TL_updateEditChannelMessage extends Update {
        public static int constructor;
        public Message message;

        static {
            constructor = 457133559;
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.message = Message.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
            this.pts = abstractSerializedData.readInt32(z);
            this.pts_count = abstractSerializedData.readInt32(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.message.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeInt32(this.pts);
            abstractSerializedData.writeInt32(this.pts_count);
        }
    }

    public static class TL_updateEditMessage extends Update {
        public static int constructor;
        public Message message;

        static {
            constructor = -469536605;
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.message = Message.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
            this.pts = abstractSerializedData.readInt32(z);
            this.pts_count = abstractSerializedData.readInt32(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.message.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeInt32(this.pts);
            abstractSerializedData.writeInt32(this.pts_count);
        }
    }

    public static class TL_updateEncryptedChatTyping extends Update {
        public static int constructor;

        static {
            constructor = 386986326;
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.chat_id = abstractSerializedData.readInt32(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.chat_id);
        }
    }

    public static class TL_updateEncryptedMessagesRead extends Update {
        public static int constructor;

        static {
            constructor = 956179895;
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.chat_id = abstractSerializedData.readInt32(z);
            this.max_date = abstractSerializedData.readInt32(z);
            this.date = abstractSerializedData.readInt32(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.chat_id);
            abstractSerializedData.writeInt32(this.max_date);
            abstractSerializedData.writeInt32(this.date);
        }
    }

    public static class TL_updateEncryption extends Update {
        public static int constructor;

        static {
            constructor = -1264392051;
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.chat = EncryptedChat.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
            this.date = abstractSerializedData.readInt32(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.chat.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeInt32(this.date);
        }
    }

    public static class TL_updateInlineBotCallbackQuery extends Update {
        public static int constructor;
        public TL_inputBotInlineMessageID msg_id;

        static {
            constructor = -103646630;
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.flags = abstractSerializedData.readInt32(z);
            this.query_id = abstractSerializedData.readInt64(z);
            this.user_id = abstractSerializedData.readInt32(z);
            this.msg_id = TL_inputBotInlineMessageID.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
            this.chat_instance = abstractSerializedData.readInt64(z);
            if ((this.flags & TLRPC.USER_FLAG_ACCESS_HASH) != 0) {
                this.data = abstractSerializedData.readByteArray(z);
            }
            if ((this.flags & TLRPC.USER_FLAG_FIRST_NAME) != 0) {
                this.game_short_name = abstractSerializedData.readString(z);
            }
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.flags);
            abstractSerializedData.writeInt64(this.query_id);
            abstractSerializedData.writeInt32(this.user_id);
            this.msg_id.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeInt64(this.chat_instance);
            if ((this.flags & TLRPC.USER_FLAG_ACCESS_HASH) != 0) {
                abstractSerializedData.writeByteArray(this.data);
            }
            if ((this.flags & TLRPC.USER_FLAG_FIRST_NAME) != 0) {
                abstractSerializedData.writeString(this.game_short_name);
            }
        }
    }

    public static class TL_updateMessageID extends Update {
        public static int constructor;
        public int id;

        static {
            constructor = 1318109142;
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.id = abstractSerializedData.readInt32(z);
            this.random_id = abstractSerializedData.readInt64(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.id);
            abstractSerializedData.writeInt64(this.random_id);
        }
    }

    public static class TL_updateNewAuthorization extends Update {
        public static int constructor;

        static {
            constructor = -1895411046;
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.auth_key_id = abstractSerializedData.readInt64(z);
            this.date = abstractSerializedData.readInt32(z);
            this.device = abstractSerializedData.readString(z);
            this.location = abstractSerializedData.readString(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt64(this.auth_key_id);
            abstractSerializedData.writeInt32(this.date);
            abstractSerializedData.writeString(this.device);
            abstractSerializedData.writeString(this.location);
        }
    }

    public static class TL_updateNewChannelMessage extends Update {
        public static int constructor;
        public Message message;

        static {
            constructor = 1656358105;
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.message = Message.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
            this.pts = abstractSerializedData.readInt32(z);
            this.pts_count = abstractSerializedData.readInt32(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.message.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeInt32(this.pts);
            abstractSerializedData.writeInt32(this.pts_count);
        }
    }

    public static class TL_updateNewEncryptedMessage extends Update {
        public static int constructor;
        public EncryptedMessage message;

        static {
            constructor = 314359194;
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.message = EncryptedMessage.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
            this.qts = abstractSerializedData.readInt32(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.message.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeInt32(this.qts);
        }
    }

    public static class TL_updateNewGeoChatMessage extends Update {
        public static int constructor;
        public GeoChatMessage message;

        static {
            constructor = 1516823543;
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.message = GeoChatMessage.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.message.serializeToStream(abstractSerializedData);
        }
    }

    public static class TL_updateNewMessage extends Update {
        public static int constructor;
        public Message message;

        static {
            constructor = 522914557;
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.message = Message.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
            this.pts = abstractSerializedData.readInt32(z);
            this.pts_count = abstractSerializedData.readInt32(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.message.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeInt32(this.pts);
            abstractSerializedData.writeInt32(this.pts_count);
        }
    }

    public static class TL_updateNewStickerSet extends Update {
        public static int constructor;

        static {
            constructor = 1753886890;
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.stickerset = TL_messages_stickerSet.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.stickerset.serializeToStream(abstractSerializedData);
        }
    }

    public static class TL_updateNotifySettings extends Update {
        public static int constructor;
        public NotifyPeer peer;

        static {
            constructor = -1094555409;
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.peer = NotifyPeer.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
            this.notify_settings = PeerNotifySettings.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.peer.serializeToStream(abstractSerializedData);
            this.notify_settings.serializeToStream(abstractSerializedData);
        }
    }

    public static class TL_updatePrivacy extends Update {
        public static int constructor;

        static {
            constructor = -298113238;
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            int i = 0;
            this.key = PrivacyKey.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
            int readInt32 = abstractSerializedData.readInt32(z);
            if (readInt32 == 481674261) {
                readInt32 = abstractSerializedData.readInt32(z);
                while (i < readInt32) {
                    PrivacyRule TLdeserialize = PrivacyRule.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
                    if (TLdeserialize != null) {
                        this.rules.add(TLdeserialize);
                        i += TLRPC.USER_FLAG_ACCESS_HASH;
                    } else {
                        return;
                    }
                }
            } else if (z) {
                Object[] objArr = new Object[TLRPC.USER_FLAG_ACCESS_HASH];
                objArr[0] = Integer.valueOf(readInt32);
                throw new RuntimeException(String.format("wrong Vector magic, got %x", objArr));
            }
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.key.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeInt32(481674261);
            int size = this.rules.size();
            abstractSerializedData.writeInt32(size);
            for (int i = 0; i < size; i += TLRPC.USER_FLAG_ACCESS_HASH) {
                ((PrivacyRule) this.rules.get(i)).serializeToStream(abstractSerializedData);
            }
        }
    }

    public static class TL_updatePtsChanged extends Update {
        public static int constructor;

        static {
            constructor = 861169551;
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
        }
    }

    public static class TL_updateReadChannelInbox extends Update {
        public static int constructor;

        static {
            constructor = 1108669311;
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.channel_id = abstractSerializedData.readInt32(z);
            this.max_id = abstractSerializedData.readInt32(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.channel_id);
            abstractSerializedData.writeInt32(this.max_id);
        }
    }

    public static class TL_updateReadChannelOutbox extends Update {
        public static int constructor;

        static {
            constructor = 634833351;
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.channel_id = abstractSerializedData.readInt32(z);
            this.max_id = abstractSerializedData.readInt32(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.channel_id);
            abstractSerializedData.writeInt32(this.max_id);
        }
    }

    public static class TL_updateReadFeaturedStickers extends Update {
        public static int constructor;

        static {
            constructor = 1461528386;
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
        }
    }

    public static class TL_updateReadHistoryInbox extends Update {
        public static int constructor;
        public Peer peer;

        static {
            constructor = -1721631396;
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.peer = Peer.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
            this.max_id = abstractSerializedData.readInt32(z);
            this.pts = abstractSerializedData.readInt32(z);
            this.pts_count = abstractSerializedData.readInt32(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.peer.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeInt32(this.max_id);
            abstractSerializedData.writeInt32(this.pts);
            abstractSerializedData.writeInt32(this.pts_count);
        }
    }

    public static class TL_updateReadHistoryOutbox extends Update {
        public static int constructor;
        public Peer peer;

        static {
            constructor = 791617983;
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.peer = Peer.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
            this.max_id = abstractSerializedData.readInt32(z);
            this.pts = abstractSerializedData.readInt32(z);
            this.pts_count = abstractSerializedData.readInt32(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.peer.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeInt32(this.max_id);
            abstractSerializedData.writeInt32(this.pts);
            abstractSerializedData.writeInt32(this.pts_count);
        }
    }

    public static class TL_updateReadMessagesContents extends Update {
        public static int constructor;

        static {
            constructor = 1757493555;
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            int i = 0;
            int readInt32 = abstractSerializedData.readInt32(z);
            if (readInt32 == 481674261) {
                readInt32 = abstractSerializedData.readInt32(z);
                while (i < readInt32) {
                    this.messages.add(Integer.valueOf(abstractSerializedData.readInt32(z)));
                    i += TLRPC.USER_FLAG_ACCESS_HASH;
                }
                this.pts = abstractSerializedData.readInt32(z);
                this.pts_count = abstractSerializedData.readInt32(z);
            } else if (z) {
                Object[] objArr = new Object[TLRPC.USER_FLAG_ACCESS_HASH];
                objArr[0] = Integer.valueOf(readInt32);
                throw new RuntimeException(String.format("wrong Vector magic, got %x", objArr));
            }
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(481674261);
            int size = this.messages.size();
            abstractSerializedData.writeInt32(size);
            for (int i = 0; i < size; i += TLRPC.USER_FLAG_ACCESS_HASH) {
                abstractSerializedData.writeInt32(((Integer) this.messages.get(i)).intValue());
            }
            abstractSerializedData.writeInt32(this.pts);
            abstractSerializedData.writeInt32(this.pts_count);
        }
    }

    public static class TL_updateRecentStickers extends Update {
        public static int constructor;

        static {
            constructor = -1706939360;
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
        }
    }

    public static class TL_updateSavedGifs extends Update {
        public static int constructor;

        static {
            constructor = -1821035490;
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
        }
    }

    public static class TL_updateServiceNotification extends Update {
        public static int constructor;
        public String message;

        static {
            constructor = 942527460;
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.type = abstractSerializedData.readString(z);
            this.message = abstractSerializedData.readString(z);
            this.media = MessageMedia.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
            this.popup = abstractSerializedData.readBool(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeString(this.type);
            abstractSerializedData.writeString(this.message);
            this.media.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeBool(this.popup);
        }
    }

    public static class TL_updateShort extends Updates {
        public static int constructor;

        static {
            constructor = 2027216577;
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.update = Update.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
            this.date = abstractSerializedData.readInt32(z);
        }
    }

    public static class TL_updateShortChatMessage extends Updates {
        public static int constructor;

        static {
            constructor = 377562760;
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            int i = 0;
            this.flags = abstractSerializedData.readInt32(z);
            this.out = (this.flags & TLRPC.USER_FLAG_FIRST_NAME) != 0;
            this.mentioned = (this.flags & TLRPC.USER_FLAG_PHONE) != 0;
            this.media_unread = (this.flags & TLRPC.USER_FLAG_PHOTO) != 0;
            this.silent = (this.flags & MessagesController.UPDATE_MASK_CHANNEL) != 0;
            this.id = abstractSerializedData.readInt32(z);
            this.from_id = abstractSerializedData.readInt32(z);
            this.chat_id = abstractSerializedData.readInt32(z);
            this.message = abstractSerializedData.readString(z);
            this.pts = abstractSerializedData.readInt32(z);
            this.pts_count = abstractSerializedData.readInt32(z);
            this.date = abstractSerializedData.readInt32(z);
            if ((this.flags & TLRPC.USER_FLAG_LAST_NAME) != 0) {
                this.fwd_from = TL_messageFwdHeader.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
            }
            if ((this.flags & TLRPC.MESSAGE_FLAG_HAS_BOT_ID) != 0) {
                this.via_bot_id = abstractSerializedData.readInt32(z);
            }
            if ((this.flags & TLRPC.USER_FLAG_USERNAME) != 0) {
                this.reply_to_msg_id = abstractSerializedData.readInt32(z);
            }
            if ((this.flags & TLRPC.USER_FLAG_UNUSED) != 0) {
                int readInt32 = abstractSerializedData.readInt32(z);
                if (readInt32 == 481674261) {
                    readInt32 = abstractSerializedData.readInt32(z);
                    while (i < readInt32) {
                        MessageEntity TLdeserialize = MessageEntity.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
                        if (TLdeserialize != null) {
                            this.entities.add(TLdeserialize);
                            i += TLRPC.USER_FLAG_ACCESS_HASH;
                        } else {
                            return;
                        }
                    }
                } else if (z) {
                    Object[] objArr = new Object[TLRPC.USER_FLAG_ACCESS_HASH];
                    objArr[0] = Integer.valueOf(readInt32);
                    throw new RuntimeException(String.format("wrong Vector magic, got %x", objArr));
                }
            }
        }
    }

    public static class TL_updateShortMessage extends Updates {
        public static int constructor;

        static {
            constructor = -1857044719;
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            int i = 0;
            this.flags = abstractSerializedData.readInt32(z);
            this.out = (this.flags & TLRPC.USER_FLAG_FIRST_NAME) != 0;
            this.mentioned = (this.flags & TLRPC.USER_FLAG_PHONE) != 0;
            this.media_unread = (this.flags & TLRPC.USER_FLAG_PHOTO) != 0;
            this.silent = (this.flags & MessagesController.UPDATE_MASK_CHANNEL) != 0;
            this.id = abstractSerializedData.readInt32(z);
            this.user_id = abstractSerializedData.readInt32(z);
            this.message = abstractSerializedData.readString(z);
            this.pts = abstractSerializedData.readInt32(z);
            this.pts_count = abstractSerializedData.readInt32(z);
            this.date = abstractSerializedData.readInt32(z);
            if ((this.flags & TLRPC.USER_FLAG_LAST_NAME) != 0) {
                this.fwd_from = TL_messageFwdHeader.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
            }
            if ((this.flags & TLRPC.MESSAGE_FLAG_HAS_BOT_ID) != 0) {
                this.via_bot_id = abstractSerializedData.readInt32(z);
            }
            if ((this.flags & TLRPC.USER_FLAG_USERNAME) != 0) {
                this.reply_to_msg_id = abstractSerializedData.readInt32(z);
            }
            if ((this.flags & TLRPC.USER_FLAG_UNUSED) != 0) {
                int readInt32 = abstractSerializedData.readInt32(z);
                if (readInt32 == 481674261) {
                    readInt32 = abstractSerializedData.readInt32(z);
                    while (i < readInt32) {
                        MessageEntity TLdeserialize = MessageEntity.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
                        if (TLdeserialize != null) {
                            this.entities.add(TLdeserialize);
                            i += TLRPC.USER_FLAG_ACCESS_HASH;
                        } else {
                            return;
                        }
                    }
                } else if (z) {
                    Object[] objArr = new Object[TLRPC.USER_FLAG_ACCESS_HASH];
                    objArr[0] = Integer.valueOf(readInt32);
                    throw new RuntimeException(String.format("wrong Vector magic, got %x", objArr));
                }
            }
        }
    }

    public static class TL_updateShortSentMessage extends Updates {
        public static int constructor;

        static {
            constructor = 301019932;
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            int i = 0;
            this.flags = abstractSerializedData.readInt32(z);
            this.out = (this.flags & TLRPC.USER_FLAG_FIRST_NAME) != 0;
            this.id = abstractSerializedData.readInt32(z);
            this.pts = abstractSerializedData.readInt32(z);
            this.pts_count = abstractSerializedData.readInt32(z);
            this.date = abstractSerializedData.readInt32(z);
            if ((this.flags & TLRPC.USER_FLAG_UNUSED3) != 0) {
                this.media = MessageMedia.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
            }
            if ((this.flags & TLRPC.USER_FLAG_UNUSED) != 0) {
                int readInt32 = abstractSerializedData.readInt32(z);
                if (readInt32 == 481674261) {
                    readInt32 = abstractSerializedData.readInt32(z);
                    while (i < readInt32) {
                        MessageEntity TLdeserialize = MessageEntity.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
                        if (TLdeserialize != null) {
                            this.entities.add(TLdeserialize);
                            i += TLRPC.USER_FLAG_ACCESS_HASH;
                        } else {
                            return;
                        }
                    }
                } else if (z) {
                    Object[] objArr = new Object[TLRPC.USER_FLAG_ACCESS_HASH];
                    objArr[0] = Integer.valueOf(readInt32);
                    throw new RuntimeException(String.format("wrong Vector magic, got %x", objArr));
                }
            }
        }
    }

    public static class TL_updateStickerSets extends Update {
        public static int constructor;

        static {
            constructor = 1135492588;
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
        }
    }

    public static class TL_updateStickerSetsOrder extends Update {
        public static int constructor;

        static {
            constructor = 196268545;
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            int i = 0;
            this.flags = abstractSerializedData.readInt32(z);
            this.masks = (this.flags & TLRPC.USER_FLAG_ACCESS_HASH) != 0;
            int readInt32 = abstractSerializedData.readInt32(z);
            if (readInt32 == 481674261) {
                readInt32 = abstractSerializedData.readInt32(z);
                while (i < readInt32) {
                    this.order.add(Long.valueOf(abstractSerializedData.readInt64(z)));
                    i += TLRPC.USER_FLAG_ACCESS_HASH;
                }
            } else if (z) {
                Object[] objArr = new Object[TLRPC.USER_FLAG_ACCESS_HASH];
                objArr[0] = Integer.valueOf(readInt32);
                throw new RuntimeException(String.format("wrong Vector magic, got %x", objArr));
            }
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.flags = this.masks ? this.flags | TLRPC.USER_FLAG_ACCESS_HASH : this.flags & -2;
            abstractSerializedData.writeInt32(this.flags);
            abstractSerializedData.writeInt32(481674261);
            int size = this.order.size();
            abstractSerializedData.writeInt32(size);
            for (int i = 0; i < size; i += TLRPC.USER_FLAG_ACCESS_HASH) {
                abstractSerializedData.writeInt64(((Long) this.order.get(i)).longValue());
            }
        }
    }

    public static class TL_updateUserBlocked extends Update {
        public static int constructor;

        static {
            constructor = -2131957734;
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.user_id = abstractSerializedData.readInt32(z);
            this.blocked = abstractSerializedData.readBool(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.user_id);
            abstractSerializedData.writeBool(this.blocked);
        }
    }

    public static class TL_updateUserName extends Update {
        public static int constructor;

        static {
            constructor = -1489818765;
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.user_id = abstractSerializedData.readInt32(z);
            this.first_name = abstractSerializedData.readString(z);
            this.last_name = abstractSerializedData.readString(z);
            this.username = abstractSerializedData.readString(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.user_id);
            abstractSerializedData.writeString(this.first_name);
            abstractSerializedData.writeString(this.last_name);
            abstractSerializedData.writeString(this.username);
        }
    }

    public static class TL_updateUserPhone extends Update {
        public static int constructor;

        static {
            constructor = 314130811;
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.user_id = abstractSerializedData.readInt32(z);
            this.phone = abstractSerializedData.readString(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.user_id);
            abstractSerializedData.writeString(this.phone);
        }
    }

    public static class TL_updateUserPhoto extends Update {
        public static int constructor;

        static {
            constructor = -1791935732;
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.user_id = abstractSerializedData.readInt32(z);
            this.date = abstractSerializedData.readInt32(z);
            this.photo = UserProfilePhoto.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
            this.previous = abstractSerializedData.readBool(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.user_id);
            abstractSerializedData.writeInt32(this.date);
            this.photo.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeBool(this.previous);
        }
    }

    public static class TL_updateUserStatus extends Update {
        public static int constructor;

        static {
            constructor = 469489699;
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.user_id = abstractSerializedData.readInt32(z);
            this.status = UserStatus.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.user_id);
            this.status.serializeToStream(abstractSerializedData);
        }
    }

    public static class TL_updateUserTyping extends Update {
        public static int constructor;

        static {
            constructor = 1548249383;
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.user_id = abstractSerializedData.readInt32(z);
            this.action = SendMessageAction.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.user_id);
            this.action.serializeToStream(abstractSerializedData);
        }
    }

    public static class TL_updateWebPage extends Update {
        public static int constructor;

        static {
            constructor = 2139689491;
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.webpage = WebPage.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
            this.pts = abstractSerializedData.readInt32(z);
            this.pts_count = abstractSerializedData.readInt32(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.webpage.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeInt32(this.pts);
            abstractSerializedData.writeInt32(this.pts_count);
        }
    }

    public static class TL_updates extends Updates {
        public static int constructor;

        static {
            constructor = 1957577280;
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            int i = 0;
            int readInt32 = abstractSerializedData.readInt32(z);
            Object[] objArr;
            if (readInt32 == 481674261) {
                int readInt322 = abstractSerializedData.readInt32(z);
                readInt32 = 0;
                while (readInt32 < readInt322) {
                    Update TLdeserialize = Update.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
                    if (TLdeserialize != null) {
                        this.updates.add(TLdeserialize);
                        readInt32 += TLRPC.USER_FLAG_ACCESS_HASH;
                    } else {
                        return;
                    }
                }
                readInt32 = abstractSerializedData.readInt32(z);
                if (readInt32 == 481674261) {
                    readInt322 = abstractSerializedData.readInt32(z);
                    readInt32 = 0;
                    while (readInt32 < readInt322) {
                        User TLdeserialize2 = User.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
                        if (TLdeserialize2 != null) {
                            this.users.add(TLdeserialize2);
                            readInt32 += TLRPC.USER_FLAG_ACCESS_HASH;
                        } else {
                            return;
                        }
                    }
                    readInt32 = abstractSerializedData.readInt32(z);
                    if (readInt32 == 481674261) {
                        readInt32 = abstractSerializedData.readInt32(z);
                        while (i < readInt32) {
                            Chat TLdeserialize3 = Chat.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
                            if (TLdeserialize3 != null) {
                                this.chats.add(TLdeserialize3);
                                i += TLRPC.USER_FLAG_ACCESS_HASH;
                            } else {
                                return;
                            }
                        }
                        this.date = abstractSerializedData.readInt32(z);
                        this.seq = abstractSerializedData.readInt32(z);
                    } else if (z) {
                        objArr = new Object[TLRPC.USER_FLAG_ACCESS_HASH];
                        objArr[0] = Integer.valueOf(readInt32);
                        throw new RuntimeException(String.format("wrong Vector magic, got %x", objArr));
                    }
                } else if (z) {
                    objArr = new Object[TLRPC.USER_FLAG_ACCESS_HASH];
                    objArr[0] = Integer.valueOf(readInt32);
                    throw new RuntimeException(String.format("wrong Vector magic, got %x", objArr));
                }
            } else if (z) {
                objArr = new Object[TLRPC.USER_FLAG_ACCESS_HASH];
                objArr[0] = Integer.valueOf(readInt32);
                throw new RuntimeException(String.format("wrong Vector magic, got %x", objArr));
            }
        }
    }

    public static class TL_updatesCombined extends Updates {
        public static int constructor;

        static {
            constructor = 1918567619;
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            int i = 0;
            int readInt32 = abstractSerializedData.readInt32(z);
            Object[] objArr;
            if (readInt32 == 481674261) {
                int readInt322 = abstractSerializedData.readInt32(z);
                readInt32 = 0;
                while (readInt32 < readInt322) {
                    Update TLdeserialize = Update.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
                    if (TLdeserialize != null) {
                        this.updates.add(TLdeserialize);
                        readInt32 += TLRPC.USER_FLAG_ACCESS_HASH;
                    } else {
                        return;
                    }
                }
                readInt32 = abstractSerializedData.readInt32(z);
                if (readInt32 == 481674261) {
                    readInt322 = abstractSerializedData.readInt32(z);
                    readInt32 = 0;
                    while (readInt32 < readInt322) {
                        User TLdeserialize2 = User.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
                        if (TLdeserialize2 != null) {
                            this.users.add(TLdeserialize2);
                            readInt32 += TLRPC.USER_FLAG_ACCESS_HASH;
                        } else {
                            return;
                        }
                    }
                    readInt32 = abstractSerializedData.readInt32(z);
                    if (readInt32 == 481674261) {
                        readInt32 = abstractSerializedData.readInt32(z);
                        while (i < readInt32) {
                            Chat TLdeserialize3 = Chat.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
                            if (TLdeserialize3 != null) {
                                this.chats.add(TLdeserialize3);
                                i += TLRPC.USER_FLAG_ACCESS_HASH;
                            } else {
                                return;
                            }
                        }
                        this.date = abstractSerializedData.readInt32(z);
                        this.seq_start = abstractSerializedData.readInt32(z);
                        this.seq = abstractSerializedData.readInt32(z);
                    } else if (z) {
                        objArr = new Object[TLRPC.USER_FLAG_ACCESS_HASH];
                        objArr[0] = Integer.valueOf(readInt32);
                        throw new RuntimeException(String.format("wrong Vector magic, got %x", objArr));
                    }
                } else if (z) {
                    objArr = new Object[TLRPC.USER_FLAG_ACCESS_HASH];
                    objArr[0] = Integer.valueOf(readInt32);
                    throw new RuntimeException(String.format("wrong Vector magic, got %x", objArr));
                }
            } else if (z) {
                objArr = new Object[TLRPC.USER_FLAG_ACCESS_HASH];
                objArr[0] = Integer.valueOf(readInt32);
                throw new RuntimeException(String.format("wrong Vector magic, got %x", objArr));
            }
        }
    }

    public static class TL_updatesTooLong extends Updates {
        public static int constructor;

        static {
            constructor = -484987010;
        }
    }

    public static class updates_ChannelDifference extends TLObject {
        public ArrayList<Chat> chats;
        public int flags;
        public boolean isFinal;
        public ArrayList<Message> messages;
        public ArrayList<Message> new_messages;
        public ArrayList<Update> other_updates;
        public int pts;
        public int read_inbox_max_id;
        public int read_outbox_max_id;
        public int timeout;
        public int top_message;
        public int unread_count;
        public ArrayList<User> users;

        public updates_ChannelDifference() {
            this.new_messages = new ArrayList();
            this.other_updates = new ArrayList();
            this.chats = new ArrayList();
            this.users = new ArrayList();
            this.messages = new ArrayList();
        }

        public static updates_ChannelDifference TLdeserialize(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            updates_ChannelDifference com_hanista_mobogram_tgnet_TLRPC_updates_ChannelDifference = null;
            switch (i) {
                case 543450958:
                    com_hanista_mobogram_tgnet_TLRPC_updates_ChannelDifference = new TL_updates_channelDifference();
                    break;
                case 1041346555:
                    com_hanista_mobogram_tgnet_TLRPC_updates_ChannelDifference = new TL_updates_channelDifferenceEmpty();
                    break;
                case 1091431943:
                    com_hanista_mobogram_tgnet_TLRPC_updates_ChannelDifference = new TL_updates_channelDifferenceTooLong();
                    break;
            }
            if (com_hanista_mobogram_tgnet_TLRPC_updates_ChannelDifference == null && z) {
                Object[] objArr = new Object[TLRPC.USER_FLAG_ACCESS_HASH];
                objArr[0] = Integer.valueOf(i);
                throw new RuntimeException(String.format("can't parse magic %x in updates_ChannelDifference", objArr));
            }
            if (com_hanista_mobogram_tgnet_TLRPC_updates_ChannelDifference != null) {
                com_hanista_mobogram_tgnet_TLRPC_updates_ChannelDifference.readParams(abstractSerializedData, z);
            }
            return com_hanista_mobogram_tgnet_TLRPC_updates_ChannelDifference;
        }
    }

    public static class TL_updates_channelDifference extends updates_ChannelDifference {
        public static int constructor;

        static {
            constructor = 543450958;
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            int i = 0;
            this.flags = abstractSerializedData.readInt32(z);
            this.isFinal = (this.flags & TLRPC.USER_FLAG_ACCESS_HASH) != 0;
            this.pts = abstractSerializedData.readInt32(z);
            if ((this.flags & TLRPC.USER_FLAG_FIRST_NAME) != 0) {
                this.timeout = abstractSerializedData.readInt32(z);
            }
            int readInt32 = abstractSerializedData.readInt32(z);
            Object[] objArr;
            if (readInt32 == 481674261) {
                int readInt322 = abstractSerializedData.readInt32(z);
                readInt32 = 0;
                while (readInt32 < readInt322) {
                    Message TLdeserialize = Message.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
                    if (TLdeserialize != null) {
                        this.new_messages.add(TLdeserialize);
                        readInt32 += TLRPC.USER_FLAG_ACCESS_HASH;
                    } else {
                        return;
                    }
                }
                readInt32 = abstractSerializedData.readInt32(z);
                if (readInt32 == 481674261) {
                    readInt322 = abstractSerializedData.readInt32(z);
                    readInt32 = 0;
                    while (readInt32 < readInt322) {
                        Update TLdeserialize2 = Update.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
                        if (TLdeserialize2 != null) {
                            this.other_updates.add(TLdeserialize2);
                            readInt32 += TLRPC.USER_FLAG_ACCESS_HASH;
                        } else {
                            return;
                        }
                    }
                    readInt32 = abstractSerializedData.readInt32(z);
                    if (readInt32 == 481674261) {
                        readInt322 = abstractSerializedData.readInt32(z);
                        readInt32 = 0;
                        while (readInt32 < readInt322) {
                            Chat TLdeserialize3 = Chat.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
                            if (TLdeserialize3 != null) {
                                this.chats.add(TLdeserialize3);
                                readInt32 += TLRPC.USER_FLAG_ACCESS_HASH;
                            } else {
                                return;
                            }
                        }
                        readInt32 = abstractSerializedData.readInt32(z);
                        if (readInt32 == 481674261) {
                            readInt32 = abstractSerializedData.readInt32(z);
                            while (i < readInt32) {
                                User TLdeserialize4 = User.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
                                if (TLdeserialize4 != null) {
                                    this.users.add(TLdeserialize4);
                                    i += TLRPC.USER_FLAG_ACCESS_HASH;
                                } else {
                                    return;
                                }
                            }
                        } else if (z) {
                            objArr = new Object[TLRPC.USER_FLAG_ACCESS_HASH];
                            objArr[0] = Integer.valueOf(readInt32);
                            throw new RuntimeException(String.format("wrong Vector magic, got %x", objArr));
                        }
                    } else if (z) {
                        objArr = new Object[TLRPC.USER_FLAG_ACCESS_HASH];
                        objArr[0] = Integer.valueOf(readInt32);
                        throw new RuntimeException(String.format("wrong Vector magic, got %x", objArr));
                    }
                } else if (z) {
                    objArr = new Object[TLRPC.USER_FLAG_ACCESS_HASH];
                    objArr[0] = Integer.valueOf(readInt32);
                    throw new RuntimeException(String.format("wrong Vector magic, got %x", objArr));
                }
            } else if (z) {
                objArr = new Object[TLRPC.USER_FLAG_ACCESS_HASH];
                objArr[0] = Integer.valueOf(readInt32);
                throw new RuntimeException(String.format("wrong Vector magic, got %x", objArr));
            }
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            int i;
            int i2 = 0;
            abstractSerializedData.writeInt32(constructor);
            this.flags = this.isFinal ? this.flags | TLRPC.USER_FLAG_ACCESS_HASH : this.flags & -2;
            abstractSerializedData.writeInt32(this.flags);
            abstractSerializedData.writeInt32(this.pts);
            if ((this.flags & TLRPC.USER_FLAG_FIRST_NAME) != 0) {
                abstractSerializedData.writeInt32(this.timeout);
            }
            abstractSerializedData.writeInt32(481674261);
            int size = this.new_messages.size();
            abstractSerializedData.writeInt32(size);
            for (i = 0; i < size; i += TLRPC.USER_FLAG_ACCESS_HASH) {
                ((Message) this.new_messages.get(i)).serializeToStream(abstractSerializedData);
            }
            abstractSerializedData.writeInt32(481674261);
            size = this.other_updates.size();
            abstractSerializedData.writeInt32(size);
            for (i = 0; i < size; i += TLRPC.USER_FLAG_ACCESS_HASH) {
                ((Update) this.other_updates.get(i)).serializeToStream(abstractSerializedData);
            }
            abstractSerializedData.writeInt32(481674261);
            size = this.chats.size();
            abstractSerializedData.writeInt32(size);
            for (i = 0; i < size; i += TLRPC.USER_FLAG_ACCESS_HASH) {
                ((Chat) this.chats.get(i)).serializeToStream(abstractSerializedData);
            }
            abstractSerializedData.writeInt32(481674261);
            i = this.users.size();
            abstractSerializedData.writeInt32(i);
            while (i2 < i) {
                ((User) this.users.get(i2)).serializeToStream(abstractSerializedData);
                i2 += TLRPC.USER_FLAG_ACCESS_HASH;
            }
        }
    }

    public static class TL_updates_channelDifferenceEmpty extends updates_ChannelDifference {
        public static int constructor;

        static {
            constructor = 1041346555;
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.flags = abstractSerializedData.readInt32(z);
            this.isFinal = (this.flags & TLRPC.USER_FLAG_ACCESS_HASH) != 0;
            this.pts = abstractSerializedData.readInt32(z);
            if ((this.flags & TLRPC.USER_FLAG_FIRST_NAME) != 0) {
                this.timeout = abstractSerializedData.readInt32(z);
            }
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.flags = this.isFinal ? this.flags | TLRPC.USER_FLAG_ACCESS_HASH : this.flags & -2;
            abstractSerializedData.writeInt32(this.flags);
            abstractSerializedData.writeInt32(this.pts);
            if ((this.flags & TLRPC.USER_FLAG_FIRST_NAME) != 0) {
                abstractSerializedData.writeInt32(this.timeout);
            }
        }
    }

    public static class TL_updates_channelDifferenceTooLong extends updates_ChannelDifference {
        public static int constructor;

        static {
            constructor = 1091431943;
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            int i = 0;
            this.flags = abstractSerializedData.readInt32(z);
            this.isFinal = (this.flags & TLRPC.USER_FLAG_ACCESS_HASH) != 0;
            this.pts = abstractSerializedData.readInt32(z);
            if ((this.flags & TLRPC.USER_FLAG_FIRST_NAME) != 0) {
                this.timeout = abstractSerializedData.readInt32(z);
            }
            this.top_message = abstractSerializedData.readInt32(z);
            this.read_inbox_max_id = abstractSerializedData.readInt32(z);
            this.read_outbox_max_id = abstractSerializedData.readInt32(z);
            this.unread_count = abstractSerializedData.readInt32(z);
            int readInt32 = abstractSerializedData.readInt32(z);
            Object[] objArr;
            if (readInt32 == 481674261) {
                int readInt322 = abstractSerializedData.readInt32(z);
                readInt32 = 0;
                while (readInt32 < readInt322) {
                    Message TLdeserialize = Message.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
                    if (TLdeserialize != null) {
                        this.messages.add(TLdeserialize);
                        readInt32 += TLRPC.USER_FLAG_ACCESS_HASH;
                    } else {
                        return;
                    }
                }
                readInt32 = abstractSerializedData.readInt32(z);
                if (readInt32 == 481674261) {
                    readInt322 = abstractSerializedData.readInt32(z);
                    readInt32 = 0;
                    while (readInt32 < readInt322) {
                        Chat TLdeserialize2 = Chat.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
                        if (TLdeserialize2 != null) {
                            this.chats.add(TLdeserialize2);
                            readInt32 += TLRPC.USER_FLAG_ACCESS_HASH;
                        } else {
                            return;
                        }
                    }
                    readInt32 = abstractSerializedData.readInt32(z);
                    if (readInt32 == 481674261) {
                        readInt32 = abstractSerializedData.readInt32(z);
                        while (i < readInt32) {
                            User TLdeserialize3 = User.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
                            if (TLdeserialize3 != null) {
                                this.users.add(TLdeserialize3);
                                i += TLRPC.USER_FLAG_ACCESS_HASH;
                            } else {
                                return;
                            }
                        }
                    } else if (z) {
                        objArr = new Object[TLRPC.USER_FLAG_ACCESS_HASH];
                        objArr[0] = Integer.valueOf(readInt32);
                        throw new RuntimeException(String.format("wrong Vector magic, got %x", objArr));
                    }
                } else if (z) {
                    objArr = new Object[TLRPC.USER_FLAG_ACCESS_HASH];
                    objArr[0] = Integer.valueOf(readInt32);
                    throw new RuntimeException(String.format("wrong Vector magic, got %x", objArr));
                }
            } else if (z) {
                objArr = new Object[TLRPC.USER_FLAG_ACCESS_HASH];
                objArr[0] = Integer.valueOf(readInt32);
                throw new RuntimeException(String.format("wrong Vector magic, got %x", objArr));
            }
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            int i;
            int i2 = 0;
            abstractSerializedData.writeInt32(constructor);
            this.flags = this.isFinal ? this.flags | TLRPC.USER_FLAG_ACCESS_HASH : this.flags & -2;
            abstractSerializedData.writeInt32(this.flags);
            abstractSerializedData.writeInt32(this.pts);
            if ((this.flags & TLRPC.USER_FLAG_FIRST_NAME) != 0) {
                abstractSerializedData.writeInt32(this.timeout);
            }
            abstractSerializedData.writeInt32(this.top_message);
            abstractSerializedData.writeInt32(this.read_inbox_max_id);
            abstractSerializedData.writeInt32(this.read_outbox_max_id);
            abstractSerializedData.writeInt32(this.unread_count);
            abstractSerializedData.writeInt32(481674261);
            int size = this.messages.size();
            abstractSerializedData.writeInt32(size);
            for (i = 0; i < size; i += TLRPC.USER_FLAG_ACCESS_HASH) {
                ((Message) this.messages.get(i)).serializeToStream(abstractSerializedData);
            }
            abstractSerializedData.writeInt32(481674261);
            size = this.chats.size();
            abstractSerializedData.writeInt32(size);
            for (i = 0; i < size; i += TLRPC.USER_FLAG_ACCESS_HASH) {
                ((Chat) this.chats.get(i)).serializeToStream(abstractSerializedData);
            }
            abstractSerializedData.writeInt32(481674261);
            i = this.users.size();
            abstractSerializedData.writeInt32(i);
            while (i2 < i) {
                ((User) this.users.get(i2)).serializeToStream(abstractSerializedData);
                i2 += TLRPC.USER_FLAG_ACCESS_HASH;
            }
        }
    }

    public static class updates_Difference extends TLObject {
        public ArrayList<Chat> chats;
        public int date;
        public TL_updates_state intermediate_state;
        public ArrayList<EncryptedMessage> new_encrypted_messages;
        public ArrayList<Message> new_messages;
        public ArrayList<Update> other_updates;
        public int seq;
        public TL_updates_state state;
        public ArrayList<User> users;

        public updates_Difference() {
            this.new_messages = new ArrayList();
            this.new_encrypted_messages = new ArrayList();
            this.other_updates = new ArrayList();
            this.chats = new ArrayList();
            this.users = new ArrayList();
        }

        public static updates_Difference TLdeserialize(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            updates_Difference com_hanista_mobogram_tgnet_TLRPC_updates_Difference = null;
            switch (i) {
                case -1459938943:
                    com_hanista_mobogram_tgnet_TLRPC_updates_Difference = new TL_updates_differenceSlice();
                    break;
                case 16030880:
                    com_hanista_mobogram_tgnet_TLRPC_updates_Difference = new TL_updates_difference();
                    break;
                case 1567990072:
                    com_hanista_mobogram_tgnet_TLRPC_updates_Difference = new TL_updates_differenceEmpty();
                    break;
            }
            if (com_hanista_mobogram_tgnet_TLRPC_updates_Difference == null && z) {
                Object[] objArr = new Object[TLRPC.USER_FLAG_ACCESS_HASH];
                objArr[0] = Integer.valueOf(i);
                throw new RuntimeException(String.format("can't parse magic %x in updates_Difference", objArr));
            }
            if (com_hanista_mobogram_tgnet_TLRPC_updates_Difference != null) {
                com_hanista_mobogram_tgnet_TLRPC_updates_Difference.readParams(abstractSerializedData, z);
            }
            return com_hanista_mobogram_tgnet_TLRPC_updates_Difference;
        }
    }

    public static class TL_updates_difference extends updates_Difference {
        public static int constructor;

        static {
            constructor = 16030880;
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            int i = 0;
            int readInt32 = abstractSerializedData.readInt32(z);
            Object[] objArr;
            if (readInt32 == 481674261) {
                int readInt322 = abstractSerializedData.readInt32(z);
                readInt32 = 0;
                while (readInt32 < readInt322) {
                    Message TLdeserialize = Message.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
                    if (TLdeserialize != null) {
                        this.new_messages.add(TLdeserialize);
                        readInt32 += TLRPC.USER_FLAG_ACCESS_HASH;
                    } else {
                        return;
                    }
                }
                readInt32 = abstractSerializedData.readInt32(z);
                if (readInt32 == 481674261) {
                    readInt322 = abstractSerializedData.readInt32(z);
                    readInt32 = 0;
                    while (readInt32 < readInt322) {
                        EncryptedMessage TLdeserialize2 = EncryptedMessage.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
                        if (TLdeserialize2 != null) {
                            this.new_encrypted_messages.add(TLdeserialize2);
                            readInt32 += TLRPC.USER_FLAG_ACCESS_HASH;
                        } else {
                            return;
                        }
                    }
                    readInt32 = abstractSerializedData.readInt32(z);
                    if (readInt32 == 481674261) {
                        readInt322 = abstractSerializedData.readInt32(z);
                        readInt32 = 0;
                        while (readInt32 < readInt322) {
                            Update TLdeserialize3 = Update.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
                            if (TLdeserialize3 != null) {
                                this.other_updates.add(TLdeserialize3);
                                readInt32 += TLRPC.USER_FLAG_ACCESS_HASH;
                            } else {
                                return;
                            }
                        }
                        readInt32 = abstractSerializedData.readInt32(z);
                        if (readInt32 == 481674261) {
                            readInt322 = abstractSerializedData.readInt32(z);
                            readInt32 = 0;
                            while (readInt32 < readInt322) {
                                Chat TLdeserialize4 = Chat.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
                                if (TLdeserialize4 != null) {
                                    this.chats.add(TLdeserialize4);
                                    readInt32 += TLRPC.USER_FLAG_ACCESS_HASH;
                                } else {
                                    return;
                                }
                            }
                            readInt32 = abstractSerializedData.readInt32(z);
                            if (readInt32 == 481674261) {
                                readInt32 = abstractSerializedData.readInt32(z);
                                while (i < readInt32) {
                                    User TLdeserialize5 = User.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
                                    if (TLdeserialize5 != null) {
                                        this.users.add(TLdeserialize5);
                                        i += TLRPC.USER_FLAG_ACCESS_HASH;
                                    } else {
                                        return;
                                    }
                                }
                                this.state = TL_updates_state.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
                            } else if (z) {
                                objArr = new Object[TLRPC.USER_FLAG_ACCESS_HASH];
                                objArr[0] = Integer.valueOf(readInt32);
                                throw new RuntimeException(String.format("wrong Vector magic, got %x", objArr));
                            }
                        } else if (z) {
                            objArr = new Object[TLRPC.USER_FLAG_ACCESS_HASH];
                            objArr[0] = Integer.valueOf(readInt32);
                            throw new RuntimeException(String.format("wrong Vector magic, got %x", objArr));
                        }
                    } else if (z) {
                        objArr = new Object[TLRPC.USER_FLAG_ACCESS_HASH];
                        objArr[0] = Integer.valueOf(readInt32);
                        throw new RuntimeException(String.format("wrong Vector magic, got %x", objArr));
                    }
                } else if (z) {
                    objArr = new Object[TLRPC.USER_FLAG_ACCESS_HASH];
                    objArr[0] = Integer.valueOf(readInt32);
                    throw new RuntimeException(String.format("wrong Vector magic, got %x", objArr));
                }
            } else if (z) {
                objArr = new Object[TLRPC.USER_FLAG_ACCESS_HASH];
                objArr[0] = Integer.valueOf(readInt32);
                throw new RuntimeException(String.format("wrong Vector magic, got %x", objArr));
            }
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            int i;
            int i2 = 0;
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(481674261);
            int size = this.new_messages.size();
            abstractSerializedData.writeInt32(size);
            for (i = 0; i < size; i += TLRPC.USER_FLAG_ACCESS_HASH) {
                ((Message) this.new_messages.get(i)).serializeToStream(abstractSerializedData);
            }
            abstractSerializedData.writeInt32(481674261);
            size = this.new_encrypted_messages.size();
            abstractSerializedData.writeInt32(size);
            for (i = 0; i < size; i += TLRPC.USER_FLAG_ACCESS_HASH) {
                ((EncryptedMessage) this.new_encrypted_messages.get(i)).serializeToStream(abstractSerializedData);
            }
            abstractSerializedData.writeInt32(481674261);
            size = this.other_updates.size();
            abstractSerializedData.writeInt32(size);
            for (i = 0; i < size; i += TLRPC.USER_FLAG_ACCESS_HASH) {
                ((Update) this.other_updates.get(i)).serializeToStream(abstractSerializedData);
            }
            abstractSerializedData.writeInt32(481674261);
            size = this.chats.size();
            abstractSerializedData.writeInt32(size);
            for (i = 0; i < size; i += TLRPC.USER_FLAG_ACCESS_HASH) {
                ((Chat) this.chats.get(i)).serializeToStream(abstractSerializedData);
            }
            abstractSerializedData.writeInt32(481674261);
            i = this.users.size();
            abstractSerializedData.writeInt32(i);
            while (i2 < i) {
                ((User) this.users.get(i2)).serializeToStream(abstractSerializedData);
                i2 += TLRPC.USER_FLAG_ACCESS_HASH;
            }
            this.state.serializeToStream(abstractSerializedData);
        }
    }

    public static class TL_updates_differenceEmpty extends updates_Difference {
        public static int constructor;

        static {
            constructor = 1567990072;
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.date = abstractSerializedData.readInt32(z);
            this.seq = abstractSerializedData.readInt32(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.date);
            abstractSerializedData.writeInt32(this.seq);
        }
    }

    public static class TL_updates_differenceSlice extends updates_Difference {
        public static int constructor;

        static {
            constructor = -1459938943;
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            int i = 0;
            int readInt32 = abstractSerializedData.readInt32(z);
            Object[] objArr;
            if (readInt32 == 481674261) {
                int readInt322 = abstractSerializedData.readInt32(z);
                readInt32 = 0;
                while (readInt32 < readInt322) {
                    Message TLdeserialize = Message.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
                    if (TLdeserialize != null) {
                        this.new_messages.add(TLdeserialize);
                        readInt32 += TLRPC.USER_FLAG_ACCESS_HASH;
                    } else {
                        return;
                    }
                }
                readInt32 = abstractSerializedData.readInt32(z);
                if (readInt32 == 481674261) {
                    readInt322 = abstractSerializedData.readInt32(z);
                    readInt32 = 0;
                    while (readInt32 < readInt322) {
                        EncryptedMessage TLdeserialize2 = EncryptedMessage.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
                        if (TLdeserialize2 != null) {
                            this.new_encrypted_messages.add(TLdeserialize2);
                            readInt32 += TLRPC.USER_FLAG_ACCESS_HASH;
                        } else {
                            return;
                        }
                    }
                    readInt32 = abstractSerializedData.readInt32(z);
                    if (readInt32 == 481674261) {
                        readInt322 = abstractSerializedData.readInt32(z);
                        readInt32 = 0;
                        while (readInt32 < readInt322) {
                            Update TLdeserialize3 = Update.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
                            if (TLdeserialize3 != null) {
                                this.other_updates.add(TLdeserialize3);
                                readInt32 += TLRPC.USER_FLAG_ACCESS_HASH;
                            } else {
                                return;
                            }
                        }
                        readInt32 = abstractSerializedData.readInt32(z);
                        if (readInt32 == 481674261) {
                            readInt322 = abstractSerializedData.readInt32(z);
                            readInt32 = 0;
                            while (readInt32 < readInt322) {
                                Chat TLdeserialize4 = Chat.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
                                if (TLdeserialize4 != null) {
                                    this.chats.add(TLdeserialize4);
                                    readInt32 += TLRPC.USER_FLAG_ACCESS_HASH;
                                } else {
                                    return;
                                }
                            }
                            readInt32 = abstractSerializedData.readInt32(z);
                            if (readInt32 == 481674261) {
                                readInt32 = abstractSerializedData.readInt32(z);
                                while (i < readInt32) {
                                    User TLdeserialize5 = User.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
                                    if (TLdeserialize5 != null) {
                                        this.users.add(TLdeserialize5);
                                        i += TLRPC.USER_FLAG_ACCESS_HASH;
                                    } else {
                                        return;
                                    }
                                }
                                this.intermediate_state = TL_updates_state.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
                            } else if (z) {
                                objArr = new Object[TLRPC.USER_FLAG_ACCESS_HASH];
                                objArr[0] = Integer.valueOf(readInt32);
                                throw new RuntimeException(String.format("wrong Vector magic, got %x", objArr));
                            }
                        } else if (z) {
                            objArr = new Object[TLRPC.USER_FLAG_ACCESS_HASH];
                            objArr[0] = Integer.valueOf(readInt32);
                            throw new RuntimeException(String.format("wrong Vector magic, got %x", objArr));
                        }
                    } else if (z) {
                        objArr = new Object[TLRPC.USER_FLAG_ACCESS_HASH];
                        objArr[0] = Integer.valueOf(readInt32);
                        throw new RuntimeException(String.format("wrong Vector magic, got %x", objArr));
                    }
                } else if (z) {
                    objArr = new Object[TLRPC.USER_FLAG_ACCESS_HASH];
                    objArr[0] = Integer.valueOf(readInt32);
                    throw new RuntimeException(String.format("wrong Vector magic, got %x", objArr));
                }
            } else if (z) {
                objArr = new Object[TLRPC.USER_FLAG_ACCESS_HASH];
                objArr[0] = Integer.valueOf(readInt32);
                throw new RuntimeException(String.format("wrong Vector magic, got %x", objArr));
            }
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            int i;
            int i2 = 0;
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(481674261);
            int size = this.new_messages.size();
            abstractSerializedData.writeInt32(size);
            for (i = 0; i < size; i += TLRPC.USER_FLAG_ACCESS_HASH) {
                ((Message) this.new_messages.get(i)).serializeToStream(abstractSerializedData);
            }
            abstractSerializedData.writeInt32(481674261);
            size = this.new_encrypted_messages.size();
            abstractSerializedData.writeInt32(size);
            for (i = 0; i < size; i += TLRPC.USER_FLAG_ACCESS_HASH) {
                ((EncryptedMessage) this.new_encrypted_messages.get(i)).serializeToStream(abstractSerializedData);
            }
            abstractSerializedData.writeInt32(481674261);
            size = this.other_updates.size();
            abstractSerializedData.writeInt32(size);
            for (i = 0; i < size; i += TLRPC.USER_FLAG_ACCESS_HASH) {
                ((Update) this.other_updates.get(i)).serializeToStream(abstractSerializedData);
            }
            abstractSerializedData.writeInt32(481674261);
            size = this.chats.size();
            abstractSerializedData.writeInt32(size);
            for (i = 0; i < size; i += TLRPC.USER_FLAG_ACCESS_HASH) {
                ((Chat) this.chats.get(i)).serializeToStream(abstractSerializedData);
            }
            abstractSerializedData.writeInt32(481674261);
            i = this.users.size();
            abstractSerializedData.writeInt32(i);
            while (i2 < i) {
                ((User) this.users.get(i2)).serializeToStream(abstractSerializedData);
                i2 += TLRPC.USER_FLAG_ACCESS_HASH;
            }
            this.intermediate_state.serializeToStream(abstractSerializedData);
        }
    }

    public static class TL_updates_getChannelDifference extends TLObject {
        public static int constructor;
        public InputChannel channel;
        public ChannelMessagesFilter filter;
        public int limit;
        public int pts;

        static {
            constructor = -1154295872;
        }

        public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            return updates_ChannelDifference.TLdeserialize(abstractSerializedData, i, z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.channel.serializeToStream(abstractSerializedData);
            this.filter.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeInt32(this.pts);
            abstractSerializedData.writeInt32(this.limit);
        }
    }

    public static class TL_updates_getDifference extends TLObject {
        public static int constructor;
        public int date;
        public int pts;
        public int qts;

        static {
            constructor = 168039573;
        }

        public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            return updates_Difference.TLdeserialize(abstractSerializedData, i, z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.pts);
            abstractSerializedData.writeInt32(this.date);
            abstractSerializedData.writeInt32(this.qts);
        }
    }

    public static class TL_updates_getState extends TLObject {
        public static int constructor;

        static {
            constructor = -304838614;
        }

        public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            return TL_updates_state.TLdeserialize(abstractSerializedData, i, z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
        }
    }

    public static class TL_updates_state extends TLObject {
        public static int constructor;
        public int date;
        public int pts;
        public int qts;
        public int seq;
        public int unread_count;

        static {
            constructor = -1519637954;
        }

        public static TL_updates_state TLdeserialize(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            if (constructor == i) {
                TL_updates_state tL_updates_state = new TL_updates_state();
                tL_updates_state.readParams(abstractSerializedData, z);
                return tL_updates_state;
            } else if (!z) {
                return null;
            } else {
                Object[] objArr = new Object[TLRPC.USER_FLAG_ACCESS_HASH];
                objArr[0] = Integer.valueOf(i);
                throw new RuntimeException(String.format("can't parse magic %x in TL_updates_state", objArr));
            }
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.pts = abstractSerializedData.readInt32(z);
            this.qts = abstractSerializedData.readInt32(z);
            this.date = abstractSerializedData.readInt32(z);
            this.seq = abstractSerializedData.readInt32(z);
            this.unread_count = abstractSerializedData.readInt32(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.pts);
            abstractSerializedData.writeInt32(this.qts);
            abstractSerializedData.writeInt32(this.date);
            abstractSerializedData.writeInt32(this.seq);
            abstractSerializedData.writeInt32(this.unread_count);
        }
    }

    public static class TL_upload_file extends TLObject {
        public static int constructor;
        public NativeByteBuffer bytes;
        public int mtime;
        public storage_FileType type;

        static {
            constructor = 157948117;
        }

        public static TL_upload_file TLdeserialize(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            if (constructor == i) {
                TL_upload_file tL_upload_file = new TL_upload_file();
                tL_upload_file.readParams(abstractSerializedData, z);
                return tL_upload_file;
            } else if (!z) {
                return null;
            } else {
                Object[] objArr = new Object[TLRPC.USER_FLAG_ACCESS_HASH];
                objArr[0] = Integer.valueOf(i);
                throw new RuntimeException(String.format("can't parse magic %x in TL_upload_file", objArr));
            }
        }

        public void freeResources() {
            if (!this.disableFree && this.bytes != null) {
                this.bytes.reuse();
                this.bytes = null;
            }
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.type = storage_FileType.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
            this.mtime = abstractSerializedData.readInt32(z);
            this.bytes = abstractSerializedData.readByteBuffer(z);
        }
    }

    public static class TL_upload_getFile extends TLObject {
        public static int constructor;
        public int limit;
        public InputFileLocation location;
        public int offset;

        static {
            constructor = -475607115;
        }

        public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            return TL_upload_file.TLdeserialize(abstractSerializedData, i, z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.location.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeInt32(this.offset);
            abstractSerializedData.writeInt32(this.limit);
        }
    }

    public static class TL_upload_saveBigFilePart extends TLObject {
        public static int constructor;
        public NativeByteBuffer bytes;
        public long file_id;
        public int file_part;
        public int file_total_parts;

        static {
            constructor = -562337987;
        }

        public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            return Bool.TLdeserialize(abstractSerializedData, i, z);
        }

        public void freeResources() {
            if (!this.disableFree && this.bytes != null) {
                this.bytes.reuse();
                this.bytes = null;
            }
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt64(this.file_id);
            abstractSerializedData.writeInt32(this.file_part);
            abstractSerializedData.writeInt32(this.file_total_parts);
            abstractSerializedData.writeByteBuffer(this.bytes);
        }
    }

    public static class TL_upload_saveFilePart extends TLObject {
        public static int constructor;
        public NativeByteBuffer bytes;
        public long file_id;
        public int file_part;

        static {
            constructor = -1291540959;
        }

        public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            return Bool.TLdeserialize(abstractSerializedData, i, z);
        }

        public void freeResources() {
            if (!this.disableFree && this.bytes != null) {
                this.bytes.reuse();
                this.bytes = null;
            }
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt64(this.file_id);
            abstractSerializedData.writeInt32(this.file_part);
            abstractSerializedData.writeByteBuffer(this.bytes);
        }
    }

    public static class User extends TLObject {
        public long access_hash;
        public boolean bot;
        public boolean bot_chat_history;
        public int bot_info_version;
        public boolean bot_inline_geo;
        public String bot_inline_placeholder;
        public boolean bot_nochats;
        public boolean contact;
        public boolean deleted;
        public boolean explicit_content;
        public String first_name;
        public int flags;
        public int id;
        public boolean inactive;
        public String last_name;
        public boolean min;
        public boolean mutual_contact;
        public String phone;
        public UserProfilePhoto photo;
        public boolean restricted;
        public String restriction_reason;
        public boolean self;
        public UserStatus status;
        public String username;
        public boolean verified;

        public static User TLdeserialize(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            User user = null;
            switch (i) {
                case -1298475060:
                    user = new TL_userDeleted_old();
                    break;
                case -894214632:
                    user = new TL_userContact_old2();
                    break;
                case -787638374:
                    user = new TL_user();
                    break;
                case -704549510:
                    user = new TL_userDeleted_old2();
                    break;
                case -640891665:
                    user = new TL_userRequest_old2();
                    break;
                case -218397927:
                    user = new TL_userContact_old();
                    break;
                case 123533224:
                    user = new TL_userForeign_old2();
                    break;
                case 476112392:
                    user = new TL_userSelf_old3();
                    break;
                case 537022650:
                    user = new TL_userEmpty();
                    break;
                case 585404530:
                    user = new TL_user_old();
                    break;
                case 585682608:
                    user = new TL_userRequest_old();
                    break;
                case 1377093789:
                    user = new TL_userForeign_old();
                    break;
                case 1879553105:
                    user = new TL_userSelf_old2();
                    break;
                case 1912944108:
                    user = new TL_userSelf_old();
                    break;
            }
            if (user == null && z) {
                Object[] objArr = new Object[TLRPC.USER_FLAG_ACCESS_HASH];
                objArr[0] = Integer.valueOf(i);
                throw new RuntimeException(String.format("can't parse magic %x in User", objArr));
            }
            if (user != null) {
                user.readParams(abstractSerializedData, z);
            }
            return user;
        }
    }

    public static class TL_user extends User {
        public static int constructor;

        static {
            constructor = -787638374;
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            boolean z2 = true;
            this.flags = abstractSerializedData.readInt32(z);
            this.self = (this.flags & TLRPC.MESSAGE_FLAG_HAS_VIEWS) != 0;
            this.contact = (this.flags & TLRPC.MESSAGE_FLAG_HAS_BOT_ID) != 0;
            this.mutual_contact = (this.flags & ItemAnimator.FLAG_APPEARED_IN_PRE_LAYOUT) != 0;
            this.deleted = (this.flags & MessagesController.UPDATE_MASK_CHANNEL) != 0;
            this.bot = (this.flags & MessagesController.UPDATE_MASK_CHAT_ADMINS) != 0;
            this.bot_chat_history = (this.flags & TLRPC.MESSAGE_FLAG_EDITED) != 0;
            this.bot_nochats = (this.flags & AccessibilityNodeInfoCompat.ACTION_CUT) != 0;
            this.verified = (this.flags & AccessibilityNodeInfoCompat.ACTION_SET_SELECTION) != 0;
            this.restricted = (this.flags & AccessibilityNodeInfoCompat.ACTION_EXPAND) != 0;
            this.min = (this.flags & AccessibilityNodeInfoCompat.ACTION_DISMISS) != 0;
            if ((this.flags & AccessibilityNodeInfoCompat.ACTION_SET_TEXT) == 0) {
                z2 = false;
            }
            this.bot_inline_geo = z2;
            this.id = abstractSerializedData.readInt32(z);
            if ((this.flags & TLRPC.USER_FLAG_ACCESS_HASH) != 0) {
                this.access_hash = abstractSerializedData.readInt64(z);
            }
            if ((this.flags & TLRPC.USER_FLAG_FIRST_NAME) != 0) {
                this.first_name = abstractSerializedData.readString(z);
            }
            if ((this.flags & TLRPC.USER_FLAG_LAST_NAME) != 0) {
                this.last_name = abstractSerializedData.readString(z);
            }
            if ((this.flags & TLRPC.USER_FLAG_USERNAME) != 0) {
                this.username = abstractSerializedData.readString(z);
            }
            if ((this.flags & TLRPC.USER_FLAG_PHONE) != 0) {
                this.phone = abstractSerializedData.readString(z);
            }
            if ((this.flags & TLRPC.USER_FLAG_PHOTO) != 0) {
                this.photo = UserProfilePhoto.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
            }
            if ((this.flags & TLRPC.USER_FLAG_STATUS) != 0) {
                this.status = UserStatus.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
            }
            if ((this.flags & MessagesController.UPDATE_MASK_CHAT_ADMINS) != 0) {
                this.bot_info_version = abstractSerializedData.readInt32(z);
            }
            if ((this.flags & AccessibilityNodeInfoCompat.ACTION_EXPAND) != 0) {
                this.restriction_reason = abstractSerializedData.readString(z);
            }
            if ((this.flags & AccessibilityNodeInfoCompat.ACTION_COLLAPSE) != 0) {
                this.bot_inline_placeholder = abstractSerializedData.readString(z);
            }
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.flags = this.self ? this.flags | TLRPC.MESSAGE_FLAG_HAS_VIEWS : this.flags & -1025;
            this.flags = this.contact ? this.flags | TLRPC.MESSAGE_FLAG_HAS_BOT_ID : this.flags & -2049;
            this.flags = this.mutual_contact ? this.flags | ItemAnimator.FLAG_APPEARED_IN_PRE_LAYOUT : this.flags & -4097;
            this.flags = this.deleted ? this.flags | MessagesController.UPDATE_MASK_CHANNEL : this.flags & -8193;
            this.flags = this.bot ? this.flags | MessagesController.UPDATE_MASK_CHAT_ADMINS : this.flags & -16385;
            this.flags = this.bot_chat_history ? this.flags | TLRPC.MESSAGE_FLAG_EDITED : this.flags & -32769;
            this.flags = this.bot_nochats ? this.flags | AccessibilityNodeInfoCompat.ACTION_CUT : this.flags & -65537;
            this.flags = this.verified ? this.flags | AccessibilityNodeInfoCompat.ACTION_SET_SELECTION : this.flags & -131073;
            this.flags = this.restricted ? this.flags | AccessibilityNodeInfoCompat.ACTION_EXPAND : this.flags & -262145;
            this.flags = this.min ? this.flags | AccessibilityNodeInfoCompat.ACTION_DISMISS : this.flags & -1048577;
            this.flags = this.bot_inline_geo ? this.flags | AccessibilityNodeInfoCompat.ACTION_SET_TEXT : this.flags & -2097153;
            abstractSerializedData.writeInt32(this.flags);
            abstractSerializedData.writeInt32(this.id);
            if ((this.flags & TLRPC.USER_FLAG_ACCESS_HASH) != 0) {
                abstractSerializedData.writeInt64(this.access_hash);
            }
            if ((this.flags & TLRPC.USER_FLAG_FIRST_NAME) != 0) {
                abstractSerializedData.writeString(this.first_name);
            }
            if ((this.flags & TLRPC.USER_FLAG_LAST_NAME) != 0) {
                abstractSerializedData.writeString(this.last_name);
            }
            if ((this.flags & TLRPC.USER_FLAG_USERNAME) != 0) {
                abstractSerializedData.writeString(this.username);
            }
            if ((this.flags & TLRPC.USER_FLAG_PHONE) != 0) {
                abstractSerializedData.writeString(this.phone);
            }
            if ((this.flags & TLRPC.USER_FLAG_PHOTO) != 0) {
                this.photo.serializeToStream(abstractSerializedData);
            }
            if ((this.flags & TLRPC.USER_FLAG_STATUS) != 0) {
                this.status.serializeToStream(abstractSerializedData);
            }
            if ((this.flags & MessagesController.UPDATE_MASK_CHAT_ADMINS) != 0) {
                abstractSerializedData.writeInt32(this.bot_info_version);
            }
            if ((this.flags & AccessibilityNodeInfoCompat.ACTION_EXPAND) != 0) {
                abstractSerializedData.writeString(this.restriction_reason);
            }
            if ((this.flags & AccessibilityNodeInfoCompat.ACTION_COLLAPSE) != 0) {
                abstractSerializedData.writeString(this.bot_inline_placeholder);
            }
        }
    }

    public static class TL_userContact_old2 extends User {
        public static int constructor;

        static {
            constructor = -894214632;
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.id = abstractSerializedData.readInt32(z);
            this.first_name = abstractSerializedData.readString(z);
            this.last_name = abstractSerializedData.readString(z);
            this.username = abstractSerializedData.readString(z);
            this.access_hash = abstractSerializedData.readInt64(z);
            this.phone = abstractSerializedData.readString(z);
            this.photo = UserProfilePhoto.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
            this.status = UserStatus.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.id);
            abstractSerializedData.writeString(this.first_name);
            abstractSerializedData.writeString(this.last_name);
            abstractSerializedData.writeString(this.username);
            abstractSerializedData.writeInt64(this.access_hash);
            abstractSerializedData.writeString(this.phone);
            this.photo.serializeToStream(abstractSerializedData);
            this.status.serializeToStream(abstractSerializedData);
        }
    }

    public static class TL_userContact_old extends TL_userContact_old2 {
        public static int constructor;

        static {
            constructor = -218397927;
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.id = abstractSerializedData.readInt32(z);
            this.first_name = abstractSerializedData.readString(z);
            this.last_name = abstractSerializedData.readString(z);
            this.access_hash = abstractSerializedData.readInt64(z);
            this.phone = abstractSerializedData.readString(z);
            this.photo = UserProfilePhoto.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
            this.status = UserStatus.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.id);
            abstractSerializedData.writeString(this.first_name);
            abstractSerializedData.writeString(this.last_name);
            abstractSerializedData.writeInt64(this.access_hash);
            abstractSerializedData.writeString(this.phone);
            this.photo.serializeToStream(abstractSerializedData);
            this.status.serializeToStream(abstractSerializedData);
        }
    }

    public static class TL_userDeleted_old2 extends User {
        public static int constructor;

        static {
            constructor = -704549510;
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.id = abstractSerializedData.readInt32(z);
            this.first_name = abstractSerializedData.readString(z);
            this.last_name = abstractSerializedData.readString(z);
            this.username = abstractSerializedData.readString(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.id);
            abstractSerializedData.writeString(this.first_name);
            abstractSerializedData.writeString(this.last_name);
            abstractSerializedData.writeString(this.username);
        }
    }

    public static class TL_userDeleted_old extends TL_userDeleted_old2 {
        public static int constructor;

        static {
            constructor = -1298475060;
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.id = abstractSerializedData.readInt32(z);
            this.first_name = abstractSerializedData.readString(z);
            this.last_name = abstractSerializedData.readString(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.id);
            abstractSerializedData.writeString(this.first_name);
            abstractSerializedData.writeString(this.last_name);
        }
    }

    public static class TL_userEmpty extends User {
        public static int constructor;

        static {
            constructor = 537022650;
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.id = abstractSerializedData.readInt32(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.id);
        }
    }

    public static class TL_userForeign_old2 extends User {
        public static int constructor;

        static {
            constructor = 123533224;
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.id = abstractSerializedData.readInt32(z);
            this.first_name = abstractSerializedData.readString(z);
            this.last_name = abstractSerializedData.readString(z);
            this.username = abstractSerializedData.readString(z);
            this.access_hash = abstractSerializedData.readInt64(z);
            this.photo = UserProfilePhoto.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
            this.status = UserStatus.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.id);
            abstractSerializedData.writeString(this.first_name);
            abstractSerializedData.writeString(this.last_name);
            abstractSerializedData.writeString(this.username);
            abstractSerializedData.writeInt64(this.access_hash);
            this.photo.serializeToStream(abstractSerializedData);
            this.status.serializeToStream(abstractSerializedData);
        }
    }

    public static class TL_userForeign_old extends TL_userForeign_old2 {
        public static int constructor;

        static {
            constructor = 1377093789;
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.id = abstractSerializedData.readInt32(z);
            this.first_name = abstractSerializedData.readString(z);
            this.last_name = abstractSerializedData.readString(z);
            this.access_hash = abstractSerializedData.readInt64(z);
            this.photo = UserProfilePhoto.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
            this.status = UserStatus.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.id);
            abstractSerializedData.writeString(this.first_name);
            abstractSerializedData.writeString(this.last_name);
            abstractSerializedData.writeInt64(this.access_hash);
            this.photo.serializeToStream(abstractSerializedData);
            this.status.serializeToStream(abstractSerializedData);
        }
    }

    public static class TL_userFull extends TLObject {
        public static int constructor;
        public String about;
        public boolean blocked;
        public BotInfo bot_info;
        public int flags;
        public TL_contacts_link link;
        public PeerNotifySettings notify_settings;
        public Photo profile_photo;
        public User user;

        static {
            constructor = 1496513539;
        }

        public static TL_userFull TLdeserialize(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            if (constructor == i) {
                TL_userFull tL_userFull = new TL_userFull();
                tL_userFull.readParams(abstractSerializedData, z);
                return tL_userFull;
            } else if (!z) {
                return null;
            } else {
                Object[] objArr = new Object[TLRPC.USER_FLAG_ACCESS_HASH];
                objArr[0] = Integer.valueOf(i);
                throw new RuntimeException(String.format("can't parse magic %x in TL_userFull", objArr));
            }
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.flags = abstractSerializedData.readInt32(z);
            this.blocked = (this.flags & TLRPC.USER_FLAG_ACCESS_HASH) != 0;
            this.user = User.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
            if ((this.flags & TLRPC.USER_FLAG_FIRST_NAME) != 0) {
                this.about = abstractSerializedData.readString(z);
            }
            this.link = TL_contacts_link.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
            if ((this.flags & TLRPC.USER_FLAG_LAST_NAME) != 0) {
                this.profile_photo = Photo.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
            }
            this.notify_settings = PeerNotifySettings.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
            if ((this.flags & TLRPC.USER_FLAG_USERNAME) != 0) {
                this.bot_info = BotInfo.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
            }
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.flags = this.blocked ? this.flags | TLRPC.USER_FLAG_ACCESS_HASH : this.flags & -2;
            abstractSerializedData.writeInt32(this.flags);
            this.user.serializeToStream(abstractSerializedData);
            if ((this.flags & TLRPC.USER_FLAG_FIRST_NAME) != 0) {
                abstractSerializedData.writeString(this.about);
            }
            this.link.serializeToStream(abstractSerializedData);
            if ((this.flags & TLRPC.USER_FLAG_LAST_NAME) != 0) {
                this.profile_photo.serializeToStream(abstractSerializedData);
            }
            this.notify_settings.serializeToStream(abstractSerializedData);
            if ((this.flags & TLRPC.USER_FLAG_USERNAME) != 0) {
                this.bot_info.serializeToStream(abstractSerializedData);
            }
        }
    }

    public static class UserProfilePhoto extends TLObject {
        public FileLocation photo_big;
        public long photo_id;
        public FileLocation photo_small;

        public static UserProfilePhoto TLdeserialize(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            UserProfilePhoto userProfilePhoto = null;
            switch (i) {
                case -1727196013:
                    userProfilePhoto = new TL_userProfilePhoto_old();
                    break;
                case -715532088:
                    userProfilePhoto = new TL_userProfilePhoto();
                    break;
                case 1326562017:
                    userProfilePhoto = new TL_userProfilePhotoEmpty();
                    break;
            }
            if (userProfilePhoto == null && z) {
                Object[] objArr = new Object[TLRPC.USER_FLAG_ACCESS_HASH];
                objArr[0] = Integer.valueOf(i);
                throw new RuntimeException(String.format("can't parse magic %x in UserProfilePhoto", objArr));
            }
            if (userProfilePhoto != null) {
                userProfilePhoto.readParams(abstractSerializedData, z);
            }
            return userProfilePhoto;
        }
    }

    public static class TL_userProfilePhoto extends UserProfilePhoto {
        public static int constructor;

        static {
            constructor = -715532088;
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.photo_id = abstractSerializedData.readInt64(z);
            this.photo_small = FileLocation.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
            this.photo_big = FileLocation.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt64(this.photo_id);
            this.photo_small.serializeToStream(abstractSerializedData);
            this.photo_big.serializeToStream(abstractSerializedData);
        }
    }

    public static class TL_userProfilePhotoEmpty extends UserProfilePhoto {
        public static int constructor;

        static {
            constructor = 1326562017;
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
        }
    }

    public static class TL_userProfilePhoto_old extends TL_userProfilePhoto {
        public static int constructor;

        static {
            constructor = -1727196013;
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.photo_small = FileLocation.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
            this.photo_big = FileLocation.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.photo_small.serializeToStream(abstractSerializedData);
            this.photo_big.serializeToStream(abstractSerializedData);
        }
    }

    public static class TL_userRequest_old2 extends User {
        public static int constructor;

        static {
            constructor = -640891665;
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.id = abstractSerializedData.readInt32(z);
            this.first_name = abstractSerializedData.readString(z);
            this.last_name = abstractSerializedData.readString(z);
            this.username = abstractSerializedData.readString(z);
            this.access_hash = abstractSerializedData.readInt64(z);
            this.phone = abstractSerializedData.readString(z);
            this.photo = UserProfilePhoto.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
            this.status = UserStatus.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.id);
            abstractSerializedData.writeString(this.first_name);
            abstractSerializedData.writeString(this.last_name);
            abstractSerializedData.writeString(this.username);
            abstractSerializedData.writeInt64(this.access_hash);
            abstractSerializedData.writeString(this.phone);
            this.photo.serializeToStream(abstractSerializedData);
            this.status.serializeToStream(abstractSerializedData);
        }
    }

    public static class TL_userRequest_old extends TL_userRequest_old2 {
        public static int constructor;

        static {
            constructor = 585682608;
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.id = abstractSerializedData.readInt32(z);
            this.first_name = abstractSerializedData.readString(z);
            this.last_name = abstractSerializedData.readString(z);
            this.access_hash = abstractSerializedData.readInt64(z);
            this.phone = abstractSerializedData.readString(z);
            this.photo = UserProfilePhoto.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
            this.status = UserStatus.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.id);
            abstractSerializedData.writeString(this.first_name);
            abstractSerializedData.writeString(this.last_name);
            abstractSerializedData.writeInt64(this.access_hash);
            abstractSerializedData.writeString(this.phone);
            this.photo.serializeToStream(abstractSerializedData);
            this.status.serializeToStream(abstractSerializedData);
        }
    }

    public static class TL_userSelf_old3 extends User {
        public static int constructor;

        static {
            constructor = 476112392;
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.id = abstractSerializedData.readInt32(z);
            this.first_name = abstractSerializedData.readString(z);
            this.last_name = abstractSerializedData.readString(z);
            this.username = abstractSerializedData.readString(z);
            this.phone = abstractSerializedData.readString(z);
            this.photo = UserProfilePhoto.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
            this.status = UserStatus.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.id);
            abstractSerializedData.writeString(this.first_name);
            abstractSerializedData.writeString(this.last_name);
            abstractSerializedData.writeString(this.username);
            abstractSerializedData.writeString(this.phone);
            this.photo.serializeToStream(abstractSerializedData);
            this.status.serializeToStream(abstractSerializedData);
        }
    }

    public static class TL_userSelf_old2 extends TL_userSelf_old3 {
        public static int constructor;

        static {
            constructor = 1879553105;
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.id = abstractSerializedData.readInt32(z);
            this.first_name = abstractSerializedData.readString(z);
            this.last_name = abstractSerializedData.readString(z);
            this.username = abstractSerializedData.readString(z);
            this.phone = abstractSerializedData.readString(z);
            this.photo = UserProfilePhoto.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
            this.status = UserStatus.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
            this.inactive = abstractSerializedData.readBool(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.id);
            abstractSerializedData.writeString(this.first_name);
            abstractSerializedData.writeString(this.last_name);
            abstractSerializedData.writeString(this.username);
            abstractSerializedData.writeString(this.phone);
            this.photo.serializeToStream(abstractSerializedData);
            this.status.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeBool(this.inactive);
        }
    }

    public static class TL_userSelf_old extends TL_userSelf_old3 {
        public static int constructor;

        static {
            constructor = 1912944108;
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.id = abstractSerializedData.readInt32(z);
            this.first_name = abstractSerializedData.readString(z);
            this.last_name = abstractSerializedData.readString(z);
            this.phone = abstractSerializedData.readString(z);
            this.photo = UserProfilePhoto.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
            this.status = UserStatus.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
            this.inactive = abstractSerializedData.readBool(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.id);
            abstractSerializedData.writeString(this.first_name);
            abstractSerializedData.writeString(this.last_name);
            abstractSerializedData.writeString(this.phone);
            this.photo.serializeToStream(abstractSerializedData);
            this.status.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeBool(this.inactive);
        }
    }

    public static class UserStatus extends TLObject {
        public int expires;

        public static UserStatus TLdeserialize(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            UserStatus userStatus = null;
            switch (i) {
                case -496024847:
                    userStatus = new TL_userStatusRecently();
                    break;
                case -306628279:
                    userStatus = new TL_userStatusOnline();
                    break;
                case 9203775:
                    userStatus = new TL_userStatusOffline();
                    break;
                case 129960444:
                    userStatus = new TL_userStatusLastWeek();
                    break;
                case 164646985:
                    userStatus = new TL_userStatusEmpty();
                    break;
                case 2011940674:
                    userStatus = new TL_userStatusLastMonth();
                    break;
            }
            if (userStatus == null && z) {
                Object[] objArr = new Object[TLRPC.USER_FLAG_ACCESS_HASH];
                objArr[0] = Integer.valueOf(i);
                throw new RuntimeException(String.format("can't parse magic %x in UserStatus", objArr));
            }
            if (userStatus != null) {
                userStatus.readParams(abstractSerializedData, z);
            }
            return userStatus;
        }
    }

    public static class TL_userStatusEmpty extends UserStatus {
        public static int constructor;

        static {
            constructor = 164646985;
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
        }
    }

    public static class TL_userStatusLastMonth extends UserStatus {
        public static int constructor;

        static {
            constructor = 2011940674;
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
        }
    }

    public static class TL_userStatusLastWeek extends UserStatus {
        public static int constructor;

        static {
            constructor = 129960444;
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
        }
    }

    public static class TL_userStatusOffline extends UserStatus {
        public static int constructor;

        static {
            constructor = 9203775;
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.expires = abstractSerializedData.readInt32(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.expires);
        }
    }

    public static class TL_userStatusOnline extends UserStatus {
        public static int constructor;

        static {
            constructor = -306628279;
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.expires = abstractSerializedData.readInt32(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.expires);
        }
    }

    public static class TL_userStatusRecently extends UserStatus {
        public static int constructor;

        static {
            constructor = -496024847;
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
        }
    }

    public static class TL_user_old extends TL_user {
        public static int constructor;

        static {
            constructor = 585404530;
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            boolean z2 = true;
            this.flags = abstractSerializedData.readInt32(z);
            this.self = (this.flags & TLRPC.MESSAGE_FLAG_HAS_VIEWS) != 0;
            this.contact = (this.flags & TLRPC.MESSAGE_FLAG_HAS_BOT_ID) != 0;
            this.mutual_contact = (this.flags & ItemAnimator.FLAG_APPEARED_IN_PRE_LAYOUT) != 0;
            this.deleted = (this.flags & MessagesController.UPDATE_MASK_CHANNEL) != 0;
            this.bot = (this.flags & MessagesController.UPDATE_MASK_CHAT_ADMINS) != 0;
            this.bot_chat_history = (this.flags & TLRPC.MESSAGE_FLAG_EDITED) != 0;
            this.bot_nochats = (this.flags & AccessibilityNodeInfoCompat.ACTION_CUT) != 0;
            this.verified = (this.flags & AccessibilityNodeInfoCompat.ACTION_SET_SELECTION) != 0;
            if ((this.flags & AccessibilityNodeInfoCompat.ACTION_EXPAND) == 0) {
                z2 = false;
            }
            this.explicit_content = z2;
            this.id = abstractSerializedData.readInt32(z);
            if ((this.flags & TLRPC.USER_FLAG_ACCESS_HASH) != 0) {
                this.access_hash = abstractSerializedData.readInt64(z);
            }
            if ((this.flags & TLRPC.USER_FLAG_FIRST_NAME) != 0) {
                this.first_name = abstractSerializedData.readString(z);
            }
            if ((this.flags & TLRPC.USER_FLAG_LAST_NAME) != 0) {
                this.last_name = abstractSerializedData.readString(z);
            }
            if ((this.flags & TLRPC.USER_FLAG_USERNAME) != 0) {
                this.username = abstractSerializedData.readString(z);
            }
            if ((this.flags & TLRPC.USER_FLAG_PHONE) != 0) {
                this.phone = abstractSerializedData.readString(z);
            }
            if ((this.flags & TLRPC.USER_FLAG_PHOTO) != 0) {
                this.photo = UserProfilePhoto.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
            }
            if ((this.flags & TLRPC.USER_FLAG_STATUS) != 0) {
                this.status = UserStatus.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
            }
            if ((this.flags & MessagesController.UPDATE_MASK_CHAT_ADMINS) != 0) {
                this.bot_info_version = abstractSerializedData.readInt32(z);
            }
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.flags = this.self ? this.flags | TLRPC.MESSAGE_FLAG_HAS_VIEWS : this.flags & -1025;
            this.flags = this.contact ? this.flags | TLRPC.MESSAGE_FLAG_HAS_BOT_ID : this.flags & -2049;
            this.flags = this.mutual_contact ? this.flags | ItemAnimator.FLAG_APPEARED_IN_PRE_LAYOUT : this.flags & -4097;
            this.flags = this.deleted ? this.flags | MessagesController.UPDATE_MASK_CHANNEL : this.flags & -8193;
            this.flags = this.bot ? this.flags | MessagesController.UPDATE_MASK_CHAT_ADMINS : this.flags & -16385;
            this.flags = this.bot_chat_history ? this.flags | TLRPC.MESSAGE_FLAG_EDITED : this.flags & -32769;
            this.flags = this.bot_nochats ? this.flags | AccessibilityNodeInfoCompat.ACTION_CUT : this.flags & -65537;
            this.flags = this.verified ? this.flags | AccessibilityNodeInfoCompat.ACTION_SET_SELECTION : this.flags & -131073;
            this.flags = this.explicit_content ? this.flags | AccessibilityNodeInfoCompat.ACTION_EXPAND : this.flags & -262145;
            abstractSerializedData.writeInt32(this.flags);
            abstractSerializedData.writeInt32(this.id);
            if ((this.flags & TLRPC.USER_FLAG_ACCESS_HASH) != 0) {
                abstractSerializedData.writeInt64(this.access_hash);
            }
            if ((this.flags & TLRPC.USER_FLAG_FIRST_NAME) != 0) {
                abstractSerializedData.writeString(this.first_name);
            }
            if ((this.flags & TLRPC.USER_FLAG_LAST_NAME) != 0) {
                abstractSerializedData.writeString(this.last_name);
            }
            if ((this.flags & TLRPC.USER_FLAG_USERNAME) != 0) {
                abstractSerializedData.writeString(this.username);
            }
            if ((this.flags & TLRPC.USER_FLAG_PHONE) != 0) {
                abstractSerializedData.writeString(this.phone);
            }
            if ((this.flags & TLRPC.USER_FLAG_PHOTO) != 0) {
                this.photo.serializeToStream(abstractSerializedData);
            }
            if ((this.flags & TLRPC.USER_FLAG_STATUS) != 0) {
                this.status.serializeToStream(abstractSerializedData);
            }
            if ((this.flags & MessagesController.UPDATE_MASK_CHAT_ADMINS) != 0) {
                abstractSerializedData.writeInt32(this.bot_info_version);
            }
        }
    }

    public static class TL_users_getFullUser extends TLObject {
        public static int constructor;
        public InputUser id;

        static {
            constructor = -902781519;
        }

        public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            return TL_userFull.TLdeserialize(abstractSerializedData, i, z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            this.id.serializeToStream(abstractSerializedData);
        }
    }

    public static class TL_users_getUsers extends TLObject {
        public static int constructor;
        public ArrayList<InputUser> id;

        static {
            constructor = 227648840;
        }

        public TL_users_getUsers() {
            this.id = new ArrayList();
        }

        public TLObject deserializeResponse(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            TLObject vector = new Vector();
            int readInt32 = abstractSerializedData.readInt32(z);
            for (int i2 = 0; i2 < readInt32; i2 += TLRPC.USER_FLAG_ACCESS_HASH) {
                User TLdeserialize = User.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
                if (TLdeserialize == null) {
                    break;
                }
                vector.objects.add(TLdeserialize);
            }
            return vector;
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(481674261);
            int size = this.id.size();
            abstractSerializedData.writeInt32(size);
            for (int i = 0; i < size; i += TLRPC.USER_FLAG_ACCESS_HASH) {
                ((InputUser) this.id.get(i)).serializeToStream(abstractSerializedData);
            }
        }
    }

    public static class Video extends TLObject {
        public long access_hash;
        public String caption;
        public int date;
        public int dc_id;
        public int duration;
        public int f2675h;
        public long id;
        public byte[] iv;
        public byte[] key;
        public String mime_type;
        public int size;
        public PhotoSize thumb;
        public int user_id;
        public int f2676w;

        public static Video TLdeserialize(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            Video video = null;
            switch (i) {
                case -1056548696:
                    video = new TL_videoEmpty_layer45();
                    break;
                case -291550643:
                    video = new TL_video_old3();
                    break;
                case -148338733:
                    video = new TL_video_layer45();
                    break;
                case 948937617:
                    video = new TL_video_old2();
                    break;
                case 1431655763:
                    video = new TL_videoEncrypted();
                    break;
                case 1510253727:
                    video = new TL_video_old();
                    break;
            }
            if (video == null && z) {
                Object[] objArr = new Object[TLRPC.USER_FLAG_ACCESS_HASH];
                objArr[0] = Integer.valueOf(i);
                throw new RuntimeException(String.format("can't parse magic %x in Video", objArr));
            }
            if (video != null) {
                video.readParams(abstractSerializedData, z);
            }
            return video;
        }
    }

    public static class TL_videoEmpty_layer45 extends Video {
        public static int constructor;

        static {
            constructor = -1056548696;
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.id = abstractSerializedData.readInt64(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt64(this.id);
        }
    }

    public static class TL_video_layer45 extends Video {
        public static int constructor;

        static {
            constructor = -148338733;
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.id = abstractSerializedData.readInt64(z);
            this.access_hash = abstractSerializedData.readInt64(z);
            this.date = abstractSerializedData.readInt32(z);
            this.duration = abstractSerializedData.readInt32(z);
            this.mime_type = abstractSerializedData.readString(z);
            this.size = abstractSerializedData.readInt32(z);
            this.thumb = PhotoSize.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
            this.dc_id = abstractSerializedData.readInt32(z);
            this.w = abstractSerializedData.readInt32(z);
            this.h = abstractSerializedData.readInt32(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt64(this.id);
            abstractSerializedData.writeInt64(this.access_hash);
            abstractSerializedData.writeInt32(this.date);
            abstractSerializedData.writeInt32(this.duration);
            abstractSerializedData.writeString(this.mime_type);
            abstractSerializedData.writeInt32(this.size);
            this.thumb.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeInt32(this.dc_id);
            abstractSerializedData.writeInt32(this.w);
            abstractSerializedData.writeInt32(this.h);
        }
    }

    public static class TL_videoEncrypted extends TL_video_layer45 {
        public static int constructor;

        static {
            constructor = 1431655763;
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.id = abstractSerializedData.readInt64(z);
            this.access_hash = abstractSerializedData.readInt64(z);
            this.user_id = abstractSerializedData.readInt32(z);
            this.date = abstractSerializedData.readInt32(z);
            this.caption = abstractSerializedData.readString(z);
            this.duration = abstractSerializedData.readInt32(z);
            this.size = abstractSerializedData.readInt32(z);
            this.thumb = PhotoSize.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
            this.dc_id = abstractSerializedData.readInt32(z);
            this.w = abstractSerializedData.readInt32(z);
            this.h = abstractSerializedData.readInt32(z);
            this.key = abstractSerializedData.readByteArray(z);
            this.iv = abstractSerializedData.readByteArray(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt64(this.id);
            abstractSerializedData.writeInt64(this.access_hash);
            abstractSerializedData.writeInt32(this.user_id);
            abstractSerializedData.writeInt32(this.date);
            abstractSerializedData.writeString(this.caption);
            abstractSerializedData.writeInt32(this.duration);
            abstractSerializedData.writeInt32(this.size);
            this.thumb.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeInt32(this.dc_id);
            abstractSerializedData.writeInt32(this.w);
            abstractSerializedData.writeInt32(this.h);
            abstractSerializedData.writeByteArray(this.key);
            abstractSerializedData.writeByteArray(this.iv);
        }
    }

    public static class TL_video_old2 extends TL_video_layer45 {
        public static int constructor;

        static {
            constructor = 948937617;
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.id = abstractSerializedData.readInt64(z);
            this.access_hash = abstractSerializedData.readInt64(z);
            this.user_id = abstractSerializedData.readInt32(z);
            this.date = abstractSerializedData.readInt32(z);
            this.caption = abstractSerializedData.readString(z);
            this.duration = abstractSerializedData.readInt32(z);
            this.mime_type = abstractSerializedData.readString(z);
            this.size = abstractSerializedData.readInt32(z);
            this.thumb = PhotoSize.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
            this.dc_id = abstractSerializedData.readInt32(z);
            this.w = abstractSerializedData.readInt32(z);
            this.h = abstractSerializedData.readInt32(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt64(this.id);
            abstractSerializedData.writeInt64(this.access_hash);
            abstractSerializedData.writeInt32(this.user_id);
            abstractSerializedData.writeInt32(this.date);
            abstractSerializedData.writeString(this.caption);
            abstractSerializedData.writeInt32(this.duration);
            abstractSerializedData.writeString(this.mime_type);
            abstractSerializedData.writeInt32(this.size);
            this.thumb.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeInt32(this.dc_id);
            abstractSerializedData.writeInt32(this.w);
            abstractSerializedData.writeInt32(this.h);
        }
    }

    public static class TL_video_old3 extends TL_video_layer45 {
        public static int constructor;

        static {
            constructor = -291550643;
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.id = abstractSerializedData.readInt64(z);
            this.access_hash = abstractSerializedData.readInt64(z);
            this.user_id = abstractSerializedData.readInt32(z);
            this.date = abstractSerializedData.readInt32(z);
            this.duration = abstractSerializedData.readInt32(z);
            this.size = abstractSerializedData.readInt32(z);
            this.thumb = PhotoSize.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
            this.dc_id = abstractSerializedData.readInt32(z);
            this.w = abstractSerializedData.readInt32(z);
            this.h = abstractSerializedData.readInt32(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt64(this.id);
            abstractSerializedData.writeInt64(this.access_hash);
            abstractSerializedData.writeInt32(this.user_id);
            abstractSerializedData.writeInt32(this.date);
            abstractSerializedData.writeInt32(this.duration);
            abstractSerializedData.writeInt32(this.size);
            this.thumb.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeInt32(this.dc_id);
            abstractSerializedData.writeInt32(this.w);
            abstractSerializedData.writeInt32(this.h);
        }
    }

    public static class TL_video_old extends TL_video_layer45 {
        public static int constructor;

        static {
            constructor = 1510253727;
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.id = abstractSerializedData.readInt64(z);
            this.access_hash = abstractSerializedData.readInt64(z);
            this.user_id = abstractSerializedData.readInt32(z);
            this.date = abstractSerializedData.readInt32(z);
            this.caption = abstractSerializedData.readString(z);
            this.duration = abstractSerializedData.readInt32(z);
            this.size = abstractSerializedData.readInt32(z);
            this.thumb = PhotoSize.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
            this.dc_id = abstractSerializedData.readInt32(z);
            this.w = abstractSerializedData.readInt32(z);
            this.h = abstractSerializedData.readInt32(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt64(this.id);
            abstractSerializedData.writeInt64(this.access_hash);
            abstractSerializedData.writeInt32(this.user_id);
            abstractSerializedData.writeInt32(this.date);
            abstractSerializedData.writeString(this.caption);
            abstractSerializedData.writeInt32(this.duration);
            abstractSerializedData.writeInt32(this.size);
            this.thumb.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeInt32(this.dc_id);
            abstractSerializedData.writeInt32(this.w);
            abstractSerializedData.writeInt32(this.h);
        }
    }

    public static class WallPaper extends TLObject {
        public int bg_color;
        public int color;
        public int id;
        public ArrayList<PhotoSize> sizes;
        public String title;

        public WallPaper() {
            this.sizes = new ArrayList();
        }

        public static WallPaper TLdeserialize(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            WallPaper wallPaper = null;
            switch (i) {
                case -860866985:
                    wallPaper = new TL_wallPaper();
                    break;
                case 1662091044:
                    wallPaper = new TL_wallPaperSolid();
                    break;
            }
            if (wallPaper == null && z) {
                Object[] objArr = new Object[TLRPC.USER_FLAG_ACCESS_HASH];
                objArr[0] = Integer.valueOf(i);
                throw new RuntimeException(String.format("can't parse magic %x in WallPaper", objArr));
            }
            if (wallPaper != null) {
                wallPaper.readParams(abstractSerializedData, z);
            }
            return wallPaper;
        }
    }

    public static class TL_wallPaper extends WallPaper {
        public static int constructor;

        static {
            constructor = -860866985;
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            int i = 0;
            this.id = abstractSerializedData.readInt32(z);
            this.title = abstractSerializedData.readString(z);
            int readInt32 = abstractSerializedData.readInt32(z);
            if (readInt32 == 481674261) {
                readInt32 = abstractSerializedData.readInt32(z);
                while (i < readInt32) {
                    PhotoSize TLdeserialize = PhotoSize.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
                    if (TLdeserialize != null) {
                        this.sizes.add(TLdeserialize);
                        i += TLRPC.USER_FLAG_ACCESS_HASH;
                    } else {
                        return;
                    }
                }
                this.color = abstractSerializedData.readInt32(z);
            } else if (z) {
                Object[] objArr = new Object[TLRPC.USER_FLAG_ACCESS_HASH];
                objArr[0] = Integer.valueOf(readInt32);
                throw new RuntimeException(String.format("wrong Vector magic, got %x", objArr));
            }
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.id);
            abstractSerializedData.writeString(this.title);
            abstractSerializedData.writeInt32(481674261);
            int size = this.sizes.size();
            abstractSerializedData.writeInt32(size);
            for (int i = 0; i < size; i += TLRPC.USER_FLAG_ACCESS_HASH) {
                ((PhotoSize) this.sizes.get(i)).serializeToStream(abstractSerializedData);
            }
            abstractSerializedData.writeInt32(this.color);
        }
    }

    public static class TL_wallPaperSolid extends WallPaper {
        public static int constructor;

        static {
            constructor = 1662091044;
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.id = abstractSerializedData.readInt32(z);
            this.title = abstractSerializedData.readString(z);
            this.bg_color = abstractSerializedData.readInt32(z);
            this.color = abstractSerializedData.readInt32(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.id);
            abstractSerializedData.writeString(this.title);
            abstractSerializedData.writeInt32(this.bg_color);
            abstractSerializedData.writeInt32(this.color);
        }
    }

    public static class WebPage extends TLObject {
        public String author;
        public int date;
        public String description;
        public String display_url;
        public Document document;
        public int duration;
        public int embed_height;
        public String embed_type;
        public String embed_url;
        public int embed_width;
        public int flags;
        public long id;
        public Photo photo;
        public String site_name;
        public String title;
        public String type;
        public String url;

        public static WebPage TLdeserialize(AbstractSerializedData abstractSerializedData, int i, boolean z) {
            WebPage webPage = null;
            switch (i) {
                case -1558273867:
                    webPage = new TL_webPage_old();
                    break;
                case -981018084:
                    webPage = new TL_webPagePending();
                    break;
                case -897446185:
                    webPage = new TL_webPage();
                    break;
                case -736472729:
                    webPage = new TL_webPageUrlPending();
                    break;
                case -350980120:
                    webPage = new TL_webPageEmpty();
                    break;
            }
            if (webPage == null && z) {
                Object[] objArr = new Object[TLRPC.USER_FLAG_ACCESS_HASH];
                objArr[0] = Integer.valueOf(i);
                throw new RuntimeException(String.format("can't parse magic %x in WebPage", objArr));
            }
            if (webPage != null) {
                webPage.readParams(abstractSerializedData, z);
            }
            return webPage;
        }
    }

    public static class TL_webPage extends WebPage {
        public static int constructor;

        static {
            constructor = -897446185;
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.flags = abstractSerializedData.readInt32(z);
            this.id = abstractSerializedData.readInt64(z);
            this.url = abstractSerializedData.readString(z);
            this.display_url = abstractSerializedData.readString(z);
            if ((this.flags & TLRPC.USER_FLAG_ACCESS_HASH) != 0) {
                this.type = abstractSerializedData.readString(z);
            }
            if ((this.flags & TLRPC.USER_FLAG_FIRST_NAME) != 0) {
                this.site_name = abstractSerializedData.readString(z);
            }
            if ((this.flags & TLRPC.USER_FLAG_LAST_NAME) != 0) {
                this.title = abstractSerializedData.readString(z);
            }
            if ((this.flags & TLRPC.USER_FLAG_USERNAME) != 0) {
                this.description = abstractSerializedData.readString(z);
            }
            if ((this.flags & TLRPC.USER_FLAG_PHONE) != 0) {
                this.photo = Photo.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
            }
            if ((this.flags & TLRPC.USER_FLAG_PHOTO) != 0) {
                this.embed_url = abstractSerializedData.readString(z);
            }
            if ((this.flags & TLRPC.USER_FLAG_PHOTO) != 0) {
                this.embed_type = abstractSerializedData.readString(z);
            }
            if ((this.flags & TLRPC.USER_FLAG_STATUS) != 0) {
                this.embed_width = abstractSerializedData.readInt32(z);
            }
            if ((this.flags & TLRPC.USER_FLAG_STATUS) != 0) {
                this.embed_height = abstractSerializedData.readInt32(z);
            }
            if ((this.flags & TLRPC.USER_FLAG_UNUSED) != 0) {
                this.duration = abstractSerializedData.readInt32(z);
            }
            if ((this.flags & TLRPC.USER_FLAG_UNUSED2) != 0) {
                this.author = abstractSerializedData.readString(z);
            }
            if ((this.flags & TLRPC.USER_FLAG_UNUSED3) != 0) {
                this.document = Document.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
            }
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.flags);
            abstractSerializedData.writeInt64(this.id);
            abstractSerializedData.writeString(this.url);
            abstractSerializedData.writeString(this.display_url);
            if ((this.flags & TLRPC.USER_FLAG_ACCESS_HASH) != 0) {
                abstractSerializedData.writeString(this.type);
            }
            if ((this.flags & TLRPC.USER_FLAG_FIRST_NAME) != 0) {
                abstractSerializedData.writeString(this.site_name);
            }
            if ((this.flags & TLRPC.USER_FLAG_LAST_NAME) != 0) {
                abstractSerializedData.writeString(this.title);
            }
            if ((this.flags & TLRPC.USER_FLAG_USERNAME) != 0) {
                abstractSerializedData.writeString(this.description);
            }
            if ((this.flags & TLRPC.USER_FLAG_PHONE) != 0) {
                this.photo.serializeToStream(abstractSerializedData);
            }
            if ((this.flags & TLRPC.USER_FLAG_PHOTO) != 0) {
                abstractSerializedData.writeString(this.embed_url);
            }
            if ((this.flags & TLRPC.USER_FLAG_PHOTO) != 0) {
                abstractSerializedData.writeString(this.embed_type);
            }
            if ((this.flags & TLRPC.USER_FLAG_STATUS) != 0) {
                abstractSerializedData.writeInt32(this.embed_width);
            }
            if ((this.flags & TLRPC.USER_FLAG_STATUS) != 0) {
                abstractSerializedData.writeInt32(this.embed_height);
            }
            if ((this.flags & TLRPC.USER_FLAG_UNUSED) != 0) {
                abstractSerializedData.writeInt32(this.duration);
            }
            if ((this.flags & TLRPC.USER_FLAG_UNUSED2) != 0) {
                abstractSerializedData.writeString(this.author);
            }
            if ((this.flags & TLRPC.USER_FLAG_UNUSED3) != 0) {
                this.document.serializeToStream(abstractSerializedData);
            }
        }
    }

    public static class TL_webPageEmpty extends WebPage {
        public static int constructor;

        static {
            constructor = -350980120;
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.id = abstractSerializedData.readInt64(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt64(this.id);
        }
    }

    public static class TL_webPagePending extends WebPage {
        public static int constructor;

        static {
            constructor = -981018084;
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.id = abstractSerializedData.readInt64(z);
            this.date = abstractSerializedData.readInt32(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt64(this.id);
            abstractSerializedData.writeInt32(this.date);
        }
    }

    public static class TL_webPageUrlPending extends WebPage {
        public static int constructor;

        static {
            constructor = -736472729;
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.url = abstractSerializedData.readString(z);
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeString(this.url);
        }
    }

    public static class TL_webPage_old extends WebPage {
        public static int constructor;

        static {
            constructor = -1558273867;
        }

        public void readParams(AbstractSerializedData abstractSerializedData, boolean z) {
            this.flags = abstractSerializedData.readInt32(z);
            this.id = abstractSerializedData.readInt64(z);
            this.url = abstractSerializedData.readString(z);
            this.display_url = abstractSerializedData.readString(z);
            if ((this.flags & TLRPC.USER_FLAG_ACCESS_HASH) != 0) {
                this.type = abstractSerializedData.readString(z);
            }
            if ((this.flags & TLRPC.USER_FLAG_FIRST_NAME) != 0) {
                this.site_name = abstractSerializedData.readString(z);
            }
            if ((this.flags & TLRPC.USER_FLAG_LAST_NAME) != 0) {
                this.title = abstractSerializedData.readString(z);
            }
            if ((this.flags & TLRPC.USER_FLAG_USERNAME) != 0) {
                this.description = abstractSerializedData.readString(z);
            }
            if ((this.flags & TLRPC.USER_FLAG_PHONE) != 0) {
                this.photo = Photo.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(z), z);
            }
            if ((this.flags & TLRPC.USER_FLAG_PHOTO) != 0) {
                this.embed_url = abstractSerializedData.readString(z);
            }
            if ((this.flags & TLRPC.USER_FLAG_PHOTO) != 0) {
                this.embed_type = abstractSerializedData.readString(z);
            }
            if ((this.flags & TLRPC.USER_FLAG_STATUS) != 0) {
                this.embed_width = abstractSerializedData.readInt32(z);
            }
            if ((this.flags & TLRPC.USER_FLAG_STATUS) != 0) {
                this.embed_height = abstractSerializedData.readInt32(z);
            }
            if ((this.flags & TLRPC.USER_FLAG_UNUSED) != 0) {
                this.duration = abstractSerializedData.readInt32(z);
            }
            if ((this.flags & TLRPC.USER_FLAG_UNUSED2) != 0) {
                this.author = abstractSerializedData.readString(z);
            }
        }

        public void serializeToStream(AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(constructor);
            abstractSerializedData.writeInt32(this.flags);
            abstractSerializedData.writeInt64(this.id);
            abstractSerializedData.writeString(this.url);
            abstractSerializedData.writeString(this.display_url);
            if ((this.flags & TLRPC.USER_FLAG_ACCESS_HASH) != 0) {
                abstractSerializedData.writeString(this.type);
            }
            if ((this.flags & TLRPC.USER_FLAG_FIRST_NAME) != 0) {
                abstractSerializedData.writeString(this.site_name);
            }
            if ((this.flags & TLRPC.USER_FLAG_LAST_NAME) != 0) {
                abstractSerializedData.writeString(this.title);
            }
            if ((this.flags & TLRPC.USER_FLAG_USERNAME) != 0) {
                abstractSerializedData.writeString(this.description);
            }
            if ((this.flags & TLRPC.USER_FLAG_PHONE) != 0) {
                this.photo.serializeToStream(abstractSerializedData);
            }
            if ((this.flags & TLRPC.USER_FLAG_PHOTO) != 0) {
                abstractSerializedData.writeString(this.embed_url);
            }
            if ((this.flags & TLRPC.USER_FLAG_PHOTO) != 0) {
                abstractSerializedData.writeString(this.embed_type);
            }
            if ((this.flags & TLRPC.USER_FLAG_STATUS) != 0) {
                abstractSerializedData.writeInt32(this.embed_width);
            }
            if ((this.flags & TLRPC.USER_FLAG_STATUS) != 0) {
                abstractSerializedData.writeInt32(this.embed_height);
            }
            if ((this.flags & TLRPC.USER_FLAG_UNUSED) != 0) {
                abstractSerializedData.writeInt32(this.duration);
            }
            if ((this.flags & TLRPC.USER_FLAG_UNUSED2) != 0) {
                abstractSerializedData.writeString(this.author);
            }
        }
    }

    public static class Vector extends TLObject {
        public static int constructor;
        public ArrayList<Object> objects;

        static {
            constructor = 481674261;
        }

        public Vector() {
            this.objects = new ArrayList();
        }
    }
}
